// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Ansible Credential Form Component should render adding a new credential 1`] = `
<Provider
  store={
    Object {
      "asyncReducers": Object {
        "FormButtons": [Function],
        "notificationReducer": [Function],
      },
      "dispatch": [Function],
      "getState": [Function],
      "injectReducers": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <AnsibleCredentialsForm>
    <Connect(MiqFormRenderer)
      buttonsLabels={
        Object {
          "submitLabel": "Add",
        }
      }
      canReset={false}
      initialValues={
        Object {
          "manager_resource": Object {
            "href": "http://localhost:3000/api/providers/1",
          },
        }
      }
      onCancel={[Function]}
      onSubmit={[Function]}
      schema={
        Object {
          "fields": Array [
            Object {
              "component": "text-field",
              "name": "manager_resource",
              "type": "hidden",
            },
            Object {
              "component": "text-field",
              "id": "name",
              "isRequired": true,
              "label": "Name",
              "maxLength": 128,
              "name": "name",
              "validate": Array [
                Object {
                  "type": "required",
                },
              ],
            },
            Object {
              "component": "select",
              "id": "type",
              "isDisabled": false,
              "isRequired": true,
              "label": "Credential type",
              "loadOptions": [Function],
              "name": "type",
              "onChange": [Function],
              "placeholder": "<Choose>",
              "validate": Array [
                Object {
                  "type": "required",
                },
              ],
            },
          ],
        }
      }
    >
      <MiqFormRenderer
        buttonsLabels={
          Object {
            "submitLabel": "Add",
          }
        }
        canReset={false}
        className="form-react"
        componentMapper={
          Object {
            "button": [Function],
            "checkbox": [Function],
            "code-editor": [Function],
            "date-picker": [Function],
            "dual-list-select": [Function],
            "edit-password-field": [Function],
            "field-array": [Function],
            "input-addon-button-group": [Function],
            "input-addon-group": [Function],
            "password-field": [Function],
            "plain-text": [Function],
            "radio": [Function],
            "select": [Function],
            "slider": [Function],
            "sub-form": [Function],
            "switch": [Function],
            "tabs": [Function],
            "text-field": [Function],
            "textarea": [Function],
            "time-picker": [Function],
            "tree-selector": [Function],
            "tree-view": [Function],
            "validate-credentials": [Function],
            "wizard": [Function],
          }
        }
        disableSubmit={
          Array [
            "pristine",
            "invalid",
          ]
        }
        dispatch={[Function]}
        initialValues={
          Object {
            "manager_resource": Object {
              "href": "http://localhost:3000/api/providers/1",
            },
          }
        }
        onCancel={[Function]}
        onSubmit={[Function]}
        schema={
          Object {
            "fields": Array [
              Object {
                "component": "text-field",
                "name": "manager_resource",
                "type": "hidden",
              },
              Object {
                "component": "text-field",
                "id": "name",
                "isRequired": true,
                "label": "Name",
                "maxLength": 128,
                "name": "name",
                "validate": Array [
                  Object {
                    "type": "required",
                  },
                ],
              },
              Object {
                "component": "select",
                "id": "type",
                "isDisabled": false,
                "isRequired": true,
                "label": "Credential type",
                "loadOptions": [Function],
                "name": "type",
                "onChange": [Function],
                "placeholder": "<Choose>",
                "validate": Array [
                  Object {
                    "type": "required",
                  },
                ],
              },
            ],
          }
        }
        showFormControls={true}
      >
        <FormRenderer
          FormTemplate={[Function]}
          clearOnUnmount={false}
          componentMapper={
            Object {
              "button": [Function],
              "checkbox": [Function],
              "code-editor": [Function],
              "date-picker": [Function],
              "dual-list-select": [Function],
              "edit-password-field": [Function],
              "field-array": [Function],
              "input-addon-button-group": [Function],
              "input-addon-group": [Function],
              "password-field": [Function],
              "plain-text": [Function],
              "radio": [Function],
              "select": [Function],
              "slider": [Function],
              "spy-field": [Function],
              "sub-form": [Function],
              "switch": [Function],
              "tabs": [Function],
              "text-field": [Function],
              "textarea": [Function],
              "time-picker": [Function],
              "tree-selector": [Function],
              "tree-view": [Function],
              "validate-credentials": [Function],
              "wizard": [Function],
            }
          }
          dispatch={[Function]}
          initialValues={
            Object {
              "manager_resource": Object {
                "href": "http://localhost:3000/api/providers/1",
              },
            }
          }
          onCancel={[Function]}
          onReset={[Function]}
          onSubmit={[Function]}
          schema={
            Object {
              "fields": Array [
                Object {
                  "component": "text-field",
                  "name": "manager_resource",
                  "type": "hidden",
                },
                Object {
                  "component": "text-field",
                  "id": "name",
                  "isRequired": true,
                  "label": "Name",
                  "maxLength": 128,
                  "name": "name",
                  "validate": Array [
                    Object {
                      "type": "required",
                    },
                  ],
                },
                Object {
                  "component": "select",
                  "id": "type",
                  "isDisabled": false,
                  "isRequired": true,
                  "label": "Credential type",
                  "loadOptions": [Function],
                  "name": "type",
                  "onChange": [Function],
                  "placeholder": "<Choose>",
                  "validate": Array [
                    Object {
                      "type": "required",
                    },
                  ],
                },
                Object {
                  "component": "spy-field",
                  "initialize": undefined,
                  "name": "spy-field",
                },
              ],
            }
          }
        >
          <ReactFinalForm
            decorators={
              Array [
                [Function],
              ]
            }
            dispatch={[Function]}
            initialValues={
              Object {
                "manager_resource": Object {
                  "href": "http://localhost:3000/api/providers/1",
                },
              }
            }
            mutators={
              Object {
                "concat": [Function],
                "insert": [Function],
                "move": [Function],
                "pop": [Function],
                "push": [Function],
                "remove": [Function],
                "removeBatch": [Function],
                "shift": [Function],
                "swap": [Function],
                "unshift": [Function],
                "update": [Function],
              }
            }
            onSubmit={[Function]}
            render={[Function]}
            subscription={
              Object {
                "pristine": true,
                "submitting": true,
                "valid": true,
              }
            }
          >
            <Component
              formFields={
                Array [
                  <SingleField
                    component="text-field"
                    name="manager_resource"
                    type="hidden"
                  />,
                  <SingleField
                    component="text-field"
                    id="name"
                    isRequired={true}
                    label="Name"
                    maxLength={128}
                    name="name"
                    validate={
                      Array [
                        Object {
                          "type": "required",
                        },
                      ]
                    }
                  />,
                  <SingleField
                    component="select"
                    id="type"
                    isDisabled={false}
                    isRequired={true}
                    label="Credential type"
                    loadOptions={[Function]}
                    name="type"
                    onChange={[Function]}
                    placeholder="<Choose>"
                    validate={
                      Array [
                        Object {
                          "type": "required",
                        },
                      ]
                    }
                  />,
                  <SingleField
                    component="spy-field"
                    name="spy-field"
                  />,
                ]
              }
              schema={
                Object {
                  "fields": Array [
                    Object {
                      "component": "text-field",
                      "name": "manager_resource",
                      "type": "hidden",
                    },
                    Object {
                      "component": "text-field",
                      "id": "name",
                      "isRequired": true,
                      "label": "Name",
                      "maxLength": 128,
                      "name": "name",
                      "validate": Array [
                        Object {
                          "type": "required",
                        },
                      ],
                    },
                    Object {
                      "component": "select",
                      "id": "type",
                      "isDisabled": false,
                      "isRequired": true,
                      "label": "Credential type",
                      "loadOptions": [Function],
                      "name": "type",
                      "onChange": [Function],
                      "placeholder": "<Choose>",
                      "validate": Array [
                        Object {
                          "type": "required",
                        },
                      ],
                    },
                    Object {
                      "component": "spy-field",
                      "initialize": undefined,
                      "name": "spy-field",
                    },
                  ],
                }
              }
            >
              <PF3FormTemplate
                FormWrapper={[Function]}
                canReset={false}
                cancelLabel="Cancel"
                disableSubmit={
                  Array [
                    "pristine",
                    "invalid",
                  ]
                }
                formFields={
                  Array [
                    <SingleField
                      component="text-field"
                      name="manager_resource"
                      type="hidden"
                    />,
                    <SingleField
                      component="text-field"
                      id="name"
                      isRequired={true}
                      label="Name"
                      maxLength={128}
                      name="name"
                      validate={
                        Array [
                          Object {
                            "type": "required",
                          },
                        ]
                      }
                    />,
                    <SingleField
                      component="select"
                      id="type"
                      isDisabled={false}
                      isRequired={true}
                      label="Credential type"
                      loadOptions={[Function]}
                      name="type"
                      onChange={[Function]}
                      placeholder="<Choose>"
                      validate={
                        Array [
                          Object {
                            "type": "required",
                          },
                        ]
                      }
                    />,
                    <SingleField
                      component="spy-field"
                      name="spy-field"
                    />,
                  ]
                }
                resetLabel="Reset"
                schema={
                  Object {
                    "fields": Array [
                      Object {
                        "component": "text-field",
                        "name": "manager_resource",
                        "type": "hidden",
                      },
                      Object {
                        "component": "text-field",
                        "id": "name",
                        "isRequired": true,
                        "label": "Name",
                        "maxLength": 128,
                        "name": "name",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "select",
                        "id": "type",
                        "isDisabled": false,
                        "isRequired": true,
                        "label": "Credential type",
                        "loadOptions": [Function],
                        "name": "type",
                        "onChange": [Function],
                        "placeholder": "<Choose>",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "spy-field",
                        "initialize": undefined,
                        "name": "spy-field",
                      },
                    ],
                  }
                }
                showFormControls={true}
                submitLabel="Add"
              >
                <FormTemplate
                  Button={[Function]}
                  ButtonGroup={[Function]}
                  Description={[Function]}
                  FormWrapper={[Function]}
                  Header={Symbol(react.fragment)}
                  Title={[Function]}
                  canReset={false}
                  cancelLabel="Cancel"
                  disableSubmit={
                    Array [
                      "pristine",
                      "invalid",
                    ]
                  }
                  formFields={
                    Array [
                      <SingleField
                        component="text-field"
                        name="manager_resource"
                        type="hidden"
                      />,
                      <SingleField
                        component="text-field"
                        id="name"
                        isRequired={true}
                        label="Name"
                        maxLength={128}
                        name="name"
                        validate={
                          Array [
                            Object {
                              "type": "required",
                            },
                          ]
                        }
                      />,
                      <SingleField
                        component="select"
                        id="type"
                        isDisabled={false}
                        isRequired={true}
                        label="Credential type"
                        loadOptions={[Function]}
                        name="type"
                        onChange={[Function]}
                        placeholder="<Choose>"
                        validate={
                          Array [
                            Object {
                              "type": "required",
                            },
                          ]
                        }
                      />,
                      <SingleField
                        component="spy-field"
                        name="spy-field"
                      />,
                    ]
                  }
                  resetLabel="Reset"
                  schema={
                    Object {
                      "fields": Array [
                        Object {
                          "component": "text-field",
                          "name": "manager_resource",
                          "type": "hidden",
                        },
                        Object {
                          "component": "text-field",
                          "id": "name",
                          "isRequired": true,
                          "label": "Name",
                          "maxLength": 128,
                          "name": "name",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "select",
                          "id": "type",
                          "isDisabled": false,
                          "isRequired": true,
                          "label": "Credential type",
                          "loadOptions": [Function],
                          "name": "type",
                          "onChange": [Function],
                          "placeholder": "<Choose>",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "spy-field",
                          "initialize": undefined,
                          "name": "spy-field",
                        },
                      ],
                    }
                  }
                  showFormControls={true}
                  submitLabel="Add"
                >
                  <Component
                    onSubmit={[Function]}
                  >
                    <Form
                      bsClass="form"
                      className="ddorg__pf3-layout-components__form-wrapper form-react"
                      componentClass="form"
                      horizontal={false}
                      inline={false}
                      onSubmit={[Function]}
                    >
                      <form
                        className="ddorg__pf3-layout-components__form-wrapper form-react"
                        onSubmit={[Function]}
                      >
                        <SingleField
                          component="text-field"
                          key="manager_resource"
                          name="manager_resource"
                          type="hidden"
                        >
                          <FormConditionWrapper
                            field={
                              Object {
                                "component": "text-field",
                                "name": "manager_resource",
                                "type": "hidden",
                              }
                            }
                          >
                            <FormFieldHideWrapper
                              hideField={false}
                            >
                              <TextField
                                component="text-field"
                                name="manager_resource"
                                type="hidden"
                              >
                                <Pf3FormGroup
                                  meta={
                                    Object {
                                      "active": false,
                                      "data": Object {},
                                      "dirty": false,
                                      "dirtySinceLastSubmit": false,
                                      "error": undefined,
                                      "initial": Object {
                                        "href": "http://localhost:3000/api/providers/1",
                                      },
                                      "invalid": false,
                                      "length": undefined,
                                      "modified": false,
                                      "modifiedSinceLastSubmit": false,
                                      "pristine": true,
                                      "submitError": undefined,
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": true,
                                      "validating": false,
                                      "visited": false,
                                    }
                                  }
                                >
                                  <FormGroup
                                    bsClass="form-group"
                                    validationState={null}
                                  >
                                    <div
                                      className="form-group"
                                    >
                                      <FormControl
                                        bsClass="form-control"
                                        componentClass="input"
                                        name="manager_resource"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        type="hidden"
                                        value={
                                          Object {
                                            "href": "http://localhost:3000/api/providers/1",
                                          }
                                        }
                                      >
                                        <input
                                          className="form-control"
                                          name="manager_resource"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          type="hidden"
                                          value={
                                            Object {
                                              "href": "http://localhost:3000/api/providers/1",
                                            }
                                          }
                                        />
                                      </FormControl>
                                    </div>
                                  </FormGroup>
                                </Pf3FormGroup>
                              </TextField>
                            </FormFieldHideWrapper>
                          </FormConditionWrapper>
                        </SingleField>
                        <SingleField
                          component="text-field"
                          id="name"
                          isRequired={true}
                          key="name"
                          label="Name"
                          maxLength={128}
                          name="name"
                          validate={
                            Array [
                              Object {
                                "type": "required",
                              },
                            ]
                          }
                        >
                          <FormConditionWrapper
                            field={
                              Object {
                                "component": "text-field",
                                "id": "name",
                                "isRequired": true,
                                "label": "Name",
                                "maxLength": 128,
                                "name": "name",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              }
                            }
                          >
                            <FormFieldHideWrapper
                              hideField={false}
                            >
                              <TextField
                                component="text-field"
                                id="name"
                                isRequired={true}
                                label="Name"
                                maxLength={128}
                                name="name"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              >
                                <Pf3FormGroup
                                  isRequired={true}
                                  label="Name"
                                  meta={
                                    Object {
                                      "active": false,
                                      "data": Object {},
                                      "dirty": false,
                                      "dirtySinceLastSubmit": false,
                                      "error": "Required",
                                      "initial": undefined,
                                      "invalid": true,
                                      "length": undefined,
                                      "modified": false,
                                      "modifiedSinceLastSubmit": false,
                                      "pristine": true,
                                      "submitError": undefined,
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": false,
                                      "validating": false,
                                      "visited": false,
                                    }
                                  }
                                >
                                  <FormGroup
                                    bsClass="form-group"
                                    validationState={null}
                                  >
                                    <div
                                      className="form-group"
                                    >
                                      <ControlLabel
                                        bsClass="control-label"
                                        srOnly={false}
                                      >
                                        <label
                                          className="control-label"
                                        >
                                          <RequiredLabel
                                            label="Name"
                                          >
                                            <span
                                              style={
                                                Object {
                                                  "color": "#ff0000",
                                                }
                                              }
                                            >
                                              * 
                                            </span>
                                             
                                            Name
                                          </RequiredLabel>
                                        </label>
                                      </ControlLabel>
                                      <FormControl
                                        bsClass="form-control"
                                        componentClass="input"
                                        id="name"
                                        maxLength={128}
                                        name="name"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        value=""
                                      >
                                        <input
                                          className="form-control"
                                          id="name"
                                          maxLength={128}
                                          name="name"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          value=""
                                        />
                                      </FormControl>
                                    </div>
                                  </FormGroup>
                                </Pf3FormGroup>
                              </TextField>
                            </FormFieldHideWrapper>
                          </FormConditionWrapper>
                        </SingleField>
                        <SingleField
                          component="select"
                          id="type"
                          isDisabled={false}
                          isRequired={true}
                          key="type"
                          label="Credential type"
                          loadOptions={[Function]}
                          name="type"
                          onChange={[Function]}
                          placeholder="<Choose>"
                          validate={
                            Array [
                              Object {
                                "type": "required",
                              },
                            ]
                          }
                        >
                          <FormConditionWrapper
                            field={
                              Object {
                                "component": "select",
                                "id": "type",
                                "isDisabled": false,
                                "isRequired": true,
                                "label": "Credential type",
                                "loadOptions": [Function],
                                "name": "type",
                                "onChange": [Function],
                                "placeholder": "<Choose>",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              }
                            }
                          >
                            <FormFieldHideWrapper
                              hideField={false}
                            >
                              <SelectWithOnChange
                                component="select"
                                id="type"
                                isDisabled={false}
                                isRequired={true}
                                label="Credential type"
                                loadOptions={[Function]}
                                name="type"
                                onChange={[Function]}
                                placeholder="<Choose>"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              >
                                <Select
                                  allowNull={true}
                                  component="select"
                                  id="type"
                                  isDisabled={false}
                                  isRequired={true}
                                  label="Credential type"
                                  loadOptions={[Function]}
                                  name="type"
                                  placeholder="<Choose>"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                >
                                  <Pf3FormGroup
                                    isRequired={true}
                                    label="Credential type"
                                    meta={
                                      Object {
                                        "active": false,
                                        "data": Object {},
                                        "dirty": false,
                                        "dirtySinceLastSubmit": false,
                                        "error": "Required",
                                        "initial": undefined,
                                        "invalid": true,
                                        "length": undefined,
                                        "modified": false,
                                        "modifiedSinceLastSubmit": false,
                                        "pristine": true,
                                        "submitError": undefined,
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "touched": false,
                                        "valid": false,
                                        "validating": false,
                                        "visited": false,
                                      }
                                    }
                                  >
                                    <FormGroup
                                      bsClass="form-group"
                                      validationState={null}
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <ControlLabel
                                          bsClass="control-label"
                                          srOnly={false}
                                        >
                                          <label
                                            className="control-label"
                                          >
                                            <RequiredLabel
                                              label="Credential type"
                                            >
                                              <span
                                                style={
                                                  Object {
                                                    "color": "#ff0000",
                                                  }
                                                }
                                              >
                                                * 
                                              </span>
                                               
                                              Credential type
                                            </RequiredLabel>
                                          </label>
                                        </ControlLabel>
                                        <div>
                                          <Select
                                            allowNull={true}
                                            classNamePrefix="ddorg__pf3-component-mapper__select"
                                            id="type"
                                            input={
                                              Object {
                                                "checked": undefined,
                                                "name": "type",
                                                "onBlur": [Function],
                                                "onChange": [Function],
                                                "onFocus": [Function],
                                                "value": "",
                                              }
                                            }
                                            invalid={false}
                                            isDisabled={false}
                                            loadOptions={[Function]}
                                            loadingMessage="Loading..."
                                            placeholder="<Choose>"
                                            updatingMessage="Loading data"
                                          >
                                            <Select
                                              SelectComponent={[Function]}
                                              allowNull={true}
                                              className="ddorg__pf3-component-mapper__select"
                                              classNamePrefix="ddorg__pf3-component-mapper__select"
                                              components={
                                                Object {
                                                  "ClearIndicator": [Function],
                                                  "DropdownIndicator": [Function],
                                                  "Option": [Function],
                                                }
                                              }
                                              id="type"
                                              invalid={false}
                                              isClearable={false}
                                              isDisabled={false}
                                              isSearchable={false}
                                              loadOptions={[Function]}
                                              loadOptionsChangeCounter={1}
                                              loadingMessage="Loading..."
                                              name="type"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              options={Array []}
                                              placeholder="<Choose>"
                                              pluckSingleValue={true}
                                              simpleValue={true}
                                              updatingMessage="Loading data"
                                              value=""
                                            >
                                              <SelectComponent
                                                allowNull={true}
                                                className="ddorg__pf3-component-mapper__select"
                                                classNamePrefix="ddorg__pf3-component-mapper__select"
                                                closeMenuOnSelect={true}
                                                components={
                                                  Object {
                                                    "ClearIndicator": [Function],
                                                    "DropdownIndicator": [Function],
                                                    "Option": [Function],
                                                  }
                                                }
                                                hideSelectedOptions={false}
                                                id="type"
                                                isClearable={false}
                                                isFetching={false}
                                                isSearchable={false}
                                                name="type"
                                                noOptionsMessage={[Function]}
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onInputChange={[Function]}
                                                options={
                                                  Array [
                                                    Object {
                                                      "label": "Amazon",
                                                      "value": "foo",
                                                    },
                                                    Object {
                                                      "label": undefined,
                                                      "value": "bar",
                                                    },
                                                  ]
                                                }
                                                placeholder="<Choose>"
                                                value={Array []}
                                              >
                                                <StateManager
                                                  allowNull={true}
                                                  className="ddorg__pf3-component-mapper__select"
                                                  classNamePrefix="ddorg__pf3-component-mapper__select"
                                                  closeMenuOnSelect={true}
                                                  components={
                                                    Object {
                                                      "ClearIndicator": [Function],
                                                      "DropdownIndicator": [Function],
                                                      "Option": [Function],
                                                    }
                                                  }
                                                  defaultInputValue=""
                                                  defaultMenuIsOpen={false}
                                                  defaultValue={null}
                                                  hideSelectedOptions={false}
                                                  id="type"
                                                  isClearable={false}
                                                  isFetching={false}
                                                  isSearchable={false}
                                                  name="type"
                                                  noOptionsMessage={[Function]}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  onInputChange={[Function]}
                                                  options={
                                                    Array [
                                                      Object {
                                                        "label": "Amazon",
                                                        "value": "foo",
                                                      },
                                                      Object {
                                                        "label": undefined,
                                                        "value": "bar",
                                                      },
                                                    ]
                                                  }
                                                  placeholder="<Choose>"
                                                  value={Array []}
                                                >
                                                  <Select
                                                    allowNull={true}
                                                    backspaceRemovesValue={true}
                                                    blurInputOnSelect={true}
                                                    captureMenuScroll={false}
                                                    className="ddorg__pf3-component-mapper__select"
                                                    classNamePrefix="ddorg__pf3-component-mapper__select"
                                                    closeMenuOnScroll={false}
                                                    closeMenuOnSelect={true}
                                                    components={
                                                      Object {
                                                        "ClearIndicator": [Function],
                                                        "DropdownIndicator": [Function],
                                                        "Option": [Function],
                                                      }
                                                    }
                                                    controlShouldRenderValue={true}
                                                    escapeClearsValue={false}
                                                    filterOption={[Function]}
                                                    formatGroupLabel={[Function]}
                                                    getOptionLabel={[Function]}
                                                    getOptionValue={[Function]}
                                                    hideSelectedOptions={false}
                                                    id="type"
                                                    inputValue=""
                                                    isClearable={false}
                                                    isDisabled={false}
                                                    isFetching={false}
                                                    isLoading={false}
                                                    isMulti={false}
                                                    isOptionDisabled={[Function]}
                                                    isRtl={false}
                                                    isSearchable={false}
                                                    loadingMessage={[Function]}
                                                    maxMenuHeight={300}
                                                    menuIsOpen={false}
                                                    menuPlacement="bottom"
                                                    menuPosition="absolute"
                                                    menuShouldBlockScroll={false}
                                                    menuShouldScrollIntoView={true}
                                                    minMenuHeight={140}
                                                    name="type"
                                                    noOptionsMessage={[Function]}
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    onInputChange={[Function]}
                                                    onMenuClose={[Function]}
                                                    onMenuOpen={[Function]}
                                                    openMenuOnClick={true}
                                                    openMenuOnFocus={false}
                                                    options={
                                                      Array [
                                                        Object {
                                                          "label": "Amazon",
                                                          "value": "foo",
                                                        },
                                                        Object {
                                                          "label": undefined,
                                                          "value": "bar",
                                                        },
                                                      ]
                                                    }
                                                    pageSize={5}
                                                    placeholder="<Choose>"
                                                    screenReaderStatus={[Function]}
                                                    styles={Object {}}
                                                    tabIndex="0"
                                                    tabSelectsValue={true}
                                                    value={Array []}
                                                  >
                                                    <SelectContainer
                                                      className="ddorg__pf3-component-mapper__select"
                                                      clearValue={[Function]}
                                                      cx={[Function]}
                                                      getStyles={[Function]}
                                                      getValue={[Function]}
                                                      hasValue={false}
                                                      innerProps={
                                                        Object {
                                                          "id": "type",
                                                          "onKeyDown": [Function],
                                                        }
                                                      }
                                                      isDisabled={false}
                                                      isFocused={false}
                                                      isMulti={false}
                                                      isRtl={false}
                                                      options={
                                                        Array [
                                                          Object {
                                                            "label": "Amazon",
                                                            "value": "foo",
                                                          },
                                                          Object {
                                                            "label": undefined,
                                                            "value": "bar",
                                                          },
                                                        ]
                                                      }
                                                      selectOption={[Function]}
                                                      selectProps={
                                                        Object {
                                                          "allowNull": true,
                                                          "backspaceRemovesValue": true,
                                                          "blurInputOnSelect": true,
                                                          "captureMenuScroll": false,
                                                          "checked": undefined,
                                                          "className": "ddorg__pf3-component-mapper__select",
                                                          "classNamePrefix": "ddorg__pf3-component-mapper__select",
                                                          "closeMenuOnScroll": false,
                                                          "closeMenuOnSelect": true,
                                                          "components": Object {
                                                            "ClearIndicator": [Function],
                                                            "DropdownIndicator": [Function],
                                                            "Option": [Function],
                                                          },
                                                          "controlShouldRenderValue": true,
                                                          "escapeClearsValue": false,
                                                          "filterOption": [Function],
                                                          "formatGroupLabel": [Function],
                                                          "getOptionLabel": [Function],
                                                          "getOptionValue": [Function],
                                                          "hideSelectedOptions": false,
                                                          "id": "type",
                                                          "inputValue": "",
                                                          "isClearable": false,
                                                          "isDisabled": false,
                                                          "isFetching": false,
                                                          "isLoading": false,
                                                          "isMulti": false,
                                                          "isOptionDisabled": [Function],
                                                          "isRtl": false,
                                                          "isSearchable": false,
                                                          "loadingMessage": [Function],
                                                          "maxMenuHeight": 300,
                                                          "menuIsOpen": false,
                                                          "menuPlacement": "bottom",
                                                          "menuPosition": "absolute",
                                                          "menuShouldBlockScroll": false,
                                                          "menuShouldScrollIntoView": true,
                                                          "minMenuHeight": 140,
                                                          "name": "type",
                                                          "noOptionsMessage": [Function],
                                                          "onBlur": [Function],
                                                          "onChange": [Function],
                                                          "onFocus": [Function],
                                                          "onInputChange": [Function],
                                                          "onMenuClose": [Function],
                                                          "onMenuOpen": [Function],
                                                          "openMenuOnClick": true,
                                                          "openMenuOnFocus": false,
                                                          "options": Array [
                                                            Object {
                                                              "label": "Amazon",
                                                              "value": "foo",
                                                            },
                                                            Object {
                                                              "label": undefined,
                                                              "value": "bar",
                                                            },
                                                          ],
                                                          "pageSize": 5,
                                                          "placeholder": "<Choose>",
                                                          "screenReaderStatus": [Function],
                                                          "styles": Object {},
                                                          "tabIndex": "0",
                                                          "tabSelectsValue": true,
                                                          "value": Array [],
                                                        }
                                                      }
                                                      setValue={[Function]}
                                                      theme={
                                                        Object {
                                                          "borderRadius": 4,
                                                          "colors": Object {
                                                            "danger": "#DE350B",
                                                            "dangerLight": "#FFBDAD",
                                                            "neutral0": "hsl(0, 0%, 100%)",
                                                            "neutral10": "hsl(0, 0%, 90%)",
                                                            "neutral20": "hsl(0, 0%, 80%)",
                                                            "neutral30": "hsl(0, 0%, 70%)",
                                                            "neutral40": "hsl(0, 0%, 60%)",
                                                            "neutral5": "hsl(0, 0%, 95%)",
                                                            "neutral50": "hsl(0, 0%, 50%)",
                                                            "neutral60": "hsl(0, 0%, 40%)",
                                                            "neutral70": "hsl(0, 0%, 30%)",
                                                            "neutral80": "hsl(0, 0%, 20%)",
                                                            "neutral90": "hsl(0, 0%, 10%)",
                                                            "primary": "#2684FF",
                                                            "primary25": "#DEEBFF",
                                                            "primary50": "#B2D4FF",
                                                            "primary75": "#4C9AFF",
                                                          },
                                                          "spacing": Object {
                                                            "baseUnit": 4,
                                                            "controlHeight": 38,
                                                            "menuGutter": 8,
                                                          },
                                                        }
                                                      }
                                                    >
                                                      <ForwardRef(render)
                                                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                        className="ddorg__pf3-component-mapper__select"
                                                        css={
                                                          Object {
                                                            "boxSizing": "border-box",
                                                            "direction": null,
                                                            "label": "container",
                                                            "pointerEvents": null,
                                                            "position": "relative",
                                                          }
                                                        }
                                                        id="type"
                                                        onKeyDown={[Function]}
                                                      >
                                                        <div
                                                          className="ddorg__pf3-component-mapper__select css-2b097c-container"
                                                          id="type"
                                                          onKeyDown={[Function]}
                                                        >
                                                          <Control
                                                            clearValue={[Function]}
                                                            cx={[Function]}
                                                            getStyles={[Function]}
                                                            getValue={[Function]}
                                                            hasValue={false}
                                                            innerProps={
                                                              Object {
                                                                "onMouseDown": [Function],
                                                                "onTouchEnd": [Function],
                                                              }
                                                            }
                                                            innerRef={[Function]}
                                                            isDisabled={false}
                                                            isFocused={false}
                                                            isMulti={false}
                                                            isRtl={false}
                                                            menuIsOpen={false}
                                                            options={
                                                              Array [
                                                                Object {
                                                                  "label": "Amazon",
                                                                  "value": "foo",
                                                                },
                                                                Object {
                                                                  "label": undefined,
                                                                  "value": "bar",
                                                                },
                                                              ]
                                                            }
                                                            selectOption={[Function]}
                                                            selectProps={
                                                              Object {
                                                                "allowNull": true,
                                                                "backspaceRemovesValue": true,
                                                                "blurInputOnSelect": true,
                                                                "captureMenuScroll": false,
                                                                "checked": undefined,
                                                                "className": "ddorg__pf3-component-mapper__select",
                                                                "classNamePrefix": "ddorg__pf3-component-mapper__select",
                                                                "closeMenuOnScroll": false,
                                                                "closeMenuOnSelect": true,
                                                                "components": Object {
                                                                  "ClearIndicator": [Function],
                                                                  "DropdownIndicator": [Function],
                                                                  "Option": [Function],
                                                                },
                                                                "controlShouldRenderValue": true,
                                                                "escapeClearsValue": false,
                                                                "filterOption": [Function],
                                                                "formatGroupLabel": [Function],
                                                                "getOptionLabel": [Function],
                                                                "getOptionValue": [Function],
                                                                "hideSelectedOptions": false,
                                                                "id": "type",
                                                                "inputValue": "",
                                                                "isClearable": false,
                                                                "isDisabled": false,
                                                                "isFetching": false,
                                                                "isLoading": false,
                                                                "isMulti": false,
                                                                "isOptionDisabled": [Function],
                                                                "isRtl": false,
                                                                "isSearchable": false,
                                                                "loadingMessage": [Function],
                                                                "maxMenuHeight": 300,
                                                                "menuIsOpen": false,
                                                                "menuPlacement": "bottom",
                                                                "menuPosition": "absolute",
                                                                "menuShouldBlockScroll": false,
                                                                "menuShouldScrollIntoView": true,
                                                                "minMenuHeight": 140,
                                                                "name": "type",
                                                                "noOptionsMessage": [Function],
                                                                "onBlur": [Function],
                                                                "onChange": [Function],
                                                                "onFocus": [Function],
                                                                "onInputChange": [Function],
                                                                "onMenuClose": [Function],
                                                                "onMenuOpen": [Function],
                                                                "openMenuOnClick": true,
                                                                "openMenuOnFocus": false,
                                                                "options": Array [
                                                                  Object {
                                                                    "label": "Amazon",
                                                                    "value": "foo",
                                                                  },
                                                                  Object {
                                                                    "label": undefined,
                                                                    "value": "bar",
                                                                  },
                                                                ],
                                                                "pageSize": 5,
                                                                "placeholder": "<Choose>",
                                                                "screenReaderStatus": [Function],
                                                                "styles": Object {},
                                                                "tabIndex": "0",
                                                                "tabSelectsValue": true,
                                                                "value": Array [],
                                                              }
                                                            }
                                                            setValue={[Function]}
                                                            theme={
                                                              Object {
                                                                "borderRadius": 4,
                                                                "colors": Object {
                                                                  "danger": "#DE350B",
                                                                  "dangerLight": "#FFBDAD",
                                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                                  "neutral50": "hsl(0, 0%, 50%)",
                                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                                  "primary": "#2684FF",
                                                                  "primary25": "#DEEBFF",
                                                                  "primary50": "#B2D4FF",
                                                                  "primary75": "#4C9AFF",
                                                                },
                                                                "spacing": Object {
                                                                  "baseUnit": 4,
                                                                  "controlHeight": 38,
                                                                  "menuGutter": 8,
                                                                },
                                                              }
                                                            }
                                                          >
                                                            <ForwardRef(render)
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                              className="ddorg__pf3-component-mapper__select__control"
                                                              css={
                                                                Object {
                                                                  "&:hover": Object {
                                                                    "borderColor": "hsl(0, 0%, 70%)",
                                                                  },
                                                                  "alignItems": "center",
                                                                  "backgroundColor": "hsl(0, 0%, 100%)",
                                                                  "borderColor": "hsl(0, 0%, 80%)",
                                                                  "borderRadius": 4,
                                                                  "borderStyle": "solid",
                                                                  "borderWidth": 1,
                                                                  "boxShadow": null,
                                                                  "boxSizing": "border-box",
                                                                  "cursor": "default",
                                                                  "display": "flex",
                                                                  "flexWrap": "wrap",
                                                                  "justifyContent": "space-between",
                                                                  "label": "control",
                                                                  "minHeight": 38,
                                                                  "outline": "0 !important",
                                                                  "position": "relative",
                                                                  "transition": "all 100ms",
                                                                }
                                                              }
                                                              onMouseDown={[Function]}
                                                              onTouchEnd={[Function]}
                                                            >
                                                              <div
                                                                className="ddorg__pf3-component-mapper__select__control css-yk16xz-control"
                                                                onMouseDown={[Function]}
                                                                onTouchEnd={[Function]}
                                                              >
                                                                <ValueContainer
                                                                  clearValue={[Function]}
                                                                  cx={[Function]}
                                                                  getStyles={[Function]}
                                                                  getValue={[Function]}
                                                                  hasValue={false}
                                                                  isDisabled={false}
                                                                  isMulti={false}
                                                                  isRtl={false}
                                                                  options={
                                                                    Array [
                                                                      Object {
                                                                        "label": "Amazon",
                                                                        "value": "foo",
                                                                      },
                                                                      Object {
                                                                        "label": undefined,
                                                                        "value": "bar",
                                                                      },
                                                                    ]
                                                                  }
                                                                  selectOption={[Function]}
                                                                  selectProps={
                                                                    Object {
                                                                      "allowNull": true,
                                                                      "backspaceRemovesValue": true,
                                                                      "blurInputOnSelect": true,
                                                                      "captureMenuScroll": false,
                                                                      "checked": undefined,
                                                                      "className": "ddorg__pf3-component-mapper__select",
                                                                      "classNamePrefix": "ddorg__pf3-component-mapper__select",
                                                                      "closeMenuOnScroll": false,
                                                                      "closeMenuOnSelect": true,
                                                                      "components": Object {
                                                                        "ClearIndicator": [Function],
                                                                        "DropdownIndicator": [Function],
                                                                        "Option": [Function],
                                                                      },
                                                                      "controlShouldRenderValue": true,
                                                                      "escapeClearsValue": false,
                                                                      "filterOption": [Function],
                                                                      "formatGroupLabel": [Function],
                                                                      "getOptionLabel": [Function],
                                                                      "getOptionValue": [Function],
                                                                      "hideSelectedOptions": false,
                                                                      "id": "type",
                                                                      "inputValue": "",
                                                                      "isClearable": false,
                                                                      "isDisabled": false,
                                                                      "isFetching": false,
                                                                      "isLoading": false,
                                                                      "isMulti": false,
                                                                      "isOptionDisabled": [Function],
                                                                      "isRtl": false,
                                                                      "isSearchable": false,
                                                                      "loadingMessage": [Function],
                                                                      "maxMenuHeight": 300,
                                                                      "menuIsOpen": false,
                                                                      "menuPlacement": "bottom",
                                                                      "menuPosition": "absolute",
                                                                      "menuShouldBlockScroll": false,
                                                                      "menuShouldScrollIntoView": true,
                                                                      "minMenuHeight": 140,
                                                                      "name": "type",
                                                                      "noOptionsMessage": [Function],
                                                                      "onBlur": [Function],
                                                                      "onChange": [Function],
                                                                      "onFocus": [Function],
                                                                      "onInputChange": [Function],
                                                                      "onMenuClose": [Function],
                                                                      "onMenuOpen": [Function],
                                                                      "openMenuOnClick": true,
                                                                      "openMenuOnFocus": false,
                                                                      "options": Array [
                                                                        Object {
                                                                          "label": "Amazon",
                                                                          "value": "foo",
                                                                        },
                                                                        Object {
                                                                          "label": undefined,
                                                                          "value": "bar",
                                                                        },
                                                                      ],
                                                                      "pageSize": 5,
                                                                      "placeholder": "<Choose>",
                                                                      "screenReaderStatus": [Function],
                                                                      "styles": Object {},
                                                                      "tabIndex": "0",
                                                                      "tabSelectsValue": true,
                                                                      "value": Array [],
                                                                    }
                                                                  }
                                                                  setValue={[Function]}
                                                                  theme={
                                                                    Object {
                                                                      "borderRadius": 4,
                                                                      "colors": Object {
                                                                        "danger": "#DE350B",
                                                                        "dangerLight": "#FFBDAD",
                                                                        "neutral0": "hsl(0, 0%, 100%)",
                                                                        "neutral10": "hsl(0, 0%, 90%)",
                                                                        "neutral20": "hsl(0, 0%, 80%)",
                                                                        "neutral30": "hsl(0, 0%, 70%)",
                                                                        "neutral40": "hsl(0, 0%, 60%)",
                                                                        "neutral5": "hsl(0, 0%, 95%)",
                                                                        "neutral50": "hsl(0, 0%, 50%)",
                                                                        "neutral60": "hsl(0, 0%, 40%)",
                                                                        "neutral70": "hsl(0, 0%, 30%)",
                                                                        "neutral80": "hsl(0, 0%, 20%)",
                                                                        "neutral90": "hsl(0, 0%, 10%)",
                                                                        "primary": "#2684FF",
                                                                        "primary25": "#DEEBFF",
                                                                        "primary50": "#B2D4FF",
                                                                        "primary75": "#4C9AFF",
                                                                      },
                                                                      "spacing": Object {
                                                                        "baseUnit": 4,
                                                                        "controlHeight": 38,
                                                                        "menuGutter": 8,
                                                                      },
                                                                    }
                                                                  }
                                                                >
                                                                  <ForwardRef(render)
                                                                    __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                                    className="ddorg__pf3-component-mapper__select__value-container"
                                                                    css={
                                                                      Object {
                                                                        "WebkitOverflowScrolling": "touch",
                                                                        "alignItems": "center",
                                                                        "boxSizing": "border-box",
                                                                        "display": "flex",
                                                                        "flex": 1,
                                                                        "flexWrap": "wrap",
                                                                        "overflow": "hidden",
                                                                        "padding": "2px 8px",
                                                                        "position": "relative",
                                                                      }
                                                                    }
                                                                  >
                                                                    <div
                                                                      className="ddorg__pf3-component-mapper__select__value-container css-1hwfws3"
                                                                    >
                                                                      <Placeholder
                                                                        clearValue={[Function]}
                                                                        cx={[Function]}
                                                                        getStyles={[Function]}
                                                                        getValue={[Function]}
                                                                        hasValue={false}
                                                                        isDisabled={false}
                                                                        isFocused={false}
                                                                        isMulti={false}
                                                                        isRtl={false}
                                                                        key="placeholder"
                                                                        options={
                                                                          Array [
                                                                            Object {
                                                                              "label": "Amazon",
                                                                              "value": "foo",
                                                                            },
                                                                            Object {
                                                                              "label": undefined,
                                                                              "value": "bar",
                                                                            },
                                                                          ]
                                                                        }
                                                                        selectOption={[Function]}
                                                                        selectProps={
                                                                          Object {
                                                                            "allowNull": true,
                                                                            "backspaceRemovesValue": true,
                                                                            "blurInputOnSelect": true,
                                                                            "captureMenuScroll": false,
                                                                            "checked": undefined,
                                                                            "className": "ddorg__pf3-component-mapper__select",
                                                                            "classNamePrefix": "ddorg__pf3-component-mapper__select",
                                                                            "closeMenuOnScroll": false,
                                                                            "closeMenuOnSelect": true,
                                                                            "components": Object {
                                                                              "ClearIndicator": [Function],
                                                                              "DropdownIndicator": [Function],
                                                                              "Option": [Function],
                                                                            },
                                                                            "controlShouldRenderValue": true,
                                                                            "escapeClearsValue": false,
                                                                            "filterOption": [Function],
                                                                            "formatGroupLabel": [Function],
                                                                            "getOptionLabel": [Function],
                                                                            "getOptionValue": [Function],
                                                                            "hideSelectedOptions": false,
                                                                            "id": "type",
                                                                            "inputValue": "",
                                                                            "isClearable": false,
                                                                            "isDisabled": false,
                                                                            "isFetching": false,
                                                                            "isLoading": false,
                                                                            "isMulti": false,
                                                                            "isOptionDisabled": [Function],
                                                                            "isRtl": false,
                                                                            "isSearchable": false,
                                                                            "loadingMessage": [Function],
                                                                            "maxMenuHeight": 300,
                                                                            "menuIsOpen": false,
                                                                            "menuPlacement": "bottom",
                                                                            "menuPosition": "absolute",
                                                                            "menuShouldBlockScroll": false,
                                                                            "menuShouldScrollIntoView": true,
                                                                            "minMenuHeight": 140,
                                                                            "name": "type",
                                                                            "noOptionsMessage": [Function],
                                                                            "onBlur": [Function],
                                                                            "onChange": [Function],
                                                                            "onFocus": [Function],
                                                                            "onInputChange": [Function],
                                                                            "onMenuClose": [Function],
                                                                            "onMenuOpen": [Function],
                                                                            "openMenuOnClick": true,
                                                                            "openMenuOnFocus": false,
                                                                            "options": Array [
                                                                              Object {
                                                                                "label": "Amazon",
                                                                                "value": "foo",
                                                                              },
                                                                              Object {
                                                                                "label": undefined,
                                                                                "value": "bar",
                                                                              },
                                                                            ],
                                                                            "pageSize": 5,
                                                                            "placeholder": "<Choose>",
                                                                            "screenReaderStatus": [Function],
                                                                            "styles": Object {},
                                                                            "tabIndex": "0",
                                                                            "tabSelectsValue": true,
                                                                            "value": Array [],
                                                                          }
                                                                        }
                                                                        setValue={[Function]}
                                                                        theme={
                                                                          Object {
                                                                            "borderRadius": 4,
                                                                            "colors": Object {
                                                                              "danger": "#DE350B",
                                                                              "dangerLight": "#FFBDAD",
                                                                              "neutral0": "hsl(0, 0%, 100%)",
                                                                              "neutral10": "hsl(0, 0%, 90%)",
                                                                              "neutral20": "hsl(0, 0%, 80%)",
                                                                              "neutral30": "hsl(0, 0%, 70%)",
                                                                              "neutral40": "hsl(0, 0%, 60%)",
                                                                              "neutral5": "hsl(0, 0%, 95%)",
                                                                              "neutral50": "hsl(0, 0%, 50%)",
                                                                              "neutral60": "hsl(0, 0%, 40%)",
                                                                              "neutral70": "hsl(0, 0%, 30%)",
                                                                              "neutral80": "hsl(0, 0%, 20%)",
                                                                              "neutral90": "hsl(0, 0%, 10%)",
                                                                              "primary": "#2684FF",
                                                                              "primary25": "#DEEBFF",
                                                                              "primary50": "#B2D4FF",
                                                                              "primary75": "#4C9AFF",
                                                                            },
                                                                            "spacing": Object {
                                                                              "baseUnit": 4,
                                                                              "controlHeight": 38,
                                                                              "menuGutter": 8,
                                                                            },
                                                                          }
                                                                        }
                                                                      >
                                                                        <ForwardRef(render)
                                                                          __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                                          className="ddorg__pf3-component-mapper__select__placeholder"
                                                                          css={
                                                                            Object {
                                                                              "boxSizing": "border-box",
                                                                              "color": "hsl(0, 0%, 50%)",
                                                                              "label": "placeholder",
                                                                              "marginLeft": 2,
                                                                              "marginRight": 2,
                                                                              "position": "absolute",
                                                                              "top": "50%",
                                                                              "transform": "translateY(-50%)",
                                                                            }
                                                                          }
                                                                        >
                                                                          <div
                                                                            className="ddorg__pf3-component-mapper__select__placeholder css-1wa3eu0-placeholder"
                                                                          >
                                                                            &lt;Choose&gt;
                                                                          </div>
                                                                        </ForwardRef(render)>
                                                                      </Placeholder>
                                                                      <DummyInput
                                                                        aria-autocomplete="list"
                                                                        disabled={false}
                                                                        id="react-select-7-input"
                                                                        innerRef={[Function]}
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        readOnly={true}
                                                                        tabIndex="0"
                                                                        value=""
                                                                      >
                                                                        <ForwardRef(render)
                                                                          __EMOTION_TYPE_PLEASE_DO_NOT_USE__="input"
                                                                          aria-autocomplete="list"
                                                                          css={
                                                                            Object {
                                                                              "name": "62g3xt-dummyInput",
                                                                              "next": undefined,
                                                                              "styles": "label:dummyInput;background:0;border:0;font-size:inherit;outline:0;padding:0;width:1px;color:transparent;left:-100px;opacity:0;position:relative;transform:scale(0);",
                                                                            }
                                                                          }
                                                                          disabled={false}
                                                                          id="react-select-7-input"
                                                                          onBlur={[Function]}
                                                                          onChange={[Function]}
                                                                          onFocus={[Function]}
                                                                          readOnly={true}
                                                                          tabIndex="0"
                                                                          value=""
                                                                        >
                                                                          <input
                                                                            aria-autocomplete="list"
                                                                            className="css-62g3xt-dummyInput"
                                                                            disabled={false}
                                                                            id="react-select-7-input"
                                                                            onBlur={[Function]}
                                                                            onChange={[Function]}
                                                                            onFocus={[Function]}
                                                                            readOnly={true}
                                                                            tabIndex="0"
                                                                            value=""
                                                                          />
                                                                        </ForwardRef(render)>
                                                                      </DummyInput>
                                                                    </div>
                                                                  </ForwardRef(render)>
                                                                </ValueContainer>
                                                                <IndicatorsContainer
                                                                  clearValue={[Function]}
                                                                  cx={[Function]}
                                                                  getStyles={[Function]}
                                                                  getValue={[Function]}
                                                                  hasValue={false}
                                                                  isDisabled={false}
                                                                  isMulti={false}
                                                                  isRtl={false}
                                                                  options={
                                                                    Array [
                                                                      Object {
                                                                        "label": "Amazon",
                                                                        "value": "foo",
                                                                      },
                                                                      Object {
                                                                        "label": undefined,
                                                                        "value": "bar",
                                                                      },
                                                                    ]
                                                                  }
                                                                  selectOption={[Function]}
                                                                  selectProps={
                                                                    Object {
                                                                      "allowNull": true,
                                                                      "backspaceRemovesValue": true,
                                                                      "blurInputOnSelect": true,
                                                                      "captureMenuScroll": false,
                                                                      "checked": undefined,
                                                                      "className": "ddorg__pf3-component-mapper__select",
                                                                      "classNamePrefix": "ddorg__pf3-component-mapper__select",
                                                                      "closeMenuOnScroll": false,
                                                                      "closeMenuOnSelect": true,
                                                                      "components": Object {
                                                                        "ClearIndicator": [Function],
                                                                        "DropdownIndicator": [Function],
                                                                        "Option": [Function],
                                                                      },
                                                                      "controlShouldRenderValue": true,
                                                                      "escapeClearsValue": false,
                                                                      "filterOption": [Function],
                                                                      "formatGroupLabel": [Function],
                                                                      "getOptionLabel": [Function],
                                                                      "getOptionValue": [Function],
                                                                      "hideSelectedOptions": false,
                                                                      "id": "type",
                                                                      "inputValue": "",
                                                                      "isClearable": false,
                                                                      "isDisabled": false,
                                                                      "isFetching": false,
                                                                      "isLoading": false,
                                                                      "isMulti": false,
                                                                      "isOptionDisabled": [Function],
                                                                      "isRtl": false,
                                                                      "isSearchable": false,
                                                                      "loadingMessage": [Function],
                                                                      "maxMenuHeight": 300,
                                                                      "menuIsOpen": false,
                                                                      "menuPlacement": "bottom",
                                                                      "menuPosition": "absolute",
                                                                      "menuShouldBlockScroll": false,
                                                                      "menuShouldScrollIntoView": true,
                                                                      "minMenuHeight": 140,
                                                                      "name": "type",
                                                                      "noOptionsMessage": [Function],
                                                                      "onBlur": [Function],
                                                                      "onChange": [Function],
                                                                      "onFocus": [Function],
                                                                      "onInputChange": [Function],
                                                                      "onMenuClose": [Function],
                                                                      "onMenuOpen": [Function],
                                                                      "openMenuOnClick": true,
                                                                      "openMenuOnFocus": false,
                                                                      "options": Array [
                                                                        Object {
                                                                          "label": "Amazon",
                                                                          "value": "foo",
                                                                        },
                                                                        Object {
                                                                          "label": undefined,
                                                                          "value": "bar",
                                                                        },
                                                                      ],
                                                                      "pageSize": 5,
                                                                      "placeholder": "<Choose>",
                                                                      "screenReaderStatus": [Function],
                                                                      "styles": Object {},
                                                                      "tabIndex": "0",
                                                                      "tabSelectsValue": true,
                                                                      "value": Array [],
                                                                    }
                                                                  }
                                                                  setValue={[Function]}
                                                                  theme={
                                                                    Object {
                                                                      "borderRadius": 4,
                                                                      "colors": Object {
                                                                        "danger": "#DE350B",
                                                                        "dangerLight": "#FFBDAD",
                                                                        "neutral0": "hsl(0, 0%, 100%)",
                                                                        "neutral10": "hsl(0, 0%, 90%)",
                                                                        "neutral20": "hsl(0, 0%, 80%)",
                                                                        "neutral30": "hsl(0, 0%, 70%)",
                                                                        "neutral40": "hsl(0, 0%, 60%)",
                                                                        "neutral5": "hsl(0, 0%, 95%)",
                                                                        "neutral50": "hsl(0, 0%, 50%)",
                                                                        "neutral60": "hsl(0, 0%, 40%)",
                                                                        "neutral70": "hsl(0, 0%, 30%)",
                                                                        "neutral80": "hsl(0, 0%, 20%)",
                                                                        "neutral90": "hsl(0, 0%, 10%)",
                                                                        "primary": "#2684FF",
                                                                        "primary25": "#DEEBFF",
                                                                        "primary50": "#B2D4FF",
                                                                        "primary75": "#4C9AFF",
                                                                      },
                                                                      "spacing": Object {
                                                                        "baseUnit": 4,
                                                                        "controlHeight": 38,
                                                                        "menuGutter": 8,
                                                                      },
                                                                    }
                                                                  }
                                                                >
                                                                  <ForwardRef(render)
                                                                    __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                                    className="ddorg__pf3-component-mapper__select__indicators"
                                                                    css={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "alignSelf": "stretch",
                                                                        "boxSizing": "border-box",
                                                                        "display": "flex",
                                                                        "flexShrink": 0,
                                                                      }
                                                                    }
                                                                  >
                                                                    <div
                                                                      className="ddorg__pf3-component-mapper__select__indicators css-1wy0on6"
                                                                    >
                                                                      <IndicatorSeparator
                                                                        clearValue={[Function]}
                                                                        cx={[Function]}
                                                                        getStyles={[Function]}
                                                                        getValue={[Function]}
                                                                        hasValue={false}
                                                                        isDisabled={false}
                                                                        isFocused={false}
                                                                        isMulti={false}
                                                                        isRtl={false}
                                                                        options={
                                                                          Array [
                                                                            Object {
                                                                              "label": "Amazon",
                                                                              "value": "foo",
                                                                            },
                                                                            Object {
                                                                              "label": undefined,
                                                                              "value": "bar",
                                                                            },
                                                                          ]
                                                                        }
                                                                        selectOption={[Function]}
                                                                        selectProps={
                                                                          Object {
                                                                            "allowNull": true,
                                                                            "backspaceRemovesValue": true,
                                                                            "blurInputOnSelect": true,
                                                                            "captureMenuScroll": false,
                                                                            "checked": undefined,
                                                                            "className": "ddorg__pf3-component-mapper__select",
                                                                            "classNamePrefix": "ddorg__pf3-component-mapper__select",
                                                                            "closeMenuOnScroll": false,
                                                                            "closeMenuOnSelect": true,
                                                                            "components": Object {
                                                                              "ClearIndicator": [Function],
                                                                              "DropdownIndicator": [Function],
                                                                              "Option": [Function],
                                                                            },
                                                                            "controlShouldRenderValue": true,
                                                                            "escapeClearsValue": false,
                                                                            "filterOption": [Function],
                                                                            "formatGroupLabel": [Function],
                                                                            "getOptionLabel": [Function],
                                                                            "getOptionValue": [Function],
                                                                            "hideSelectedOptions": false,
                                                                            "id": "type",
                                                                            "inputValue": "",
                                                                            "isClearable": false,
                                                                            "isDisabled": false,
                                                                            "isFetching": false,
                                                                            "isLoading": false,
                                                                            "isMulti": false,
                                                                            "isOptionDisabled": [Function],
                                                                            "isRtl": false,
                                                                            "isSearchable": false,
                                                                            "loadingMessage": [Function],
                                                                            "maxMenuHeight": 300,
                                                                            "menuIsOpen": false,
                                                                            "menuPlacement": "bottom",
                                                                            "menuPosition": "absolute",
                                                                            "menuShouldBlockScroll": false,
                                                                            "menuShouldScrollIntoView": true,
                                                                            "minMenuHeight": 140,
                                                                            "name": "type",
                                                                            "noOptionsMessage": [Function],
                                                                            "onBlur": [Function],
                                                                            "onChange": [Function],
                                                                            "onFocus": [Function],
                                                                            "onInputChange": [Function],
                                                                            "onMenuClose": [Function],
                                                                            "onMenuOpen": [Function],
                                                                            "openMenuOnClick": true,
                                                                            "openMenuOnFocus": false,
                                                                            "options": Array [
                                                                              Object {
                                                                                "label": "Amazon",
                                                                                "value": "foo",
                                                                              },
                                                                              Object {
                                                                                "label": undefined,
                                                                                "value": "bar",
                                                                              },
                                                                            ],
                                                                            "pageSize": 5,
                                                                            "placeholder": "<Choose>",
                                                                            "screenReaderStatus": [Function],
                                                                            "styles": Object {},
                                                                            "tabIndex": "0",
                                                                            "tabSelectsValue": true,
                                                                            "value": Array [],
                                                                          }
                                                                        }
                                                                        setValue={[Function]}
                                                                        theme={
                                                                          Object {
                                                                            "borderRadius": 4,
                                                                            "colors": Object {
                                                                              "danger": "#DE350B",
                                                                              "dangerLight": "#FFBDAD",
                                                                              "neutral0": "hsl(0, 0%, 100%)",
                                                                              "neutral10": "hsl(0, 0%, 90%)",
                                                                              "neutral20": "hsl(0, 0%, 80%)",
                                                                              "neutral30": "hsl(0, 0%, 70%)",
                                                                              "neutral40": "hsl(0, 0%, 60%)",
                                                                              "neutral5": "hsl(0, 0%, 95%)",
                                                                              "neutral50": "hsl(0, 0%, 50%)",
                                                                              "neutral60": "hsl(0, 0%, 40%)",
                                                                              "neutral70": "hsl(0, 0%, 30%)",
                                                                              "neutral80": "hsl(0, 0%, 20%)",
                                                                              "neutral90": "hsl(0, 0%, 10%)",
                                                                              "primary": "#2684FF",
                                                                              "primary25": "#DEEBFF",
                                                                              "primary50": "#B2D4FF",
                                                                              "primary75": "#4C9AFF",
                                                                            },
                                                                            "spacing": Object {
                                                                              "baseUnit": 4,
                                                                              "controlHeight": 38,
                                                                              "menuGutter": 8,
                                                                            },
                                                                          }
                                                                        }
                                                                      >
                                                                        <ForwardRef(render)
                                                                          __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                                                                          className="ddorg__pf3-component-mapper__select__indicator-separator"
                                                                          css={
                                                                            Object {
                                                                              "alignSelf": "stretch",
                                                                              "backgroundColor": "hsl(0, 0%, 80%)",
                                                                              "boxSizing": "border-box",
                                                                              "label": "indicatorSeparator",
                                                                              "marginBottom": 8,
                                                                              "marginTop": 8,
                                                                              "width": 1,
                                                                            }
                                                                          }
                                                                        >
                                                                          <span
                                                                            className="ddorg__pf3-component-mapper__select__indicator-separator css-1okebmr-indicatorSeparator"
                                                                          />
                                                                        </ForwardRef(render)>
                                                                      </IndicatorSeparator>
                                                                      <DropdownIndicator
                                                                        clearValue={[Function]}
                                                                        cx={[Function]}
                                                                        getStyles={[Function]}
                                                                        getValue={[Function]}
                                                                        hasValue={false}
                                                                        innerProps={
                                                                          Object {
                                                                            "aria-hidden": "true",
                                                                            "onMouseDown": [Function],
                                                                            "onTouchEnd": [Function],
                                                                          }
                                                                        }
                                                                        isDisabled={false}
                                                                        isFocused={false}
                                                                        isMulti={false}
                                                                        isRtl={false}
                                                                        options={
                                                                          Array [
                                                                            Object {
                                                                              "label": "Amazon",
                                                                              "value": "foo",
                                                                            },
                                                                            Object {
                                                                              "label": undefined,
                                                                              "value": "bar",
                                                                            },
                                                                          ]
                                                                        }
                                                                        selectOption={[Function]}
                                                                        selectProps={
                                                                          Object {
                                                                            "allowNull": true,
                                                                            "backspaceRemovesValue": true,
                                                                            "blurInputOnSelect": true,
                                                                            "captureMenuScroll": false,
                                                                            "checked": undefined,
                                                                            "className": "ddorg__pf3-component-mapper__select",
                                                                            "classNamePrefix": "ddorg__pf3-component-mapper__select",
                                                                            "closeMenuOnScroll": false,
                                                                            "closeMenuOnSelect": true,
                                                                            "components": Object {
                                                                              "ClearIndicator": [Function],
                                                                              "DropdownIndicator": [Function],
                                                                              "Option": [Function],
                                                                            },
                                                                            "controlShouldRenderValue": true,
                                                                            "escapeClearsValue": false,
                                                                            "filterOption": [Function],
                                                                            "formatGroupLabel": [Function],
                                                                            "getOptionLabel": [Function],
                                                                            "getOptionValue": [Function],
                                                                            "hideSelectedOptions": false,
                                                                            "id": "type",
                                                                            "inputValue": "",
                                                                            "isClearable": false,
                                                                            "isDisabled": false,
                                                                            "isFetching": false,
                                                                            "isLoading": false,
                                                                            "isMulti": false,
                                                                            "isOptionDisabled": [Function],
                                                                            "isRtl": false,
                                                                            "isSearchable": false,
                                                                            "loadingMessage": [Function],
                                                                            "maxMenuHeight": 300,
                                                                            "menuIsOpen": false,
                                                                            "menuPlacement": "bottom",
                                                                            "menuPosition": "absolute",
                                                                            "menuShouldBlockScroll": false,
                                                                            "menuShouldScrollIntoView": true,
                                                                            "minMenuHeight": 140,
                                                                            "name": "type",
                                                                            "noOptionsMessage": [Function],
                                                                            "onBlur": [Function],
                                                                            "onChange": [Function],
                                                                            "onFocus": [Function],
                                                                            "onInputChange": [Function],
                                                                            "onMenuClose": [Function],
                                                                            "onMenuOpen": [Function],
                                                                            "openMenuOnClick": true,
                                                                            "openMenuOnFocus": false,
                                                                            "options": Array [
                                                                              Object {
                                                                                "label": "Amazon",
                                                                                "value": "foo",
                                                                              },
                                                                              Object {
                                                                                "label": undefined,
                                                                                "value": "bar",
                                                                              },
                                                                            ],
                                                                            "pageSize": 5,
                                                                            "placeholder": "<Choose>",
                                                                            "screenReaderStatus": [Function],
                                                                            "styles": Object {},
                                                                            "tabIndex": "0",
                                                                            "tabSelectsValue": true,
                                                                            "value": Array [],
                                                                          }
                                                                        }
                                                                        setValue={[Function]}
                                                                        theme={
                                                                          Object {
                                                                            "borderRadius": 4,
                                                                            "colors": Object {
                                                                              "danger": "#DE350B",
                                                                              "dangerLight": "#FFBDAD",
                                                                              "neutral0": "hsl(0, 0%, 100%)",
                                                                              "neutral10": "hsl(0, 0%, 90%)",
                                                                              "neutral20": "hsl(0, 0%, 80%)",
                                                                              "neutral30": "hsl(0, 0%, 70%)",
                                                                              "neutral40": "hsl(0, 0%, 60%)",
                                                                              "neutral5": "hsl(0, 0%, 95%)",
                                                                              "neutral50": "hsl(0, 0%, 50%)",
                                                                              "neutral60": "hsl(0, 0%, 40%)",
                                                                              "neutral70": "hsl(0, 0%, 30%)",
                                                                              "neutral80": "hsl(0, 0%, 20%)",
                                                                              "neutral90": "hsl(0, 0%, 10%)",
                                                                              "primary": "#2684FF",
                                                                              "primary25": "#DEEBFF",
                                                                              "primary50": "#B2D4FF",
                                                                              "primary75": "#4C9AFF",
                                                                            },
                                                                            "spacing": Object {
                                                                              "baseUnit": 4,
                                                                              "controlHeight": 38,
                                                                              "menuGutter": 8,
                                                                            },
                                                                          }
                                                                        }
                                                                      >
                                                                        <i
                                                                          className="ddorg__pf3-component-mapper__select__dropdown-indicator fa fa-angle-down placeholder"
                                                                        />
                                                                      </DropdownIndicator>
                                                                    </div>
                                                                  </ForwardRef(render)>
                                                                </IndicatorsContainer>
                                                              </div>
                                                            </ForwardRef(render)>
                                                          </Control>
                                                          <input
                                                            name="type"
                                                            type="hidden"
                                                            value=""
                                                          />
                                                        </div>
                                                      </ForwardRef(render)>
                                                    </SelectContainer>
                                                  </Select>
                                                </StateManager>
                                              </SelectComponent>
                                            </Select>
                                          </Select>
                                        </div>
                                      </div>
                                    </FormGroup>
                                  </Pf3FormGroup>
                                </Select>
                              </SelectWithOnChange>
                            </FormFieldHideWrapper>
                          </FormConditionWrapper>
                        </SingleField>
                        <SingleField
                          component="spy-field"
                          key="spy-field"
                          name="spy-field"
                        >
                          <FormConditionWrapper
                            field={
                              Object {
                                "component": "spy-field",
                                "initialize": undefined,
                                "name": "spy-field",
                              }
                            }
                          >
                            <FormFieldHideWrapper
                              hideField={false}
                            >
                              <SpyField
                                component="spy-field"
                                name="spy-field"
                              >
                                <FormSpy
                                  onChange={[Function]}
                                  subscription={
                                    Object {
                                      "pristine": true,
                                      "valid": true,
                                    }
                                  }
                                />
                              </SpyField>
                            </FormFieldHideWrapper>
                          </FormConditionWrapper>
                        </SingleField>
                        <FormSpy>
                          <FormControls
                            Button={[Function]}
                            ButtonGroup={[Function]}
                            FormSpy={[Function]}
                            buttonOrder={
                              Array [
                                "submit",
                                "reset",
                                "cancel",
                              ]
                            }
                            buttonsProps={Object {}}
                            canReset={false}
                            canSubmit={false}
                            cancelLabel="Cancel"
                            disableSubmit={true}
                            formFields={
                              Array [
                                <SingleField
                                  component="text-field"
                                  name="manager_resource"
                                  type="hidden"
                                />,
                                <SingleField
                                  component="text-field"
                                  id="name"
                                  isRequired={true}
                                  label="Name"
                                  maxLength={128}
                                  name="name"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="select"
                                  id="type"
                                  isDisabled={false}
                                  isRequired={true}
                                  label="Credential type"
                                  loadOptions={[Function]}
                                  name="type"
                                  onChange={[Function]}
                                  placeholder="<Choose>"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="spy-field"
                                  name="spy-field"
                                />,
                              ]
                            }
                            formSpyProps={
                              Object {
                                "active": undefined,
                                "dirty": false,
                                "dirtyFields": Object {},
                                "dirtyFieldsSinceLastSubmit": Object {
                                  "manager_resource": true,
                                },
                                "dirtySinceLastSubmit": false,
                                "error": undefined,
                                "errors": Object {
                                  "name": "Required",
                                  "type": "Required",
                                },
                                "form": Object {
                                  "batch": [Function],
                                  "blur": [Function],
                                  "change": [Function],
                                  "destroyOnUnregister": false,
                                  "focus": [Function],
                                  "getFieldState": [Function],
                                  "getRegisteredFields": [Function],
                                  "getState": [Function],
                                  "initialize": [Function],
                                  "isValidationPaused": [Function],
                                  "mutators": Object {
                                    "concat": [Function],
                                    "insert": [Function],
                                    "move": [Function],
                                    "pop": [Function],
                                    "push": [Function],
                                    "remove": [Function],
                                    "removeBatch": [Function],
                                    "shift": [Function],
                                    "swap": [Function],
                                    "unshift": [Function],
                                    "update": [Function],
                                  },
                                  "pauseValidation": [Function],
                                  "registerField": [Function],
                                  "reset": [Function],
                                  "resetFieldState": [Function],
                                  "restart": [Function],
                                  "resumeValidation": [Function],
                                  "setConfig": [Function],
                                  "submit": [Function],
                                  "subscribe": [Function],
                                },
                                "hasSubmitErrors": false,
                                "hasValidationErrors": true,
                                "initialValues": Object {
                                  "manager_resource": Object {
                                    "href": "http://localhost:3000/api/providers/1",
                                  },
                                },
                                "invalid": true,
                                "modified": Object {
                                  "manager_resource": false,
                                  "name": false,
                                  "type": false,
                                },
                                "modifiedSinceLastSubmit": false,
                                "pristine": true,
                                "submitError": undefined,
                                "submitErrors": undefined,
                                "submitFailed": false,
                                "submitSucceeded": false,
                                "submitting": false,
                                "touched": Object {
                                  "manager_resource": false,
                                  "name": false,
                                  "type": false,
                                },
                                "valid": false,
                                "validating": false,
                                "values": Object {
                                  "manager_resource": Object {
                                    "href": "http://localhost:3000/api/providers/1",
                                  },
                                },
                                "visited": Object {
                                  "manager_resource": false,
                                  "name": false,
                                  "type": false,
                                },
                              }
                            }
                            onCancel={[Function]}
                            onReset={[Function]}
                            resetLabel="Reset"
                            schema={
                              Object {
                                "fields": Array [
                                  Object {
                                    "component": "text-field",
                                    "name": "manager_resource",
                                    "type": "hidden",
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "name",
                                    "isRequired": true,
                                    "label": "Name",
                                    "maxLength": 128,
                                    "name": "name",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "select",
                                    "id": "type",
                                    "isDisabled": false,
                                    "isRequired": true,
                                    "label": "Credential type",
                                    "loadOptions": [Function],
                                    "name": "type",
                                    "onChange": [Function],
                                    "placeholder": "<Choose>",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "spy-field",
                                    "initialize": undefined,
                                    "name": "spy-field",
                                  },
                                ],
                              }
                            }
                            submitLabel="Add"
                          >
                            <ButtonGroup
                              className=""
                            >
                              <div
                                className="ddorg__pf3-layout-components__button-group "
                              >
                                <Button
                                  buttonType="submit"
                                  disabled={true}
                                  key="form-submit"
                                  label="Add"
                                  type="submit"
                                  variant="primary"
                                >
                                  <Button
                                    active={false}
                                    block={false}
                                    bsClass="btn"
                                    bsStyle="primary"
                                    disabled={true}
                                    type="submit"
                                  >
                                    <button
                                      className="btn btn-primary"
                                      disabled={true}
                                      type="submit"
                                    >
                                      Add
                                    </button>
                                  </Button>
                                </Button>
                                <Button
                                  buttonType="cancel"
                                  key="form-cancel"
                                  label="Cancel"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <Button
                                    active={false}
                                    block={false}
                                    bsClass="btn"
                                    bsStyle="default"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      className="btn btn-default"
                                      disabled={false}
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      Cancel
                                    </button>
                                  </Button>
                                </Button>
                              </div>
                            </ButtonGroup>
                          </FormControls>
                        </FormSpy>
                      </form>
                    </Form>
                  </Component>
                </FormTemplate>
              </PF3FormTemplate>
            </Component>
          </ReactFinalForm>
        </FormRenderer>
      </MiqFormRenderer>
    </Connect(MiqFormRenderer)>
  </AnsibleCredentialsForm>
</Provider>
`;

exports[`Ansible Credential Form Component should render editing a credential 1`] = `
<Provider
  store={
    Object {
      "asyncReducers": Object {
        "FormButtons": [Function],
        "notificationReducer": [Function],
      },
      "dispatch": [Function],
      "getState": [Function],
      "injectReducers": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <AnsibleCredentialsForm
    recordId="1"
  >
    <Connect(MiqFormRenderer)
      buttonsLabels={
        Object {
          "submitLabel": "Save",
        }
      }
      canReset={true}
      initialValues={
        Object {
          "type": "foo",
          "userid": "test",
        }
      }
      onCancel={[Function]}
      onSubmit={[Function]}
      schema={
        Object {
          "fields": Array [
            Object {
              "component": "text-field",
              "name": "manager_resource",
              "type": "hidden",
            },
            Object {
              "component": "text-field",
              "id": "name",
              "isRequired": true,
              "label": "Name",
              "maxLength": 128,
              "name": "name",
              "validate": Array [
                Object {
                  "type": "required",
                },
              ],
            },
            Object {
              "component": "select",
              "id": "type",
              "isDisabled": true,
              "isRequired": true,
              "label": "Credential type",
              "loadOptions": [Function],
              "name": "type",
              "onChange": [Function],
              "placeholder": "<Choose>",
              "validate": Array [
                Object {
                  "type": "required",
                },
              ],
            },
            Object {
              "component": "text-field",
              "helperText": "AWS Access Key for this credential",
              "id": "userid",
              "isRequired": true,
              "label": "Access Key",
              "name": "userid",
            },
          ],
        }
      }
    >
      <MiqFormRenderer
        buttonsLabels={
          Object {
            "submitLabel": "Save",
          }
        }
        canReset={true}
        className="form-react"
        componentMapper={
          Object {
            "button": [Function],
            "checkbox": [Function],
            "code-editor": [Function],
            "date-picker": [Function],
            "dual-list-select": [Function],
            "edit-password-field": [Function],
            "field-array": [Function],
            "input-addon-button-group": [Function],
            "input-addon-group": [Function],
            "password-field": [Function],
            "plain-text": [Function],
            "radio": [Function],
            "select": [Function],
            "slider": [Function],
            "sub-form": [Function],
            "switch": [Function],
            "tabs": [Function],
            "text-field": [Function],
            "textarea": [Function],
            "time-picker": [Function],
            "tree-selector": [Function],
            "tree-view": [Function],
            "validate-credentials": [Function],
            "wizard": [Function],
          }
        }
        disableSubmit={
          Array [
            "pristine",
            "invalid",
          ]
        }
        dispatch={[Function]}
        initialValues={
          Object {
            "type": "foo",
            "userid": "test",
          }
        }
        onCancel={[Function]}
        onSubmit={[Function]}
        schema={
          Object {
            "fields": Array [
              Object {
                "component": "text-field",
                "name": "manager_resource",
                "type": "hidden",
              },
              Object {
                "component": "text-field",
                "id": "name",
                "isRequired": true,
                "label": "Name",
                "maxLength": 128,
                "name": "name",
                "validate": Array [
                  Object {
                    "type": "required",
                  },
                ],
              },
              Object {
                "component": "select",
                "id": "type",
                "isDisabled": true,
                "isRequired": true,
                "label": "Credential type",
                "loadOptions": [Function],
                "name": "type",
                "onChange": [Function],
                "placeholder": "<Choose>",
                "validate": Array [
                  Object {
                    "type": "required",
                  },
                ],
              },
              Object {
                "component": "text-field",
                "helperText": "AWS Access Key for this credential",
                "id": "userid",
                "isRequired": true,
                "label": "Access Key",
                "name": "userid",
              },
            ],
          }
        }
        showFormControls={true}
      >
        <FormRenderer
          FormTemplate={[Function]}
          clearOnUnmount={false}
          componentMapper={
            Object {
              "button": [Function],
              "checkbox": [Function],
              "code-editor": [Function],
              "date-picker": [Function],
              "dual-list-select": [Function],
              "edit-password-field": [Function],
              "field-array": [Function],
              "input-addon-button-group": [Function],
              "input-addon-group": [Function],
              "password-field": [Function],
              "plain-text": [Function],
              "radio": [Function],
              "select": [Function],
              "slider": [Function],
              "spy-field": [Function],
              "sub-form": [Function],
              "switch": [Function],
              "tabs": [Function],
              "text-field": [Function],
              "textarea": [Function],
              "time-picker": [Function],
              "tree-selector": [Function],
              "tree-view": [Function],
              "validate-credentials": [Function],
              "wizard": [Function],
            }
          }
          dispatch={[Function]}
          initialValues={
            Object {
              "type": "foo",
              "userid": "test",
            }
          }
          onCancel={[Function]}
          onReset={[Function]}
          onSubmit={[Function]}
          schema={
            Object {
              "fields": Array [
                Object {
                  "component": "text-field",
                  "name": "manager_resource",
                  "type": "hidden",
                },
                Object {
                  "component": "text-field",
                  "id": "name",
                  "isRequired": true,
                  "label": "Name",
                  "maxLength": 128,
                  "name": "name",
                  "validate": Array [
                    Object {
                      "type": "required",
                    },
                  ],
                },
                Object {
                  "component": "select",
                  "id": "type",
                  "isDisabled": true,
                  "isRequired": true,
                  "label": "Credential type",
                  "loadOptions": [Function],
                  "name": "type",
                  "onChange": [Function],
                  "placeholder": "<Choose>",
                  "validate": Array [
                    Object {
                      "type": "required",
                    },
                  ],
                },
                Object {
                  "component": "text-field",
                  "helperText": "AWS Access Key for this credential",
                  "id": "userid",
                  "isRequired": true,
                  "label": "Access Key",
                  "name": "userid",
                },
                Object {
                  "component": "spy-field",
                  "initialize": undefined,
                  "name": "spy-field",
                },
              ],
            }
          }
        >
          <ReactFinalForm
            decorators={
              Array [
                [Function],
              ]
            }
            dispatch={[Function]}
            initialValues={
              Object {
                "type": "foo",
                "userid": "test",
              }
            }
            mutators={
              Object {
                "concat": [Function],
                "insert": [Function],
                "move": [Function],
                "pop": [Function],
                "push": [Function],
                "remove": [Function],
                "removeBatch": [Function],
                "shift": [Function],
                "swap": [Function],
                "unshift": [Function],
                "update": [Function],
              }
            }
            onSubmit={[Function]}
            render={[Function]}
            subscription={
              Object {
                "pristine": true,
                "submitting": true,
                "valid": true,
              }
            }
          >
            <Component
              formFields={
                Array [
                  <SingleField
                    component="text-field"
                    name="manager_resource"
                    type="hidden"
                  />,
                  <SingleField
                    component="text-field"
                    id="name"
                    isRequired={true}
                    label="Name"
                    maxLength={128}
                    name="name"
                    validate={
                      Array [
                        Object {
                          "type": "required",
                        },
                      ]
                    }
                  />,
                  <SingleField
                    component="select"
                    id="type"
                    isDisabled={true}
                    isRequired={true}
                    label="Credential type"
                    loadOptions={[Function]}
                    name="type"
                    onChange={[Function]}
                    placeholder="<Choose>"
                    validate={
                      Array [
                        Object {
                          "type": "required",
                        },
                      ]
                    }
                  />,
                  <SingleField
                    component="text-field"
                    helperText="AWS Access Key for this credential"
                    id="userid"
                    isRequired={true}
                    label="Access Key"
                    name="userid"
                  />,
                  <SingleField
                    component="spy-field"
                    name="spy-field"
                  />,
                ]
              }
              schema={
                Object {
                  "fields": Array [
                    Object {
                      "component": "text-field",
                      "name": "manager_resource",
                      "type": "hidden",
                    },
                    Object {
                      "component": "text-field",
                      "id": "name",
                      "isRequired": true,
                      "label": "Name",
                      "maxLength": 128,
                      "name": "name",
                      "validate": Array [
                        Object {
                          "type": "required",
                        },
                      ],
                    },
                    Object {
                      "component": "select",
                      "id": "type",
                      "isDisabled": true,
                      "isRequired": true,
                      "label": "Credential type",
                      "loadOptions": [Function],
                      "name": "type",
                      "onChange": [Function],
                      "placeholder": "<Choose>",
                      "validate": Array [
                        Object {
                          "type": "required",
                        },
                      ],
                    },
                    Object {
                      "component": "text-field",
                      "helperText": "AWS Access Key for this credential",
                      "id": "userid",
                      "isRequired": true,
                      "label": "Access Key",
                      "name": "userid",
                    },
                    Object {
                      "component": "spy-field",
                      "initialize": undefined,
                      "name": "spy-field",
                    },
                  ],
                }
              }
            >
              <PF3FormTemplate
                FormWrapper={[Function]}
                canReset={true}
                cancelLabel="Cancel"
                disableSubmit={
                  Array [
                    "pristine",
                    "invalid",
                  ]
                }
                formFields={
                  Array [
                    <SingleField
                      component="text-field"
                      name="manager_resource"
                      type="hidden"
                    />,
                    <SingleField
                      component="text-field"
                      id="name"
                      isRequired={true}
                      label="Name"
                      maxLength={128}
                      name="name"
                      validate={
                        Array [
                          Object {
                            "type": "required",
                          },
                        ]
                      }
                    />,
                    <SingleField
                      component="select"
                      id="type"
                      isDisabled={true}
                      isRequired={true}
                      label="Credential type"
                      loadOptions={[Function]}
                      name="type"
                      onChange={[Function]}
                      placeholder="<Choose>"
                      validate={
                        Array [
                          Object {
                            "type": "required",
                          },
                        ]
                      }
                    />,
                    <SingleField
                      component="text-field"
                      helperText="AWS Access Key for this credential"
                      id="userid"
                      isRequired={true}
                      label="Access Key"
                      name="userid"
                    />,
                    <SingleField
                      component="spy-field"
                      name="spy-field"
                    />,
                  ]
                }
                resetLabel="Reset"
                schema={
                  Object {
                    "fields": Array [
                      Object {
                        "component": "text-field",
                        "name": "manager_resource",
                        "type": "hidden",
                      },
                      Object {
                        "component": "text-field",
                        "id": "name",
                        "isRequired": true,
                        "label": "Name",
                        "maxLength": 128,
                        "name": "name",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "select",
                        "id": "type",
                        "isDisabled": true,
                        "isRequired": true,
                        "label": "Credential type",
                        "loadOptions": [Function],
                        "name": "type",
                        "onChange": [Function],
                        "placeholder": "<Choose>",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "helperText": "AWS Access Key for this credential",
                        "id": "userid",
                        "isRequired": true,
                        "label": "Access Key",
                        "name": "userid",
                      },
                      Object {
                        "component": "spy-field",
                        "initialize": undefined,
                        "name": "spy-field",
                      },
                    ],
                  }
                }
                showFormControls={true}
                submitLabel="Save"
              >
                <FormTemplate
                  Button={[Function]}
                  ButtonGroup={[Function]}
                  Description={[Function]}
                  FormWrapper={[Function]}
                  Header={Symbol(react.fragment)}
                  Title={[Function]}
                  canReset={true}
                  cancelLabel="Cancel"
                  disableSubmit={
                    Array [
                      "pristine",
                      "invalid",
                    ]
                  }
                  formFields={
                    Array [
                      <SingleField
                        component="text-field"
                        name="manager_resource"
                        type="hidden"
                      />,
                      <SingleField
                        component="text-field"
                        id="name"
                        isRequired={true}
                        label="Name"
                        maxLength={128}
                        name="name"
                        validate={
                          Array [
                            Object {
                              "type": "required",
                            },
                          ]
                        }
                      />,
                      <SingleField
                        component="select"
                        id="type"
                        isDisabled={true}
                        isRequired={true}
                        label="Credential type"
                        loadOptions={[Function]}
                        name="type"
                        onChange={[Function]}
                        placeholder="<Choose>"
                        validate={
                          Array [
                            Object {
                              "type": "required",
                            },
                          ]
                        }
                      />,
                      <SingleField
                        component="text-field"
                        helperText="AWS Access Key for this credential"
                        id="userid"
                        isRequired={true}
                        label="Access Key"
                        name="userid"
                      />,
                      <SingleField
                        component="spy-field"
                        name="spy-field"
                      />,
                    ]
                  }
                  resetLabel="Reset"
                  schema={
                    Object {
                      "fields": Array [
                        Object {
                          "component": "text-field",
                          "name": "manager_resource",
                          "type": "hidden",
                        },
                        Object {
                          "component": "text-field",
                          "id": "name",
                          "isRequired": true,
                          "label": "Name",
                          "maxLength": 128,
                          "name": "name",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "select",
                          "id": "type",
                          "isDisabled": true,
                          "isRequired": true,
                          "label": "Credential type",
                          "loadOptions": [Function],
                          "name": "type",
                          "onChange": [Function],
                          "placeholder": "<Choose>",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "helperText": "AWS Access Key for this credential",
                          "id": "userid",
                          "isRequired": true,
                          "label": "Access Key",
                          "name": "userid",
                        },
                        Object {
                          "component": "spy-field",
                          "initialize": undefined,
                          "name": "spy-field",
                        },
                      ],
                    }
                  }
                  showFormControls={true}
                  submitLabel="Save"
                >
                  <Component
                    onSubmit={[Function]}
                  >
                    <Form
                      bsClass="form"
                      className="ddorg__pf3-layout-components__form-wrapper form-react"
                      componentClass="form"
                      horizontal={false}
                      inline={false}
                      onSubmit={[Function]}
                    >
                      <form
                        className="ddorg__pf3-layout-components__form-wrapper form-react"
                        onSubmit={[Function]}
                      >
                        <SingleField
                          component="text-field"
                          key="manager_resource"
                          name="manager_resource"
                          type="hidden"
                        >
                          <FormConditionWrapper
                            field={
                              Object {
                                "component": "text-field",
                                "name": "manager_resource",
                                "type": "hidden",
                              }
                            }
                          >
                            <FormFieldHideWrapper
                              hideField={false}
                            >
                              <TextField
                                component="text-field"
                                name="manager_resource"
                                type="hidden"
                              >
                                <Pf3FormGroup
                                  meta={
                                    Object {
                                      "active": false,
                                      "data": Object {},
                                      "dirty": false,
                                      "dirtySinceLastSubmit": false,
                                      "error": undefined,
                                      "initial": undefined,
                                      "invalid": false,
                                      "length": undefined,
                                      "modified": false,
                                      "modifiedSinceLastSubmit": false,
                                      "pristine": true,
                                      "submitError": undefined,
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": true,
                                      "validating": false,
                                      "visited": false,
                                    }
                                  }
                                >
                                  <FormGroup
                                    bsClass="form-group"
                                    validationState={null}
                                  >
                                    <div
                                      className="form-group"
                                    >
                                      <FormControl
                                        bsClass="form-control"
                                        componentClass="input"
                                        name="manager_resource"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        type="hidden"
                                        value=""
                                      >
                                        <input
                                          className="form-control"
                                          name="manager_resource"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          type="hidden"
                                          value=""
                                        />
                                      </FormControl>
                                    </div>
                                  </FormGroup>
                                </Pf3FormGroup>
                              </TextField>
                            </FormFieldHideWrapper>
                          </FormConditionWrapper>
                        </SingleField>
                        <SingleField
                          component="text-field"
                          id="name"
                          isRequired={true}
                          key="name"
                          label="Name"
                          maxLength={128}
                          name="name"
                          validate={
                            Array [
                              Object {
                                "type": "required",
                              },
                            ]
                          }
                        >
                          <FormConditionWrapper
                            field={
                              Object {
                                "component": "text-field",
                                "id": "name",
                                "isRequired": true,
                                "label": "Name",
                                "maxLength": 128,
                                "name": "name",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              }
                            }
                          >
                            <FormFieldHideWrapper
                              hideField={false}
                            >
                              <TextField
                                component="text-field"
                                id="name"
                                isRequired={true}
                                label="Name"
                                maxLength={128}
                                name="name"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              >
                                <Pf3FormGroup
                                  isRequired={true}
                                  label="Name"
                                  meta={
                                    Object {
                                      "active": false,
                                      "data": Object {},
                                      "dirty": false,
                                      "dirtySinceLastSubmit": false,
                                      "error": "Required",
                                      "initial": undefined,
                                      "invalid": true,
                                      "length": undefined,
                                      "modified": false,
                                      "modifiedSinceLastSubmit": false,
                                      "pristine": true,
                                      "submitError": undefined,
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": false,
                                      "validating": false,
                                      "visited": false,
                                    }
                                  }
                                >
                                  <FormGroup
                                    bsClass="form-group"
                                    validationState={null}
                                  >
                                    <div
                                      className="form-group"
                                    >
                                      <ControlLabel
                                        bsClass="control-label"
                                        srOnly={false}
                                      >
                                        <label
                                          className="control-label"
                                        >
                                          <RequiredLabel
                                            label="Name"
                                          >
                                            <span
                                              style={
                                                Object {
                                                  "color": "#ff0000",
                                                }
                                              }
                                            >
                                              * 
                                            </span>
                                             
                                            Name
                                          </RequiredLabel>
                                        </label>
                                      </ControlLabel>
                                      <FormControl
                                        bsClass="form-control"
                                        componentClass="input"
                                        id="name"
                                        maxLength={128}
                                        name="name"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        value=""
                                      >
                                        <input
                                          className="form-control"
                                          id="name"
                                          maxLength={128}
                                          name="name"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          value=""
                                        />
                                      </FormControl>
                                    </div>
                                  </FormGroup>
                                </Pf3FormGroup>
                              </TextField>
                            </FormFieldHideWrapper>
                          </FormConditionWrapper>
                        </SingleField>
                        <SingleField
                          component="select"
                          id="type"
                          isDisabled={true}
                          isRequired={true}
                          key="type"
                          label="Credential type"
                          loadOptions={[Function]}
                          name="type"
                          onChange={[Function]}
                          placeholder="<Choose>"
                          validate={
                            Array [
                              Object {
                                "type": "required",
                              },
                            ]
                          }
                        >
                          <FormConditionWrapper
                            field={
                              Object {
                                "component": "select",
                                "id": "type",
                                "isDisabled": true,
                                "isRequired": true,
                                "label": "Credential type",
                                "loadOptions": [Function],
                                "name": "type",
                                "onChange": [Function],
                                "placeholder": "<Choose>",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              }
                            }
                          >
                            <FormFieldHideWrapper
                              hideField={false}
                            >
                              <SelectWithOnChange
                                component="select"
                                id="type"
                                isDisabled={true}
                                isRequired={true}
                                label="Credential type"
                                loadOptions={[Function]}
                                name="type"
                                onChange={[Function]}
                                placeholder="<Choose>"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              >
                                <Select
                                  allowNull={true}
                                  component="select"
                                  id="type"
                                  isDisabled={true}
                                  isRequired={true}
                                  label="Credential type"
                                  loadOptions={[Function]}
                                  name="type"
                                  placeholder="<Choose>"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                >
                                  <Pf3FormGroup
                                    isRequired={true}
                                    label="Credential type"
                                    meta={
                                      Object {
                                        "active": false,
                                        "data": Object {},
                                        "dirty": false,
                                        "dirtySinceLastSubmit": false,
                                        "error": undefined,
                                        "initial": "foo",
                                        "invalid": false,
                                        "length": undefined,
                                        "modified": false,
                                        "modifiedSinceLastSubmit": false,
                                        "pristine": true,
                                        "submitError": undefined,
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "touched": false,
                                        "valid": true,
                                        "validating": false,
                                        "visited": false,
                                      }
                                    }
                                  >
                                    <FormGroup
                                      bsClass="form-group"
                                      validationState={null}
                                    >
                                      <div
                                        className="form-group"
                                      >
                                        <ControlLabel
                                          bsClass="control-label"
                                          srOnly={false}
                                        >
                                          <label
                                            className="control-label"
                                          >
                                            <RequiredLabel
                                              label="Credential type"
                                            >
                                              <span
                                                style={
                                                  Object {
                                                    "color": "#ff0000",
                                                  }
                                                }
                                              >
                                                * 
                                              </span>
                                               
                                              Credential type
                                            </RequiredLabel>
                                          </label>
                                        </ControlLabel>
                                        <div>
                                          <Select
                                            allowNull={true}
                                            classNamePrefix="ddorg__pf3-component-mapper__select"
                                            id="type"
                                            input={
                                              Object {
                                                "checked": undefined,
                                                "name": "type",
                                                "onBlur": [Function],
                                                "onChange": [Function],
                                                "onFocus": [Function],
                                                "value": "foo",
                                              }
                                            }
                                            invalid={false}
                                            isDisabled={true}
                                            loadOptions={[Function]}
                                            loadingMessage="Loading..."
                                            placeholder="<Choose>"
                                            updatingMessage="Loading data"
                                          >
                                            <Select
                                              SelectComponent={[Function]}
                                              allowNull={true}
                                              className="ddorg__pf3-component-mapper__select"
                                              classNamePrefix="ddorg__pf3-component-mapper__select"
                                              components={
                                                Object {
                                                  "ClearIndicator": [Function],
                                                  "DropdownIndicator": null,
                                                  "Option": [Function],
                                                }
                                              }
                                              id="type"
                                              invalid={false}
                                              isClearable={false}
                                              isDisabled={true}
                                              isSearchable={false}
                                              loadOptions={[Function]}
                                              loadOptionsChangeCounter={1}
                                              loadingMessage="Loading..."
                                              name="type"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              options={Array []}
                                              placeholder="<Choose>"
                                              pluckSingleValue={true}
                                              simpleValue={true}
                                              updatingMessage="Loading data"
                                              value="foo"
                                            >
                                              <SelectComponent
                                                allowNull={true}
                                                className="ddorg__pf3-component-mapper__select"
                                                classNamePrefix="ddorg__pf3-component-mapper__select"
                                                closeMenuOnSelect={true}
                                                components={
                                                  Object {
                                                    "ClearIndicator": [Function],
                                                    "DropdownIndicator": null,
                                                    "Option": [Function],
                                                  }
                                                }
                                                hideSelectedOptions={false}
                                                id="type"
                                                isClearable={false}
                                                isDisabled={true}
                                                isFetching={false}
                                                isSearchable={false}
                                                name="type"
                                                noOptionsMessage={[Function]}
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onInputChange={[Function]}
                                                options={
                                                  Array [
                                                    Object {
                                                      "label": "Amazon",
                                                      "value": "foo",
                                                    },
                                                    Object {
                                                      "label": undefined,
                                                      "value": "bar",
                                                    },
                                                  ]
                                                }
                                                placeholder="<Choose>"
                                                value={
                                                  Array [
                                                    Object {
                                                      "label": "Amazon",
                                                      "value": "foo",
                                                    },
                                                  ]
                                                }
                                              >
                                                <StateManager
                                                  allowNull={true}
                                                  className="ddorg__pf3-component-mapper__select"
                                                  classNamePrefix="ddorg__pf3-component-mapper__select"
                                                  closeMenuOnSelect={true}
                                                  components={
                                                    Object {
                                                      "ClearIndicator": [Function],
                                                      "DropdownIndicator": null,
                                                      "Option": [Function],
                                                    }
                                                  }
                                                  defaultInputValue=""
                                                  defaultMenuIsOpen={false}
                                                  defaultValue={null}
                                                  hideSelectedOptions={false}
                                                  id="type"
                                                  isClearable={false}
                                                  isDisabled={true}
                                                  isFetching={false}
                                                  isSearchable={false}
                                                  name="type"
                                                  noOptionsMessage={[Function]}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  onInputChange={[Function]}
                                                  options={
                                                    Array [
                                                      Object {
                                                        "label": "Amazon",
                                                        "value": "foo",
                                                      },
                                                      Object {
                                                        "label": undefined,
                                                        "value": "bar",
                                                      },
                                                    ]
                                                  }
                                                  placeholder="<Choose>"
                                                  value={
                                                    Array [
                                                      Object {
                                                        "label": "Amazon",
                                                        "value": "foo",
                                                      },
                                                    ]
                                                  }
                                                >
                                                  <Select
                                                    allowNull={true}
                                                    backspaceRemovesValue={true}
                                                    blurInputOnSelect={true}
                                                    captureMenuScroll={false}
                                                    className="ddorg__pf3-component-mapper__select"
                                                    classNamePrefix="ddorg__pf3-component-mapper__select"
                                                    closeMenuOnScroll={false}
                                                    closeMenuOnSelect={true}
                                                    components={
                                                      Object {
                                                        "ClearIndicator": [Function],
                                                        "DropdownIndicator": null,
                                                        "Option": [Function],
                                                      }
                                                    }
                                                    controlShouldRenderValue={true}
                                                    escapeClearsValue={false}
                                                    filterOption={[Function]}
                                                    formatGroupLabel={[Function]}
                                                    getOptionLabel={[Function]}
                                                    getOptionValue={[Function]}
                                                    hideSelectedOptions={false}
                                                    id="type"
                                                    inputValue=""
                                                    isClearable={false}
                                                    isDisabled={true}
                                                    isFetching={false}
                                                    isLoading={false}
                                                    isMulti={false}
                                                    isOptionDisabled={[Function]}
                                                    isRtl={false}
                                                    isSearchable={false}
                                                    loadingMessage={[Function]}
                                                    maxMenuHeight={300}
                                                    menuIsOpen={false}
                                                    menuPlacement="bottom"
                                                    menuPosition="absolute"
                                                    menuShouldBlockScroll={false}
                                                    menuShouldScrollIntoView={true}
                                                    minMenuHeight={140}
                                                    name="type"
                                                    noOptionsMessage={[Function]}
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    onInputChange={[Function]}
                                                    onMenuClose={[Function]}
                                                    onMenuOpen={[Function]}
                                                    openMenuOnClick={true}
                                                    openMenuOnFocus={false}
                                                    options={
                                                      Array [
                                                        Object {
                                                          "label": "Amazon",
                                                          "value": "foo",
                                                        },
                                                        Object {
                                                          "label": undefined,
                                                          "value": "bar",
                                                        },
                                                      ]
                                                    }
                                                    pageSize={5}
                                                    placeholder="<Choose>"
                                                    screenReaderStatus={[Function]}
                                                    styles={Object {}}
                                                    tabIndex="0"
                                                    tabSelectsValue={true}
                                                    value={
                                                      Array [
                                                        Object {
                                                          "label": "Amazon",
                                                          "value": "foo",
                                                        },
                                                      ]
                                                    }
                                                  >
                                                    <SelectContainer
                                                      className="ddorg__pf3-component-mapper__select"
                                                      clearValue={[Function]}
                                                      cx={[Function]}
                                                      getStyles={[Function]}
                                                      getValue={[Function]}
                                                      hasValue={true}
                                                      innerProps={
                                                        Object {
                                                          "id": "type",
                                                          "onKeyDown": [Function],
                                                        }
                                                      }
                                                      isDisabled={true}
                                                      isFocused={false}
                                                      isMulti={false}
                                                      isRtl={false}
                                                      options={
                                                        Array [
                                                          Object {
                                                            "label": "Amazon",
                                                            "value": "foo",
                                                          },
                                                          Object {
                                                            "label": undefined,
                                                            "value": "bar",
                                                          },
                                                        ]
                                                      }
                                                      selectOption={[Function]}
                                                      selectProps={
                                                        Object {
                                                          "allowNull": true,
                                                          "backspaceRemovesValue": true,
                                                          "blurInputOnSelect": true,
                                                          "captureMenuScroll": false,
                                                          "checked": undefined,
                                                          "className": "ddorg__pf3-component-mapper__select",
                                                          "classNamePrefix": "ddorg__pf3-component-mapper__select",
                                                          "closeMenuOnScroll": false,
                                                          "closeMenuOnSelect": true,
                                                          "components": Object {
                                                            "ClearIndicator": [Function],
                                                            "DropdownIndicator": null,
                                                            "Option": [Function],
                                                          },
                                                          "controlShouldRenderValue": true,
                                                          "escapeClearsValue": false,
                                                          "filterOption": [Function],
                                                          "formatGroupLabel": [Function],
                                                          "getOptionLabel": [Function],
                                                          "getOptionValue": [Function],
                                                          "hideSelectedOptions": false,
                                                          "id": "type",
                                                          "inputValue": "",
                                                          "isClearable": false,
                                                          "isDisabled": true,
                                                          "isFetching": false,
                                                          "isLoading": false,
                                                          "isMulti": false,
                                                          "isOptionDisabled": [Function],
                                                          "isRtl": false,
                                                          "isSearchable": false,
                                                          "loadingMessage": [Function],
                                                          "maxMenuHeight": 300,
                                                          "menuIsOpen": false,
                                                          "menuPlacement": "bottom",
                                                          "menuPosition": "absolute",
                                                          "menuShouldBlockScroll": false,
                                                          "menuShouldScrollIntoView": true,
                                                          "minMenuHeight": 140,
                                                          "name": "type",
                                                          "noOptionsMessage": [Function],
                                                          "onBlur": [Function],
                                                          "onChange": [Function],
                                                          "onFocus": [Function],
                                                          "onInputChange": [Function],
                                                          "onMenuClose": [Function],
                                                          "onMenuOpen": [Function],
                                                          "openMenuOnClick": true,
                                                          "openMenuOnFocus": false,
                                                          "options": Array [
                                                            Object {
                                                              "label": "Amazon",
                                                              "value": "foo",
                                                            },
                                                            Object {
                                                              "label": undefined,
                                                              "value": "bar",
                                                            },
                                                          ],
                                                          "pageSize": 5,
                                                          "placeholder": "<Choose>",
                                                          "screenReaderStatus": [Function],
                                                          "styles": Object {},
                                                          "tabIndex": "0",
                                                          "tabSelectsValue": true,
                                                          "value": Array [
                                                            Object {
                                                              "label": "Amazon",
                                                              "value": "foo",
                                                            },
                                                          ],
                                                        }
                                                      }
                                                      setValue={[Function]}
                                                      theme={
                                                        Object {
                                                          "borderRadius": 4,
                                                          "colors": Object {
                                                            "danger": "#DE350B",
                                                            "dangerLight": "#FFBDAD",
                                                            "neutral0": "hsl(0, 0%, 100%)",
                                                            "neutral10": "hsl(0, 0%, 90%)",
                                                            "neutral20": "hsl(0, 0%, 80%)",
                                                            "neutral30": "hsl(0, 0%, 70%)",
                                                            "neutral40": "hsl(0, 0%, 60%)",
                                                            "neutral5": "hsl(0, 0%, 95%)",
                                                            "neutral50": "hsl(0, 0%, 50%)",
                                                            "neutral60": "hsl(0, 0%, 40%)",
                                                            "neutral70": "hsl(0, 0%, 30%)",
                                                            "neutral80": "hsl(0, 0%, 20%)",
                                                            "neutral90": "hsl(0, 0%, 10%)",
                                                            "primary": "#2684FF",
                                                            "primary25": "#DEEBFF",
                                                            "primary50": "#B2D4FF",
                                                            "primary75": "#4C9AFF",
                                                          },
                                                          "spacing": Object {
                                                            "baseUnit": 4,
                                                            "controlHeight": 38,
                                                            "menuGutter": 8,
                                                          },
                                                        }
                                                      }
                                                    >
                                                      <ForwardRef(render)
                                                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                        className="ddorg__pf3-component-mapper__select ddorg__pf3-component-mapper__select--is-disabled"
                                                        css={
                                                          Object {
                                                            "boxSizing": "border-box",
                                                            "direction": null,
                                                            "label": "container",
                                                            "pointerEvents": "none",
                                                            "position": "relative",
                                                          }
                                                        }
                                                        id="type"
                                                        onKeyDown={[Function]}
                                                      >
                                                        <div
                                                          className="ddorg__pf3-component-mapper__select ddorg__pf3-component-mapper__select--is-disabled css-14jk2my-container"
                                                          id="type"
                                                          onKeyDown={[Function]}
                                                        >
                                                          <Control
                                                            clearValue={[Function]}
                                                            cx={[Function]}
                                                            getStyles={[Function]}
                                                            getValue={[Function]}
                                                            hasValue={true}
                                                            innerProps={
                                                              Object {
                                                                "onMouseDown": [Function],
                                                                "onTouchEnd": [Function],
                                                              }
                                                            }
                                                            innerRef={[Function]}
                                                            isDisabled={true}
                                                            isFocused={false}
                                                            isMulti={false}
                                                            isRtl={false}
                                                            menuIsOpen={false}
                                                            options={
                                                              Array [
                                                                Object {
                                                                  "label": "Amazon",
                                                                  "value": "foo",
                                                                },
                                                                Object {
                                                                  "label": undefined,
                                                                  "value": "bar",
                                                                },
                                                              ]
                                                            }
                                                            selectOption={[Function]}
                                                            selectProps={
                                                              Object {
                                                                "allowNull": true,
                                                                "backspaceRemovesValue": true,
                                                                "blurInputOnSelect": true,
                                                                "captureMenuScroll": false,
                                                                "checked": undefined,
                                                                "className": "ddorg__pf3-component-mapper__select",
                                                                "classNamePrefix": "ddorg__pf3-component-mapper__select",
                                                                "closeMenuOnScroll": false,
                                                                "closeMenuOnSelect": true,
                                                                "components": Object {
                                                                  "ClearIndicator": [Function],
                                                                  "DropdownIndicator": null,
                                                                  "Option": [Function],
                                                                },
                                                                "controlShouldRenderValue": true,
                                                                "escapeClearsValue": false,
                                                                "filterOption": [Function],
                                                                "formatGroupLabel": [Function],
                                                                "getOptionLabel": [Function],
                                                                "getOptionValue": [Function],
                                                                "hideSelectedOptions": false,
                                                                "id": "type",
                                                                "inputValue": "",
                                                                "isClearable": false,
                                                                "isDisabled": true,
                                                                "isFetching": false,
                                                                "isLoading": false,
                                                                "isMulti": false,
                                                                "isOptionDisabled": [Function],
                                                                "isRtl": false,
                                                                "isSearchable": false,
                                                                "loadingMessage": [Function],
                                                                "maxMenuHeight": 300,
                                                                "menuIsOpen": false,
                                                                "menuPlacement": "bottom",
                                                                "menuPosition": "absolute",
                                                                "menuShouldBlockScroll": false,
                                                                "menuShouldScrollIntoView": true,
                                                                "minMenuHeight": 140,
                                                                "name": "type",
                                                                "noOptionsMessage": [Function],
                                                                "onBlur": [Function],
                                                                "onChange": [Function],
                                                                "onFocus": [Function],
                                                                "onInputChange": [Function],
                                                                "onMenuClose": [Function],
                                                                "onMenuOpen": [Function],
                                                                "openMenuOnClick": true,
                                                                "openMenuOnFocus": false,
                                                                "options": Array [
                                                                  Object {
                                                                    "label": "Amazon",
                                                                    "value": "foo",
                                                                  },
                                                                  Object {
                                                                    "label": undefined,
                                                                    "value": "bar",
                                                                  },
                                                                ],
                                                                "pageSize": 5,
                                                                "placeholder": "<Choose>",
                                                                "screenReaderStatus": [Function],
                                                                "styles": Object {},
                                                                "tabIndex": "0",
                                                                "tabSelectsValue": true,
                                                                "value": Array [
                                                                  Object {
                                                                    "label": "Amazon",
                                                                    "value": "foo",
                                                                  },
                                                                ],
                                                              }
                                                            }
                                                            setValue={[Function]}
                                                            theme={
                                                              Object {
                                                                "borderRadius": 4,
                                                                "colors": Object {
                                                                  "danger": "#DE350B",
                                                                  "dangerLight": "#FFBDAD",
                                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                                  "neutral50": "hsl(0, 0%, 50%)",
                                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                                  "primary": "#2684FF",
                                                                  "primary25": "#DEEBFF",
                                                                  "primary50": "#B2D4FF",
                                                                  "primary75": "#4C9AFF",
                                                                },
                                                                "spacing": Object {
                                                                  "baseUnit": 4,
                                                                  "controlHeight": 38,
                                                                  "menuGutter": 8,
                                                                },
                                                              }
                                                            }
                                                          >
                                                            <ForwardRef(render)
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                              className="ddorg__pf3-component-mapper__select__control ddorg__pf3-component-mapper__select__control--is-disabled"
                                                              css={
                                                                Object {
                                                                  "&:hover": Object {
                                                                    "borderColor": "hsl(0, 0%, 70%)",
                                                                  },
                                                                  "alignItems": "center",
                                                                  "backgroundColor": "hsl(0, 0%, 95%)",
                                                                  "borderColor": "hsl(0, 0%, 90%)",
                                                                  "borderRadius": 4,
                                                                  "borderStyle": "solid",
                                                                  "borderWidth": 1,
                                                                  "boxShadow": null,
                                                                  "boxSizing": "border-box",
                                                                  "cursor": "default",
                                                                  "display": "flex",
                                                                  "flexWrap": "wrap",
                                                                  "justifyContent": "space-between",
                                                                  "label": "control",
                                                                  "minHeight": 38,
                                                                  "outline": "0 !important",
                                                                  "position": "relative",
                                                                  "transition": "all 100ms",
                                                                }
                                                              }
                                                              onMouseDown={[Function]}
                                                              onTouchEnd={[Function]}
                                                            >
                                                              <div
                                                                className="ddorg__pf3-component-mapper__select__control ddorg__pf3-component-mapper__select__control--is-disabled css-1fhf3k1-control"
                                                                onMouseDown={[Function]}
                                                                onTouchEnd={[Function]}
                                                              >
                                                                <ValueContainer
                                                                  clearValue={[Function]}
                                                                  cx={[Function]}
                                                                  getStyles={[Function]}
                                                                  getValue={[Function]}
                                                                  hasValue={true}
                                                                  isDisabled={true}
                                                                  isMulti={false}
                                                                  isRtl={false}
                                                                  options={
                                                                    Array [
                                                                      Object {
                                                                        "label": "Amazon",
                                                                        "value": "foo",
                                                                      },
                                                                      Object {
                                                                        "label": undefined,
                                                                        "value": "bar",
                                                                      },
                                                                    ]
                                                                  }
                                                                  selectOption={[Function]}
                                                                  selectProps={
                                                                    Object {
                                                                      "allowNull": true,
                                                                      "backspaceRemovesValue": true,
                                                                      "blurInputOnSelect": true,
                                                                      "captureMenuScroll": false,
                                                                      "checked": undefined,
                                                                      "className": "ddorg__pf3-component-mapper__select",
                                                                      "classNamePrefix": "ddorg__pf3-component-mapper__select",
                                                                      "closeMenuOnScroll": false,
                                                                      "closeMenuOnSelect": true,
                                                                      "components": Object {
                                                                        "ClearIndicator": [Function],
                                                                        "DropdownIndicator": null,
                                                                        "Option": [Function],
                                                                      },
                                                                      "controlShouldRenderValue": true,
                                                                      "escapeClearsValue": false,
                                                                      "filterOption": [Function],
                                                                      "formatGroupLabel": [Function],
                                                                      "getOptionLabel": [Function],
                                                                      "getOptionValue": [Function],
                                                                      "hideSelectedOptions": false,
                                                                      "id": "type",
                                                                      "inputValue": "",
                                                                      "isClearable": false,
                                                                      "isDisabled": true,
                                                                      "isFetching": false,
                                                                      "isLoading": false,
                                                                      "isMulti": false,
                                                                      "isOptionDisabled": [Function],
                                                                      "isRtl": false,
                                                                      "isSearchable": false,
                                                                      "loadingMessage": [Function],
                                                                      "maxMenuHeight": 300,
                                                                      "menuIsOpen": false,
                                                                      "menuPlacement": "bottom",
                                                                      "menuPosition": "absolute",
                                                                      "menuShouldBlockScroll": false,
                                                                      "menuShouldScrollIntoView": true,
                                                                      "minMenuHeight": 140,
                                                                      "name": "type",
                                                                      "noOptionsMessage": [Function],
                                                                      "onBlur": [Function],
                                                                      "onChange": [Function],
                                                                      "onFocus": [Function],
                                                                      "onInputChange": [Function],
                                                                      "onMenuClose": [Function],
                                                                      "onMenuOpen": [Function],
                                                                      "openMenuOnClick": true,
                                                                      "openMenuOnFocus": false,
                                                                      "options": Array [
                                                                        Object {
                                                                          "label": "Amazon",
                                                                          "value": "foo",
                                                                        },
                                                                        Object {
                                                                          "label": undefined,
                                                                          "value": "bar",
                                                                        },
                                                                      ],
                                                                      "pageSize": 5,
                                                                      "placeholder": "<Choose>",
                                                                      "screenReaderStatus": [Function],
                                                                      "styles": Object {},
                                                                      "tabIndex": "0",
                                                                      "tabSelectsValue": true,
                                                                      "value": Array [
                                                                        Object {
                                                                          "label": "Amazon",
                                                                          "value": "foo",
                                                                        },
                                                                      ],
                                                                    }
                                                                  }
                                                                  setValue={[Function]}
                                                                  theme={
                                                                    Object {
                                                                      "borderRadius": 4,
                                                                      "colors": Object {
                                                                        "danger": "#DE350B",
                                                                        "dangerLight": "#FFBDAD",
                                                                        "neutral0": "hsl(0, 0%, 100%)",
                                                                        "neutral10": "hsl(0, 0%, 90%)",
                                                                        "neutral20": "hsl(0, 0%, 80%)",
                                                                        "neutral30": "hsl(0, 0%, 70%)",
                                                                        "neutral40": "hsl(0, 0%, 60%)",
                                                                        "neutral5": "hsl(0, 0%, 95%)",
                                                                        "neutral50": "hsl(0, 0%, 50%)",
                                                                        "neutral60": "hsl(0, 0%, 40%)",
                                                                        "neutral70": "hsl(0, 0%, 30%)",
                                                                        "neutral80": "hsl(0, 0%, 20%)",
                                                                        "neutral90": "hsl(0, 0%, 10%)",
                                                                        "primary": "#2684FF",
                                                                        "primary25": "#DEEBFF",
                                                                        "primary50": "#B2D4FF",
                                                                        "primary75": "#4C9AFF",
                                                                      },
                                                                      "spacing": Object {
                                                                        "baseUnit": 4,
                                                                        "controlHeight": 38,
                                                                        "menuGutter": 8,
                                                                      },
                                                                    }
                                                                  }
                                                                >
                                                                  <ForwardRef(render)
                                                                    __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                                    className="ddorg__pf3-component-mapper__select__value-container ddorg__pf3-component-mapper__select__value-container--has-value"
                                                                    css={
                                                                      Object {
                                                                        "WebkitOverflowScrolling": "touch",
                                                                        "alignItems": "center",
                                                                        "boxSizing": "border-box",
                                                                        "display": "flex",
                                                                        "flex": 1,
                                                                        "flexWrap": "wrap",
                                                                        "overflow": "hidden",
                                                                        "padding": "2px 8px",
                                                                        "position": "relative",
                                                                      }
                                                                    }
                                                                  >
                                                                    <div
                                                                      className="ddorg__pf3-component-mapper__select__value-container ddorg__pf3-component-mapper__select__value-container--has-value css-1hwfws3"
                                                                    >
                                                                      <SingleValue
                                                                        clearValue={[Function]}
                                                                        cx={[Function]}
                                                                        data={
                                                                          Object {
                                                                            "label": "Amazon",
                                                                            "value": "foo",
                                                                          }
                                                                        }
                                                                        getStyles={[Function]}
                                                                        getValue={[Function]}
                                                                        hasValue={true}
                                                                        isDisabled={true}
                                                                        isMulti={false}
                                                                        isRtl={false}
                                                                        options={
                                                                          Array [
                                                                            Object {
                                                                              "label": "Amazon",
                                                                              "value": "foo",
                                                                            },
                                                                            Object {
                                                                              "label": undefined,
                                                                              "value": "bar",
                                                                            },
                                                                          ]
                                                                        }
                                                                        selectOption={[Function]}
                                                                        selectProps={
                                                                          Object {
                                                                            "allowNull": true,
                                                                            "backspaceRemovesValue": true,
                                                                            "blurInputOnSelect": true,
                                                                            "captureMenuScroll": false,
                                                                            "checked": undefined,
                                                                            "className": "ddorg__pf3-component-mapper__select",
                                                                            "classNamePrefix": "ddorg__pf3-component-mapper__select",
                                                                            "closeMenuOnScroll": false,
                                                                            "closeMenuOnSelect": true,
                                                                            "components": Object {
                                                                              "ClearIndicator": [Function],
                                                                              "DropdownIndicator": null,
                                                                              "Option": [Function],
                                                                            },
                                                                            "controlShouldRenderValue": true,
                                                                            "escapeClearsValue": false,
                                                                            "filterOption": [Function],
                                                                            "formatGroupLabel": [Function],
                                                                            "getOptionLabel": [Function],
                                                                            "getOptionValue": [Function],
                                                                            "hideSelectedOptions": false,
                                                                            "id": "type",
                                                                            "inputValue": "",
                                                                            "isClearable": false,
                                                                            "isDisabled": true,
                                                                            "isFetching": false,
                                                                            "isLoading": false,
                                                                            "isMulti": false,
                                                                            "isOptionDisabled": [Function],
                                                                            "isRtl": false,
                                                                            "isSearchable": false,
                                                                            "loadingMessage": [Function],
                                                                            "maxMenuHeight": 300,
                                                                            "menuIsOpen": false,
                                                                            "menuPlacement": "bottom",
                                                                            "menuPosition": "absolute",
                                                                            "menuShouldBlockScroll": false,
                                                                            "menuShouldScrollIntoView": true,
                                                                            "minMenuHeight": 140,
                                                                            "name": "type",
                                                                            "noOptionsMessage": [Function],
                                                                            "onBlur": [Function],
                                                                            "onChange": [Function],
                                                                            "onFocus": [Function],
                                                                            "onInputChange": [Function],
                                                                            "onMenuClose": [Function],
                                                                            "onMenuOpen": [Function],
                                                                            "openMenuOnClick": true,
                                                                            "openMenuOnFocus": false,
                                                                            "options": Array [
                                                                              Object {
                                                                                "label": "Amazon",
                                                                                "value": "foo",
                                                                              },
                                                                              Object {
                                                                                "label": undefined,
                                                                                "value": "bar",
                                                                              },
                                                                            ],
                                                                            "pageSize": 5,
                                                                            "placeholder": "<Choose>",
                                                                            "screenReaderStatus": [Function],
                                                                            "styles": Object {},
                                                                            "tabIndex": "0",
                                                                            "tabSelectsValue": true,
                                                                            "value": Array [
                                                                              Object {
                                                                                "label": "Amazon",
                                                                                "value": "foo",
                                                                              },
                                                                            ],
                                                                          }
                                                                        }
                                                                        setValue={[Function]}
                                                                        theme={
                                                                          Object {
                                                                            "borderRadius": 4,
                                                                            "colors": Object {
                                                                              "danger": "#DE350B",
                                                                              "dangerLight": "#FFBDAD",
                                                                              "neutral0": "hsl(0, 0%, 100%)",
                                                                              "neutral10": "hsl(0, 0%, 90%)",
                                                                              "neutral20": "hsl(0, 0%, 80%)",
                                                                              "neutral30": "hsl(0, 0%, 70%)",
                                                                              "neutral40": "hsl(0, 0%, 60%)",
                                                                              "neutral5": "hsl(0, 0%, 95%)",
                                                                              "neutral50": "hsl(0, 0%, 50%)",
                                                                              "neutral60": "hsl(0, 0%, 40%)",
                                                                              "neutral70": "hsl(0, 0%, 30%)",
                                                                              "neutral80": "hsl(0, 0%, 20%)",
                                                                              "neutral90": "hsl(0, 0%, 10%)",
                                                                              "primary": "#2684FF",
                                                                              "primary25": "#DEEBFF",
                                                                              "primary50": "#B2D4FF",
                                                                              "primary75": "#4C9AFF",
                                                                            },
                                                                            "spacing": Object {
                                                                              "baseUnit": 4,
                                                                              "controlHeight": 38,
                                                                              "menuGutter": 8,
                                                                            },
                                                                          }
                                                                        }
                                                                      >
                                                                        <ForwardRef(render)
                                                                          __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                                          className="ddorg__pf3-component-mapper__select__single-value ddorg__pf3-component-mapper__select__single-value--is-disabled"
                                                                          css={
                                                                            Object {
                                                                              "boxSizing": "border-box",
                                                                              "color": "hsl(0, 0%, 60%)",
                                                                              "label": "singleValue",
                                                                              "marginLeft": 2,
                                                                              "marginRight": 2,
                                                                              "maxWidth": "calc(100% - 8px)",
                                                                              "overflow": "hidden",
                                                                              "position": "absolute",
                                                                              "textOverflow": "ellipsis",
                                                                              "top": "50%",
                                                                              "transform": "translateY(-50%)",
                                                                              "whiteSpace": "nowrap",
                                                                            }
                                                                          }
                                                                        >
                                                                          <div
                                                                            className="ddorg__pf3-component-mapper__select__single-value ddorg__pf3-component-mapper__select__single-value--is-disabled css-107lb6w-singleValue"
                                                                          >
                                                                            Amazon
                                                                          </div>
                                                                        </ForwardRef(render)>
                                                                      </SingleValue>
                                                                      <DummyInput
                                                                        aria-autocomplete="list"
                                                                        disabled={true}
                                                                        id="react-select-12-input"
                                                                        innerRef={[Function]}
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        readOnly={true}
                                                                        tabIndex="0"
                                                                        value=""
                                                                      >
                                                                        <ForwardRef(render)
                                                                          __EMOTION_TYPE_PLEASE_DO_NOT_USE__="input"
                                                                          aria-autocomplete="list"
                                                                          css={
                                                                            Object {
                                                                              "name": "62g3xt-dummyInput",
                                                                              "next": undefined,
                                                                              "styles": "label:dummyInput;background:0;border:0;font-size:inherit;outline:0;padding:0;width:1px;color:transparent;left:-100px;opacity:0;position:relative;transform:scale(0);",
                                                                            }
                                                                          }
                                                                          disabled={true}
                                                                          id="react-select-12-input"
                                                                          onBlur={[Function]}
                                                                          onChange={[Function]}
                                                                          onFocus={[Function]}
                                                                          readOnly={true}
                                                                          tabIndex="0"
                                                                          value=""
                                                                        >
                                                                          <input
                                                                            aria-autocomplete="list"
                                                                            className="css-62g3xt-dummyInput"
                                                                            disabled={true}
                                                                            id="react-select-12-input"
                                                                            onBlur={[Function]}
                                                                            onChange={[Function]}
                                                                            onFocus={[Function]}
                                                                            readOnly={true}
                                                                            tabIndex="0"
                                                                            value=""
                                                                          />
                                                                        </ForwardRef(render)>
                                                                      </DummyInput>
                                                                    </div>
                                                                  </ForwardRef(render)>
                                                                </ValueContainer>
                                                                <IndicatorsContainer
                                                                  clearValue={[Function]}
                                                                  cx={[Function]}
                                                                  getStyles={[Function]}
                                                                  getValue={[Function]}
                                                                  hasValue={true}
                                                                  isDisabled={true}
                                                                  isMulti={false}
                                                                  isRtl={false}
                                                                  options={
                                                                    Array [
                                                                      Object {
                                                                        "label": "Amazon",
                                                                        "value": "foo",
                                                                      },
                                                                      Object {
                                                                        "label": undefined,
                                                                        "value": "bar",
                                                                      },
                                                                    ]
                                                                  }
                                                                  selectOption={[Function]}
                                                                  selectProps={
                                                                    Object {
                                                                      "allowNull": true,
                                                                      "backspaceRemovesValue": true,
                                                                      "blurInputOnSelect": true,
                                                                      "captureMenuScroll": false,
                                                                      "checked": undefined,
                                                                      "className": "ddorg__pf3-component-mapper__select",
                                                                      "classNamePrefix": "ddorg__pf3-component-mapper__select",
                                                                      "closeMenuOnScroll": false,
                                                                      "closeMenuOnSelect": true,
                                                                      "components": Object {
                                                                        "ClearIndicator": [Function],
                                                                        "DropdownIndicator": null,
                                                                        "Option": [Function],
                                                                      },
                                                                      "controlShouldRenderValue": true,
                                                                      "escapeClearsValue": false,
                                                                      "filterOption": [Function],
                                                                      "formatGroupLabel": [Function],
                                                                      "getOptionLabel": [Function],
                                                                      "getOptionValue": [Function],
                                                                      "hideSelectedOptions": false,
                                                                      "id": "type",
                                                                      "inputValue": "",
                                                                      "isClearable": false,
                                                                      "isDisabled": true,
                                                                      "isFetching": false,
                                                                      "isLoading": false,
                                                                      "isMulti": false,
                                                                      "isOptionDisabled": [Function],
                                                                      "isRtl": false,
                                                                      "isSearchable": false,
                                                                      "loadingMessage": [Function],
                                                                      "maxMenuHeight": 300,
                                                                      "menuIsOpen": false,
                                                                      "menuPlacement": "bottom",
                                                                      "menuPosition": "absolute",
                                                                      "menuShouldBlockScroll": false,
                                                                      "menuShouldScrollIntoView": true,
                                                                      "minMenuHeight": 140,
                                                                      "name": "type",
                                                                      "noOptionsMessage": [Function],
                                                                      "onBlur": [Function],
                                                                      "onChange": [Function],
                                                                      "onFocus": [Function],
                                                                      "onInputChange": [Function],
                                                                      "onMenuClose": [Function],
                                                                      "onMenuOpen": [Function],
                                                                      "openMenuOnClick": true,
                                                                      "openMenuOnFocus": false,
                                                                      "options": Array [
                                                                        Object {
                                                                          "label": "Amazon",
                                                                          "value": "foo",
                                                                        },
                                                                        Object {
                                                                          "label": undefined,
                                                                          "value": "bar",
                                                                        },
                                                                      ],
                                                                      "pageSize": 5,
                                                                      "placeholder": "<Choose>",
                                                                      "screenReaderStatus": [Function],
                                                                      "styles": Object {},
                                                                      "tabIndex": "0",
                                                                      "tabSelectsValue": true,
                                                                      "value": Array [
                                                                        Object {
                                                                          "label": "Amazon",
                                                                          "value": "foo",
                                                                        },
                                                                      ],
                                                                    }
                                                                  }
                                                                  setValue={[Function]}
                                                                  theme={
                                                                    Object {
                                                                      "borderRadius": 4,
                                                                      "colors": Object {
                                                                        "danger": "#DE350B",
                                                                        "dangerLight": "#FFBDAD",
                                                                        "neutral0": "hsl(0, 0%, 100%)",
                                                                        "neutral10": "hsl(0, 0%, 90%)",
                                                                        "neutral20": "hsl(0, 0%, 80%)",
                                                                        "neutral30": "hsl(0, 0%, 70%)",
                                                                        "neutral40": "hsl(0, 0%, 60%)",
                                                                        "neutral5": "hsl(0, 0%, 95%)",
                                                                        "neutral50": "hsl(0, 0%, 50%)",
                                                                        "neutral60": "hsl(0, 0%, 40%)",
                                                                        "neutral70": "hsl(0, 0%, 30%)",
                                                                        "neutral80": "hsl(0, 0%, 20%)",
                                                                        "neutral90": "hsl(0, 0%, 10%)",
                                                                        "primary": "#2684FF",
                                                                        "primary25": "#DEEBFF",
                                                                        "primary50": "#B2D4FF",
                                                                        "primary75": "#4C9AFF",
                                                                      },
                                                                      "spacing": Object {
                                                                        "baseUnit": 4,
                                                                        "controlHeight": 38,
                                                                        "menuGutter": 8,
                                                                      },
                                                                    }
                                                                  }
                                                                >
                                                                  <ForwardRef(render)
                                                                    __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                                    className="ddorg__pf3-component-mapper__select__indicators"
                                                                    css={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "alignSelf": "stretch",
                                                                        "boxSizing": "border-box",
                                                                        "display": "flex",
                                                                        "flexShrink": 0,
                                                                      }
                                                                    }
                                                                  >
                                                                    <div
                                                                      className="ddorg__pf3-component-mapper__select__indicators css-1wy0on6"
                                                                    />
                                                                  </ForwardRef(render)>
                                                                </IndicatorsContainer>
                                                              </div>
                                                            </ForwardRef(render)>
                                                          </Control>
                                                        </div>
                                                      </ForwardRef(render)>
                                                    </SelectContainer>
                                                  </Select>
                                                </StateManager>
                                              </SelectComponent>
                                            </Select>
                                          </Select>
                                        </div>
                                      </div>
                                    </FormGroup>
                                  </Pf3FormGroup>
                                </Select>
                              </SelectWithOnChange>
                            </FormFieldHideWrapper>
                          </FormConditionWrapper>
                        </SingleField>
                        <SingleField
                          component="text-field"
                          helperText="AWS Access Key for this credential"
                          id="userid"
                          isRequired={true}
                          key="userid"
                          label="Access Key"
                          name="userid"
                        >
                          <FormConditionWrapper
                            field={
                              Object {
                                "component": "text-field",
                                "helperText": "AWS Access Key for this credential",
                                "id": "userid",
                                "isRequired": true,
                                "label": "Access Key",
                                "name": "userid",
                              }
                            }
                          >
                            <FormFieldHideWrapper
                              hideField={false}
                            >
                              <TextField
                                component="text-field"
                                helperText="AWS Access Key for this credential"
                                id="userid"
                                isRequired={true}
                                label="Access Key"
                                name="userid"
                              >
                                <Pf3FormGroup
                                  helperText="AWS Access Key for this credential"
                                  isRequired={true}
                                  label="Access Key"
                                  meta={
                                    Object {
                                      "active": false,
                                      "data": Object {},
                                      "dirty": false,
                                      "dirtySinceLastSubmit": false,
                                      "error": undefined,
                                      "initial": "test",
                                      "invalid": false,
                                      "length": undefined,
                                      "modified": false,
                                      "modifiedSinceLastSubmit": false,
                                      "pristine": true,
                                      "submitError": undefined,
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": true,
                                      "validating": false,
                                      "visited": false,
                                    }
                                  }
                                >
                                  <FormGroup
                                    bsClass="form-group"
                                    validationState={null}
                                  >
                                    <div
                                      className="form-group"
                                    >
                                      <ControlLabel
                                        bsClass="control-label"
                                        srOnly={false}
                                      >
                                        <label
                                          className="control-label"
                                        >
                                          <RequiredLabel
                                            label="Access Key"
                                          >
                                            <span
                                              style={
                                                Object {
                                                  "color": "#ff0000",
                                                }
                                              }
                                            >
                                              * 
                                            </span>
                                             
                                            Access Key
                                          </RequiredLabel>
                                          <FieldLevelHelp
                                            buttonClass=""
                                            content="AWS Access Key for this credential"
                                            placement="top"
                                            rootClose={true}
                                          >
                                            <OverlayTrigger
                                              defaultOverlayShown={false}
                                              overlay={
                                                <Popover
                                                  bsClass="popover"
                                                  id="popover"
                                                  placement="right"
                                                >
                                                  AWS Access Key for this credential
                                                </Popover>
                                              }
                                              placement="top"
                                              rootClose={true}
                                              trigger={
                                                Array [
                                                  "click",
                                                ]
                                              }
                                            >
                                              <Button
                                                active={false}
                                                block={false}
                                                bsClass="btn"
                                                bsStyle="link"
                                                className="popover-pf-info"
                                                disabled={false}
                                                onClick={[Function]}
                                              >
                                                <button
                                                  className="popover-pf-info btn btn-link"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                  type="button"
                                                >
                                                  <Icon
                                                    name="info"
                                                    type="pf"
                                                  >
                                                    <PatternflyIcon
                                                      className=""
                                                      name="info"
                                                    >
                                                      <span
                                                        aria-hidden="true"
                                                        className="pficon pficon-info"
                                                      />
                                                    </PatternflyIcon>
                                                  </Icon>
                                                </button>
                                              </Button>
                                            </OverlayTrigger>
                                          </FieldLevelHelp>
                                        </label>
                                      </ControlLabel>
                                      <FormControl
                                        bsClass="form-control"
                                        componentClass="input"
                                        id="userid"
                                        name="userid"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        value="test"
                                      >
                                        <input
                                          className="form-control"
                                          id="userid"
                                          name="userid"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          value="test"
                                        />
                                      </FormControl>
                                    </div>
                                  </FormGroup>
                                </Pf3FormGroup>
                              </TextField>
                            </FormFieldHideWrapper>
                          </FormConditionWrapper>
                        </SingleField>
                        <SingleField
                          component="spy-field"
                          key="spy-field"
                          name="spy-field"
                        >
                          <FormConditionWrapper
                            field={
                              Object {
                                "component": "spy-field",
                                "initialize": undefined,
                                "name": "spy-field",
                              }
                            }
                          >
                            <FormFieldHideWrapper
                              hideField={false}
                            >
                              <SpyField
                                component="spy-field"
                                name="spy-field"
                              >
                                <FormSpy
                                  onChange={[Function]}
                                  subscription={
                                    Object {
                                      "pristine": true,
                                      "valid": true,
                                    }
                                  }
                                />
                              </SpyField>
                            </FormFieldHideWrapper>
                          </FormConditionWrapper>
                        </SingleField>
                        <FormSpy>
                          <FormControls
                            Button={[Function]}
                            ButtonGroup={[Function]}
                            FormSpy={[Function]}
                            buttonOrder={
                              Array [
                                "submit",
                                "reset",
                                "cancel",
                              ]
                            }
                            buttonsProps={Object {}}
                            canReset={true}
                            canSubmit={false}
                            cancelLabel="Cancel"
                            disableSubmit={true}
                            formFields={
                              Array [
                                <SingleField
                                  component="text-field"
                                  name="manager_resource"
                                  type="hidden"
                                />,
                                <SingleField
                                  component="text-field"
                                  id="name"
                                  isRequired={true}
                                  label="Name"
                                  maxLength={128}
                                  name="name"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="select"
                                  id="type"
                                  isDisabled={true}
                                  isRequired={true}
                                  label="Credential type"
                                  loadOptions={[Function]}
                                  name="type"
                                  onChange={[Function]}
                                  placeholder="<Choose>"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  helperText="AWS Access Key for this credential"
                                  id="userid"
                                  isRequired={true}
                                  label="Access Key"
                                  name="userid"
                                />,
                                <SingleField
                                  component="spy-field"
                                  name="spy-field"
                                />,
                              ]
                            }
                            formSpyProps={
                              Object {
                                "active": undefined,
                                "dirty": false,
                                "dirtyFields": Object {},
                                "dirtyFieldsSinceLastSubmit": Object {
                                  "type": true,
                                  "userid": true,
                                },
                                "dirtySinceLastSubmit": false,
                                "error": undefined,
                                "errors": Object {
                                  "name": "Required",
                                },
                                "form": Object {
                                  "batch": [Function],
                                  "blur": [Function],
                                  "change": [Function],
                                  "destroyOnUnregister": false,
                                  "focus": [Function],
                                  "getFieldState": [Function],
                                  "getRegisteredFields": [Function],
                                  "getState": [Function],
                                  "initialize": [Function],
                                  "isValidationPaused": [Function],
                                  "mutators": Object {
                                    "concat": [Function],
                                    "insert": [Function],
                                    "move": [Function],
                                    "pop": [Function],
                                    "push": [Function],
                                    "remove": [Function],
                                    "removeBatch": [Function],
                                    "shift": [Function],
                                    "swap": [Function],
                                    "unshift": [Function],
                                    "update": [Function],
                                  },
                                  "pauseValidation": [Function],
                                  "registerField": [Function],
                                  "reset": [Function],
                                  "resetFieldState": [Function],
                                  "restart": [Function],
                                  "resumeValidation": [Function],
                                  "setConfig": [Function],
                                  "submit": [Function],
                                  "subscribe": [Function],
                                },
                                "hasSubmitErrors": false,
                                "hasValidationErrors": true,
                                "initialValues": Object {
                                  "type": "foo",
                                  "userid": "test",
                                },
                                "invalid": true,
                                "modified": Object {
                                  "manager_resource": false,
                                  "name": false,
                                  "type": false,
                                  "userid": false,
                                },
                                "modifiedSinceLastSubmit": false,
                                "pristine": true,
                                "submitError": undefined,
                                "submitErrors": undefined,
                                "submitFailed": false,
                                "submitSucceeded": false,
                                "submitting": false,
                                "touched": Object {
                                  "manager_resource": false,
                                  "name": false,
                                  "type": false,
                                  "userid": false,
                                },
                                "valid": false,
                                "validating": false,
                                "values": Object {
                                  "type": "foo",
                                  "userid": "test",
                                },
                                "visited": Object {
                                  "manager_resource": false,
                                  "name": false,
                                  "type": false,
                                  "userid": false,
                                },
                              }
                            }
                            onCancel={[Function]}
                            onReset={[Function]}
                            resetLabel="Reset"
                            schema={
                              Object {
                                "fields": Array [
                                  Object {
                                    "component": "text-field",
                                    "name": "manager_resource",
                                    "type": "hidden",
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "name",
                                    "isRequired": true,
                                    "label": "Name",
                                    "maxLength": 128,
                                    "name": "name",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "select",
                                    "id": "type",
                                    "isDisabled": true,
                                    "isRequired": true,
                                    "label": "Credential type",
                                    "loadOptions": [Function],
                                    "name": "type",
                                    "onChange": [Function],
                                    "placeholder": "<Choose>",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "helperText": "AWS Access Key for this credential",
                                    "id": "userid",
                                    "isRequired": true,
                                    "label": "Access Key",
                                    "name": "userid",
                                  },
                                  Object {
                                    "component": "spy-field",
                                    "initialize": undefined,
                                    "name": "spy-field",
                                  },
                                ],
                              }
                            }
                            submitLabel="Save"
                          >
                            <ButtonGroup
                              className=""
                            >
                              <div
                                className="ddorg__pf3-layout-components__button-group "
                              >
                                <Button
                                  buttonType="submit"
                                  disabled={true}
                                  key="form-submit"
                                  label="Save"
                                  type="submit"
                                  variant="primary"
                                >
                                  <Button
                                    active={false}
                                    block={false}
                                    bsClass="btn"
                                    bsStyle="primary"
                                    disabled={true}
                                    type="submit"
                                  >
                                    <button
                                      className="btn btn-primary"
                                      disabled={true}
                                      type="submit"
                                    >
                                      Save
                                    </button>
                                  </Button>
                                </Button>
                                <Button
                                  buttonType="reset"
                                  disabled={true}
                                  key="form-reset"
                                  label="Reset"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <Button
                                    active={false}
                                    block={false}
                                    bsClass="btn"
                                    bsStyle="default"
                                    disabled={true}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      className="btn btn-default"
                                      disabled={true}
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      Reset
                                    </button>
                                  </Button>
                                </Button>
                                <Button
                                  buttonType="cancel"
                                  key="form-cancel"
                                  label="Cancel"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <Button
                                    active={false}
                                    block={false}
                                    bsClass="btn"
                                    bsStyle="default"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      className="btn btn-default"
                                      disabled={false}
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      Cancel
                                    </button>
                                  </Button>
                                </Button>
                              </div>
                            </ButtonGroup>
                          </FormControls>
                        </FormSpy>
                      </form>
                    </Form>
                  </Component>
                </FormTemplate>
              </PF3FormTemplate>
            </Component>
          </ReactFinalForm>
        </FormRenderer>
      </MiqFormRenderer>
    </Connect(MiqFormRenderer)>
  </AnsibleCredentialsForm>
</Provider>
`;
