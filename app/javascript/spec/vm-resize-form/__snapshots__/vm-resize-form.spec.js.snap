// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`vm resize form component should render a resize form 1`] = `
<Provider
  store={
    Object {
      "asyncReducers": Object {
        "FormButtons": [Function],
        "miqCustomTabReducer": [Function],
        "notificationReducer": [Function],
      },
      "dispatch": [Function],
      "getState": [Function],
      "injectReducers": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <VmResizeForm
    recordId="1"
    vmCloudResizeFormId="53"
  >
    <Grid>
      <FlexGrid>
        <GridSettings
          mode="flexbox"
          subgrid={false}
        >
          <div
            className="bx--grid"
          >
            <Connect(MiqFormRenderer)
              onCancel={[Function]}
              onSubmit={[Function]}
              schema={
                Object {
                  "fields": Array [
                    Array [
                      Object {
                        "component": "text-field",
                        "id": "memory",
                        "initialValue": 2,
                        "isRequired": true,
                        "label": "Memory (GiB)",
                        "name": "memory",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                    ],
                  ],
                }
              }
            >
              <MiqFormRenderer
                buttonsLabels={Object {}}
                canReset={false}
                className="form-react"
                componentMapper={
                  Object {
                    "checkbox": [Function],
                    "code-editor": [Function],
                    "date-picker": [Function],
                    "dual-list-select": [Function],
                    "edit-password-field": [Function],
                    "field-array": [Function],
                    "file-upload": [Function],
                    "font-icon-picker": [Function],
                    "font-icon-picker-ddf": [Function],
                    "multi-select": [Function],
                    "password-field": [Function],
                    "plain-text": [Function],
                    "radio": [Function],
                    "select": [Function],
                    "slider": [Function],
                    "sub-form": [Function],
                    "switch": [Function],
                    "tabs": [Function],
                    "text-field": [Function],
                    "textarea": [Function],
                    "time-picker": [Function],
                    "tree-selector": [Function],
                    "tree-view": [Function],
                    "validate-credentials": [Function],
                    "wizard": [Function],
                  }
                }
                disableSubmit={
                  Array [
                    "pristine",
                    "invalid",
                  ]
                }
                dispatch={[Function]}
                onCancel={[Function]}
                onSubmit={[Function]}
                schema={
                  Object {
                    "fields": Array [
                      Array [
                        Object {
                          "component": "text-field",
                          "id": "memory",
                          "initialValue": 2,
                          "isRequired": true,
                          "label": "Memory (GiB)",
                          "name": "memory",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                      ],
                    ],
                  }
                }
                showFormControls={true}
              >
                <FormRenderer
                  FormTemplate={[Function]}
                  clearOnUnmount={false}
                  componentMapper={
                    Object {
                      "checkbox": [Function],
                      "code-editor": [Function],
                      "date-picker": [Function],
                      "dual-list-select": [Function],
                      "edit-password-field": [Function],
                      "field-array": [Function],
                      "file-upload": [Function],
                      "font-icon-picker": [Function],
                      "font-icon-picker-ddf": [Function],
                      "multi-select": [Function],
                      "password-field": [Function],
                      "plain-text": [Function],
                      "radio": [Function],
                      "select": [Function],
                      "slider": [Function],
                      "spy-field": [Function],
                      "sub-form": [Function],
                      "switch": [Function],
                      "tabs": [Function],
                      "text-field": [Function],
                      "textarea": [Function],
                      "time-picker": [Function],
                      "tree-selector": [Function],
                      "tree-view": [Function],
                      "validate-credentials": [Function],
                      "wizard": [Function],
                    }
                  }
                  dispatch={[Function]}
                  initialValues={Object {}}
                  onCancel={[Function]}
                  onReset={[Function]}
                  onSubmit={[Function]}
                  schema={
                    Object {
                      "fields": Array [
                        Array [
                          Object {
                            "component": "text-field",
                            "id": "memory",
                            "initialValue": 2,
                            "isRequired": true,
                            "label": "Memory (GiB)",
                            "name": "memory",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                        ],
                        Object {
                          "component": "spy-field",
                          "initialize": undefined,
                          "name": "spy-field",
                        },
                      ],
                    }
                  }
                >
                  <ReactFinalForm
                    decorators={
                      Array [
                        [Function],
                      ]
                    }
                    dispatch={[Function]}
                    initialValues={Object {}}
                    mutators={
                      Object {
                        "concat": [Function],
                        "insert": [Function],
                        "move": [Function],
                        "pop": [Function],
                        "push": [Function],
                        "remove": [Function],
                        "removeBatch": [Function],
                        "shift": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                        "update": [Function],
                      }
                    }
                    onSubmit={[Function]}
                    render={[Function]}
                    subscription={
                      Object {
                        "pristine": true,
                        "submitting": true,
                        "valid": true,
                      }
                    }
                  >
                    <Component
                      formFields={
                        Array [
                          Array [
                            <SingleField
                              component="text-field"
                              id="memory"
                              initialValue={2}
                              isRequired={true}
                              label="Memory (GiB)"
                              name="memory"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                          ],
                          <SingleField
                            component="spy-field"
                            name="spy-field"
                          />,
                        ]
                      }
                      schema={
                        Object {
                          "fields": Array [
                            Array [
                              Object {
                                "component": "text-field",
                                "id": "memory",
                                "initialValue": 2,
                                "isRequired": true,
                                "label": "Memory (GiB)",
                                "name": "memory",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                            ],
                            Object {
                              "component": "spy-field",
                              "initialize": undefined,
                              "name": "spy-field",
                            },
                          ],
                        }
                      }
                    >
                      <WrappedFormTemplate
                        canReset={false}
                        cancelLabel="Cancel"
                        disableSubmit={
                          Array [
                            "pristine",
                            "invalid",
                          ]
                        }
                        formFields={
                          Array [
                            Array [
                              <SingleField
                                component="text-field"
                                id="memory"
                                initialValue={2}
                                isRequired={true}
                                label="Memory (GiB)"
                                name="memory"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                            ],
                            <SingleField
                              component="spy-field"
                              name="spy-field"
                            />,
                          ]
                        }
                        formWrapperProps={
                          Object {
                            "className": "form-react",
                          }
                        }
                        resetLabel="Reset"
                        schema={
                          Object {
                            "fields": Array [
                              Array [
                                Object {
                                  "component": "text-field",
                                  "id": "memory",
                                  "initialValue": 2,
                                  "isRequired": true,
                                  "label": "Memory (GiB)",
                                  "name": "memory",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                              ],
                              Object {
                                "component": "spy-field",
                                "initialize": undefined,
                                "name": "spy-field",
                              },
                            ],
                          }
                        }
                        showFormControls={true}
                        submitLabel="Save"
                      >
                        <FormTemplate
                          Button={[Function]}
                          ButtonGroup={[Function]}
                          Description={[Function]}
                          FormWrapper={[Function]}
                          Header={[Function]}
                          Title={[Function]}
                          buttonOrder={
                            Array [
                              "submit",
                              "reset",
                              "cancel",
                            ]
                          }
                          canReset={false}
                          cancelLabel="Cancel"
                          disableSubmit={
                            Array [
                              "pristine",
                              "invalid",
                            ]
                          }
                          formFields={
                            Array [
                              Array [
                                <SingleField
                                  component="text-field"
                                  id="memory"
                                  initialValue={2}
                                  isRequired={true}
                                  label="Memory (GiB)"
                                  name="memory"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                              ],
                              <SingleField
                                component="spy-field"
                                name="spy-field"
                              />,
                            ]
                          }
                          formWrapperProps={
                            Object {
                              "className": "form-react",
                            }
                          }
                          resetLabel="Reset"
                          schema={
                            Object {
                              "fields": Array [
                                Array [
                                  Object {
                                    "component": "text-field",
                                    "id": "memory",
                                    "initialValue": 2,
                                    "isRequired": true,
                                    "label": "Memory (GiB)",
                                    "name": "memory",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                ],
                                Object {
                                  "component": "spy-field",
                                  "initialize": undefined,
                                  "name": "spy-field",
                                },
                              ],
                            }
                          }
                          showFormControls={true}
                          submitLabel="Save"
                        >
                          <Form
                            className="form-react"
                            onSubmit={[Function]}
                          >
                            <Form
                              className="form-0-2-3 form-react"
                              noValidate={true}
                              onSubmit={[Function]}
                            >
                              <form
                                className="bx--form form-0-2-3 form-react"
                                noValidate={true}
                                onSubmit={[Function]}
                              >
                                 
                                <SingleField
                                  component="text-field"
                                  id="memory"
                                  initialValue={2}
                                  isRequired={true}
                                  key="memory"
                                  label="Memory (GiB)"
                                  name="memory"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                >
                                  <FormConditionWrapper
                                    field={
                                      Object {
                                        "component": "text-field",
                                        "id": "memory",
                                        "initialValue": 2,
                                        "isRequired": true,
                                        "label": "Memory (GiB)",
                                        "name": "memory",
                                        "validate": Array [
                                          Object {
                                            "type": "required",
                                          },
                                        ],
                                      }
                                    }
                                  >
                                    <FormFieldHideWrapper
                                      hideField={false}
                                    >
                                      <TextField
                                        component="text-field"
                                        id="memory"
                                        initialValue={2}
                                        isRequired={true}
                                        label="Memory (GiB)"
                                        name="memory"
                                        validate={
                                          Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ]
                                        }
                                      >
                                        <TextInput
                                          id="memory"
                                          invalid={false}
                                          invalidText=""
                                          key="memory"
                                          labelText={
                                            <IsRequired>
                                              Memory (GiB)
                                            </IsRequired>
                                          }
                                          name="memory"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          value={2}
                                          warn={false}
                                          warnText=""
                                        >
                                          <div
                                            className="bx--form-item bx--text-input-wrapper"
                                          >
                                            <label
                                              className="bx--label"
                                              htmlFor="memory"
                                            >
                                              <IsRequired>
                                                <span
                                                  aria-hidden="true"
                                                  className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                >
                                                  *
                                                </span>
                                                Memory (GiB)
                                              </IsRequired>
                                            </label>
                                            <div
                                              className="bx--text-input__field-outer-wrapper"
                                            >
                                              <div
                                                className="bx--text-input__field-wrapper"
                                                data-invalid={null}
                                              >
                                                <input
                                                  className="bx--text-input bx--text-input--md"
                                                  disabled={false}
                                                  id="memory"
                                                  name="memory"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  type="text"
                                                  value={2}
                                                />
                                              </div>
                                            </div>
                                          </div>
                                        </TextInput>
                                      </TextField>
                                    </FormFieldHideWrapper>
                                  </FormConditionWrapper>
                                </SingleField>
                                <SingleField
                                  component="spy-field"
                                  key="spy-field"
                                  name="spy-field"
                                >
                                  <FormConditionWrapper
                                    field={
                                      Object {
                                        "component": "spy-field",
                                        "initialize": undefined,
                                        "name": "spy-field",
                                      }
                                    }
                                  >
                                    <FormFieldHideWrapper
                                      hideField={false}
                                    >
                                      <SpyField
                                        component="spy-field"
                                        name="spy-field"
                                      >
                                        <FormSpy
                                          onChange={[Function]}
                                          subscription={
                                            Object {
                                              "pristine": true,
                                              "valid": true,
                                            }
                                          }
                                        />
                                      </SpyField>
                                    </FormFieldHideWrapper>
                                  </FormConditionWrapper>
                                </SingleField>
                                <FormSpy>
                                  <FormControls
                                    Button={[Function]}
                                    ButtonGroup={[Function]}
                                    FormSpy={[Function]}
                                    buttonOrder={
                                      Array [
                                        "submit",
                                        "reset",
                                        "cancel",
                                      ]
                                    }
                                    canReset={false}
                                    cancelLabel="Cancel"
                                    disableSubmit={true}
                                    formFields={
                                      Array [
                                        Array [
                                          <SingleField
                                            component="text-field"
                                            id="memory"
                                            initialValue={2}
                                            isRequired={true}
                                            label="Memory (GiB)"
                                            name="memory"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                        ],
                                        <SingleField
                                          component="spy-field"
                                          name="spy-field"
                                        />,
                                      ]
                                    }
                                    formSpyProps={
                                      Object {
                                        "active": undefined,
                                        "dirty": false,
                                        "dirtyFields": Object {},
                                        "dirtyFieldsSinceLastSubmit": Object {
                                          "memory": true,
                                        },
                                        "dirtySinceLastSubmit": false,
                                        "error": undefined,
                                        "errors": Object {},
                                        "form": Object {
                                          "batch": [Function],
                                          "blur": [Function],
                                          "change": [Function],
                                          "destroyOnUnregister": false,
                                          "focus": [Function],
                                          "getFieldState": [Function],
                                          "getRegisteredFields": [Function],
                                          "getState": [Function],
                                          "initialize": [Function],
                                          "isValidationPaused": [Function],
                                          "mutators": Object {
                                            "concat": [Function],
                                            "insert": [Function],
                                            "move": [Function],
                                            "pop": [Function],
                                            "push": [Function],
                                            "remove": [Function],
                                            "removeBatch": [Function],
                                            "shift": [Function],
                                            "swap": [Function],
                                            "unshift": [Function],
                                            "update": [Function],
                                          },
                                          "pauseValidation": [Function],
                                          "registerField": [Function],
                                          "reset": [Function],
                                          "resetFieldState": [Function],
                                          "restart": [Function],
                                          "resumeValidation": [Function],
                                          "setConfig": [Function],
                                          "submit": [Function],
                                          "subscribe": [Function],
                                        },
                                        "hasSubmitErrors": false,
                                        "hasValidationErrors": false,
                                        "initialValues": Object {
                                          "memory": 2,
                                        },
                                        "invalid": false,
                                        "modified": Object {
                                          "memory": false,
                                        },
                                        "modifiedSinceLastSubmit": false,
                                        "pristine": true,
                                        "submitError": undefined,
                                        "submitErrors": undefined,
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "submitting": false,
                                        "touched": Object {
                                          "memory": false,
                                        },
                                        "valid": true,
                                        "validating": false,
                                        "values": Object {
                                          "memory": 2,
                                        },
                                        "visited": Object {
                                          "memory": false,
                                        },
                                      }
                                    }
                                    onCancel={[Function]}
                                    onReset={[Function]}
                                    resetLabel="Reset"
                                    schema={
                                      Object {
                                        "fields": Array [
                                          Array [
                                            Object {
                                              "component": "text-field",
                                              "id": "memory",
                                              "initialValue": 2,
                                              "isRequired": true,
                                              "label": "Memory (GiB)",
                                              "name": "memory",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                          ],
                                          Object {
                                            "component": "spy-field",
                                            "initialize": undefined,
                                            "name": "spy-field",
                                          },
                                        ],
                                      }
                                    }
                                    submitLabel="Save"
                                  >
                                    <ButtonGroup>
                                      <ButtonSet
                                        className=""
                                      >
                                        <div
                                          className="bx--btn-set"
                                        >
                                          <Button
                                            buttonType="submit"
                                            disabled={true}
                                            key="form-submit"
                                            label="Save"
                                            type="submit"
                                            variant="primary"
                                          >
                                            <Button
                                              disabled={true}
                                              kind="primary"
                                              type="submit"
                                              variant="primary"
                                            >
                                              <button
                                                aria-describedby={null}
                                                aria-pressed={null}
                                                className="bx--btn bx--btn--primary bx--btn--disabled"
                                                disabled={true}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onFocus={[Function]}
                                                onMouseEnter={[Function]}
                                                onMouseLeave={[Function]}
                                                tabIndex={0}
                                                type="submit"
                                                variant="primary"
                                              >
                                                Save
                                              </button>
                                            </Button>
                                          </Button>
                                          <Button
                                            buttonType="cancel"
                                            key="form-cancel"
                                            label="Cancel"
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <Button
                                              kind="secondary"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <button
                                                aria-describedby={null}
                                                aria-pressed={null}
                                                className="bx--btn bx--btn--secondary"
                                                disabled={false}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onFocus={[Function]}
                                                onMouseEnter={[Function]}
                                                onMouseLeave={[Function]}
                                                tabIndex={0}
                                                type="button"
                                              >
                                                Cancel
                                              </button>
                                            </Button>
                                          </Button>
                                        </div>
                                      </ButtonSet>
                                    </ButtonGroup>
                                  </FormControls>
                                </FormSpy>
                                 
                              </form>
                            </Form>
                          </Form>
                        </FormTemplate>
                      </WrappedFormTemplate>
                    </Component>
                  </ReactFinalForm>
                </FormRenderer>
              </MiqFormRenderer>
            </Connect(MiqFormRenderer)>
          </div>
        </GridSettings>
      </FlexGrid>
    </Grid>
  </VmResizeForm>
</Provider>
`;

exports[`vm resize form component should render form 1`] = `""`;

exports[`vm resize form component should submit resize API call 1`] = `
<Provider
  store={
    Object {
      "asyncReducers": Object {
        "FormButtons": [Function],
        "miqCustomTabReducer": [Function],
        "notificationReducer": [Function],
      },
      "dispatch": [Function],
      "getState": [Function],
      "injectReducers": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <VmResizeForm
    recordId="1"
    vmCloudResizeFormId="53"
  />
</Provider>
`;
