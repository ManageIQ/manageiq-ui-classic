// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Host Initiator Group Form Loads data and renders 1`] = `
<Provider
  store={
    Object {
      "asyncReducers": Object {
        "FormButtons": [Function],
        "miqCustomTabReducer": [Function],
        "notificationReducer": [Function],
      },
      "dispatch": [Function],
      "getState": [Function],
      "injectReducers": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <HostInitiatorGroupForm>
    <div>
      <Connect(MiqFormRenderer)
        buttonsLabels={
          Object {
            "submitLabel": "Add",
          }
        }
        canReset={false}
        onCancel={[Function]}
        onReset={[Function]}
        onSubmit={[Function]}
        schema={
          Object {
            "fields": Array [
              Object {
                "component": "select",
                "id": "ems_id",
                "includeEmpty": true,
                "isDisabled": false,
                "isRequired": true,
                "key": "2",
                "label": "Provider:",
                "loadOptions": [Function],
                "name": "ems_id",
                "onChange": [Function],
                "placeholder": "<Choose>",
                "validate": Array [
                  Object {
                    "type": "required",
                  },
                ],
              },
              Object {
                "component": "text-field",
                "id": "name",
                "isRequired": true,
                "label": "Name:",
                "name": "name",
                "validate": Array [
                  Object {
                    "type": "required",
                  },
                  [Function],
                ],
              },
              Object {
                "component": "select",
                "condition": Object {
                  "isNotEmpty": true,
                  "when": "ems_id",
                },
                "id": "physical_storage_id",
                "includeEmpty": true,
                "isRequired": true,
                "key": "physical_storage_id-2",
                "label": "Physical Storage:",
                "loadOptions": [Function],
                "name": "physical_storage_id",
                "placeholder": "<Choose>",
                "validate": Array [
                  Object {
                    "type": "required",
                  },
                ],
              },
            ],
          }
        }
      >
        <MiqFormRenderer
          buttonsLabels={
            Object {
              "submitLabel": "Add",
            }
          }
          canReset={false}
          className="form-react"
          componentMapper={
            Object {
              "checkbox": [Function],
              "code-editor": [Function],
              "date-picker": [Function],
              "dual-list-select": [Function],
              "edit-password-field": [Function],
              "field-array": [Function],
              "file-upload": [Function],
              "font-icon-picker": [Function],
              "font-icon-picker-ddf": [Function],
              "multi-select": [Function],
              "password-field": [Function],
              "plain-text": [Function],
              "radio": [Function],
              "select": [Function],
              "slider": [Function],
              "sub-form": [Function],
              "switch": [Function],
              "tabs": [Function],
              "text-field": [Function],
              "textarea": [Function],
              "time-picker": [Function],
              "tree-selector": [Function],
              "tree-view": [Function],
              "validate-credentials": [Function],
              "wizard": [Function],
            }
          }
          disableSubmit={
            Array [
              "pristine",
              "invalid",
            ]
          }
          dispatch={[Function]}
          onCancel={[Function]}
          onReset={[Function]}
          onSubmit={[Function]}
          schema={
            Object {
              "fields": Array [
                Object {
                  "component": "select",
                  "id": "ems_id",
                  "includeEmpty": true,
                  "isDisabled": false,
                  "isRequired": true,
                  "key": "2",
                  "label": "Provider:",
                  "loadOptions": [Function],
                  "name": "ems_id",
                  "onChange": [Function],
                  "placeholder": "<Choose>",
                  "validate": Array [
                    Object {
                      "type": "required",
                    },
                  ],
                },
                Object {
                  "component": "text-field",
                  "id": "name",
                  "isRequired": true,
                  "label": "Name:",
                  "name": "name",
                  "validate": Array [
                    Object {
                      "type": "required",
                    },
                    [Function],
                  ],
                },
                Object {
                  "component": "select",
                  "condition": Object {
                    "isNotEmpty": true,
                    "when": "ems_id",
                  },
                  "id": "physical_storage_id",
                  "includeEmpty": true,
                  "isRequired": true,
                  "key": "physical_storage_id-2",
                  "label": "Physical Storage:",
                  "loadOptions": [Function],
                  "name": "physical_storage_id",
                  "placeholder": "<Choose>",
                  "validate": Array [
                    Object {
                      "type": "required",
                    },
                  ],
                },
              ],
            }
          }
          showFormControls={true}
        >
          <FormRenderer
            FormTemplate={[Function]}
            clearOnUnmount={false}
            componentMapper={
              Object {
                "checkbox": [Function],
                "code-editor": [Function],
                "date-picker": [Function],
                "dual-list-select": [Function],
                "edit-password-field": [Function],
                "field-array": [Function],
                "file-upload": [Function],
                "font-icon-picker": [Function],
                "font-icon-picker-ddf": [Function],
                "multi-select": [Function],
                "password-field": [Function],
                "plain-text": [Function],
                "radio": [Function],
                "select": [Function],
                "slider": [Function],
                "spy-field": [Function],
                "sub-form": [Function],
                "switch": [Function],
                "tabs": [Function],
                "text-field": [Function],
                "textarea": [Function],
                "time-picker": [Function],
                "tree-selector": [Function],
                "tree-view": [Function],
                "validate-credentials": [Function],
                "wizard": [Function],
              }
            }
            dispatch={[Function]}
            initialValues={Object {}}
            onCancel={[Function]}
            onReset={[Function]}
            onSubmit={[Function]}
            schema={
              Object {
                "fields": Array [
                  Object {
                    "component": "select",
                    "id": "ems_id",
                    "includeEmpty": true,
                    "isDisabled": false,
                    "isRequired": true,
                    "key": "2",
                    "label": "Provider:",
                    "loadOptions": [Function],
                    "name": "ems_id",
                    "onChange": [Function],
                    "placeholder": "<Choose>",
                    "validate": Array [
                      Object {
                        "type": "required",
                      },
                    ],
                  },
                  Object {
                    "component": "text-field",
                    "id": "name",
                    "isRequired": true,
                    "label": "Name:",
                    "name": "name",
                    "validate": Array [
                      Object {
                        "type": "required",
                      },
                      [Function],
                    ],
                  },
                  Object {
                    "component": "select",
                    "condition": Object {
                      "isNotEmpty": true,
                      "when": "ems_id",
                    },
                    "id": "physical_storage_id",
                    "includeEmpty": true,
                    "isRequired": true,
                    "key": "physical_storage_id-2",
                    "label": "Physical Storage:",
                    "loadOptions": [Function],
                    "name": "physical_storage_id",
                    "placeholder": "<Choose>",
                    "validate": Array [
                      Object {
                        "type": "required",
                      },
                    ],
                  },
                  Object {
                    "component": "spy-field",
                    "initialize": undefined,
                    "name": "spy-field",
                  },
                ],
              }
            }
          >
            <ReactFinalForm
              decorators={
                Array [
                  [Function],
                ]
              }
              dispatch={[Function]}
              initialValues={Object {}}
              mutators={
                Object {
                  "concat": [Function],
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "removeBatch": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                }
              }
              onSubmit={[Function]}
              render={[Function]}
              subscription={
                Object {
                  "pristine": true,
                  "submitting": true,
                  "valid": true,
                }
              }
            >
              <Component
                formFields={
                  Array [
                    <SingleField
                      component="select"
                      id="ems_id"
                      includeEmpty={true}
                      isDisabled={false}
                      isRequired={true}
                      label="Provider:"
                      loadOptions={[Function]}
                      name="ems_id"
                      onChange={[Function]}
                      placeholder="<Choose>"
                      validate={
                        Array [
                          Object {
                            "type": "required",
                          },
                        ]
                      }
                    />,
                    <SingleField
                      component="text-field"
                      id="name"
                      isRequired={true}
                      label="Name:"
                      name="name"
                      validate={
                        Array [
                          Object {
                            "type": "required",
                          },
                          [Function],
                        ]
                      }
                    />,
                    <SingleField
                      component="select"
                      condition={
                        Object {
                          "isNotEmpty": true,
                          "when": "ems_id",
                        }
                      }
                      id="physical_storage_id"
                      includeEmpty={true}
                      isRequired={true}
                      label="Physical Storage:"
                      loadOptions={[Function]}
                      name="physical_storage_id"
                      placeholder="<Choose>"
                      validate={
                        Array [
                          Object {
                            "type": "required",
                          },
                        ]
                      }
                    />,
                    <SingleField
                      component="spy-field"
                      name="spy-field"
                    />,
                  ]
                }
                schema={
                  Object {
                    "fields": Array [
                      Object {
                        "component": "select",
                        "id": "ems_id",
                        "includeEmpty": true,
                        "isDisabled": false,
                        "isRequired": true,
                        "key": "2",
                        "label": "Provider:",
                        "loadOptions": [Function],
                        "name": "ems_id",
                        "onChange": [Function],
                        "placeholder": "<Choose>",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "name",
                        "isRequired": true,
                        "label": "Name:",
                        "name": "name",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                          [Function],
                        ],
                      },
                      Object {
                        "component": "select",
                        "condition": Object {
                          "isNotEmpty": true,
                          "when": "ems_id",
                        },
                        "id": "physical_storage_id",
                        "includeEmpty": true,
                        "isRequired": true,
                        "key": "physical_storage_id-2",
                        "label": "Physical Storage:",
                        "loadOptions": [Function],
                        "name": "physical_storage_id",
                        "placeholder": "<Choose>",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "spy-field",
                        "initialize": undefined,
                        "name": "spy-field",
                      },
                    ],
                  }
                }
              >
                <WrappedFormTemplate
                  canReset={false}
                  cancelLabel="Cancel"
                  disableSubmit={
                    Array [
                      "pristine",
                      "invalid",
                    ]
                  }
                  formFields={
                    Array [
                      <SingleField
                        component="select"
                        id="ems_id"
                        includeEmpty={true}
                        isDisabled={false}
                        isRequired={true}
                        label="Provider:"
                        loadOptions={[Function]}
                        name="ems_id"
                        onChange={[Function]}
                        placeholder="<Choose>"
                        validate={
                          Array [
                            Object {
                              "type": "required",
                            },
                          ]
                        }
                      />,
                      <SingleField
                        component="text-field"
                        id="name"
                        isRequired={true}
                        label="Name:"
                        name="name"
                        validate={
                          Array [
                            Object {
                              "type": "required",
                            },
                            [Function],
                          ]
                        }
                      />,
                      <SingleField
                        component="select"
                        condition={
                          Object {
                            "isNotEmpty": true,
                            "when": "ems_id",
                          }
                        }
                        id="physical_storage_id"
                        includeEmpty={true}
                        isRequired={true}
                        label="Physical Storage:"
                        loadOptions={[Function]}
                        name="physical_storage_id"
                        placeholder="<Choose>"
                        validate={
                          Array [
                            Object {
                              "type": "required",
                            },
                          ]
                        }
                      />,
                      <SingleField
                        component="spy-field"
                        name="spy-field"
                      />,
                    ]
                  }
                  formWrapperProps={
                    Object {
                      "className": "form-react",
                    }
                  }
                  resetLabel="Reset"
                  schema={
                    Object {
                      "fields": Array [
                        Object {
                          "component": "select",
                          "id": "ems_id",
                          "includeEmpty": true,
                          "isDisabled": false,
                          "isRequired": true,
                          "key": "2",
                          "label": "Provider:",
                          "loadOptions": [Function],
                          "name": "ems_id",
                          "onChange": [Function],
                          "placeholder": "<Choose>",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "name",
                          "isRequired": true,
                          "label": "Name:",
                          "name": "name",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                            [Function],
                          ],
                        },
                        Object {
                          "component": "select",
                          "condition": Object {
                            "isNotEmpty": true,
                            "when": "ems_id",
                          },
                          "id": "physical_storage_id",
                          "includeEmpty": true,
                          "isRequired": true,
                          "key": "physical_storage_id-2",
                          "label": "Physical Storage:",
                          "loadOptions": [Function],
                          "name": "physical_storage_id",
                          "placeholder": "<Choose>",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "spy-field",
                          "initialize": undefined,
                          "name": "spy-field",
                        },
                      ],
                    }
                  }
                  showFormControls={true}
                  submitLabel="Add"
                >
                  <FormTemplate
                    Button={[Function]}
                    ButtonGroup={[Function]}
                    Description={[Function]}
                    FormWrapper={[Function]}
                    Header={[Function]}
                    Title={[Function]}
                    buttonOrder={
                      Array [
                        "submit",
                        "reset",
                        "cancel",
                      ]
                    }
                    canReset={false}
                    cancelLabel="Cancel"
                    disableSubmit={
                      Array [
                        "pristine",
                        "invalid",
                      ]
                    }
                    formFields={
                      Array [
                        <SingleField
                          component="select"
                          id="ems_id"
                          includeEmpty={true}
                          isDisabled={false}
                          isRequired={true}
                          label="Provider:"
                          loadOptions={[Function]}
                          name="ems_id"
                          onChange={[Function]}
                          placeholder="<Choose>"
                          validate={
                            Array [
                              Object {
                                "type": "required",
                              },
                            ]
                          }
                        />,
                        <SingleField
                          component="text-field"
                          id="name"
                          isRequired={true}
                          label="Name:"
                          name="name"
                          validate={
                            Array [
                              Object {
                                "type": "required",
                              },
                              [Function],
                            ]
                          }
                        />,
                        <SingleField
                          component="select"
                          condition={
                            Object {
                              "isNotEmpty": true,
                              "when": "ems_id",
                            }
                          }
                          id="physical_storage_id"
                          includeEmpty={true}
                          isRequired={true}
                          label="Physical Storage:"
                          loadOptions={[Function]}
                          name="physical_storage_id"
                          placeholder="<Choose>"
                          validate={
                            Array [
                              Object {
                                "type": "required",
                              },
                            ]
                          }
                        />,
                        <SingleField
                          component="spy-field"
                          name="spy-field"
                        />,
                      ]
                    }
                    formWrapperProps={
                      Object {
                        "className": "form-react",
                      }
                    }
                    resetLabel="Reset"
                    schema={
                      Object {
                        "fields": Array [
                          Object {
                            "component": "select",
                            "id": "ems_id",
                            "includeEmpty": true,
                            "isDisabled": false,
                            "isRequired": true,
                            "key": "2",
                            "label": "Provider:",
                            "loadOptions": [Function],
                            "name": "ems_id",
                            "onChange": [Function],
                            "placeholder": "<Choose>",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "name",
                            "isRequired": true,
                            "label": "Name:",
                            "name": "name",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                              [Function],
                            ],
                          },
                          Object {
                            "component": "select",
                            "condition": Object {
                              "isNotEmpty": true,
                              "when": "ems_id",
                            },
                            "id": "physical_storage_id",
                            "includeEmpty": true,
                            "isRequired": true,
                            "key": "physical_storage_id-2",
                            "label": "Physical Storage:",
                            "loadOptions": [Function],
                            "name": "physical_storage_id",
                            "placeholder": "<Choose>",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "spy-field",
                            "initialize": undefined,
                            "name": "spy-field",
                          },
                        ],
                      }
                    }
                    showFormControls={true}
                    submitLabel="Add"
                  >
                    <Form
                      className="form-react"
                      onSubmit={[Function]}
                    >
                      <Form
                        className="form-0-2-3 form-react"
                        noValidate={true}
                        onSubmit={[Function]}
                      >
                        <form
                          className="bx--form form-0-2-3 form-react"
                          noValidate={true}
                          onSubmit={[Function]}
                        >
                           
                          <SingleField
                            component="select"
                            id="ems_id"
                            includeEmpty={true}
                            isDisabled={false}
                            isRequired={true}
                            key="2"
                            label="Provider:"
                            loadOptions={[Function]}
                            name="ems_id"
                            onChange={[Function]}
                            placeholder="<Choose>"
                            validate={
                              Array [
                                Object {
                                  "type": "required",
                                },
                              ]
                            }
                          >
                            <FormConditionWrapper
                              field={
                                Object {
                                  "component": "select",
                                  "id": "ems_id",
                                  "includeEmpty": true,
                                  "isDisabled": false,
                                  "isRequired": true,
                                  "label": "Provider:",
                                  "loadOptions": [Function],
                                  "name": "ems_id",
                                  "onChange": [Function],
                                  "placeholder": "<Choose>",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                }
                              }
                            >
                              <FormFieldHideWrapper
                                hideField={false}
                              >
                                <SelectWithOnChange
                                  component="select"
                                  id="ems_id"
                                  includeEmpty={true}
                                  isDisabled={false}
                                  isRequired={true}
                                  label="Provider:"
                                  loadOptions={[Function]}
                                  name="ems_id"
                                  onChange={[Function]}
                                  placeholder="<Choose>"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                >
                                  <Select
                                    component="select"
                                    id="ems_id"
                                    isDisabled={false}
                                    isRequired={true}
                                    label="Provider:"
                                    loadOptions={[Function]}
                                    loadingMessage="Loading..."
                                    name="ems_id"
                                    placeholder="<Choose>"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <Select
                                      SelectComponent={[Function]}
                                      disabled={false}
                                      id="ems_id"
                                      invalidText=""
                                      labelText={
                                        <IsRequired>
                                          Provider:
                                        </IsRequired>
                                      }
                                      loadOptions={[Function]}
                                      loadOptionsChangeCounter={1}
                                      loadingMessage="Loading..."
                                      name="ems_id"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      placeholder="<Choose>"
                                      simpleValue={false}
                                      value="2"
                                    >
                                      <ClearedSelect
                                        className=""
                                        closeMenuOnSelect={true}
                                        disabled={false}
                                        hideSelectedOptions={false}
                                        id="ems_id"
                                        invalidText=""
                                        isClearable={false}
                                        isFetching={false}
                                        isSearchable={false}
                                        labelText={
                                          <IsRequired>
                                            Provider:
                                          </IsRequired>
                                        }
                                        name="ems_id"
                                        noOptionsMessage={[Function]}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        onInputChange={[Function]}
                                        options={
                                          Array [
                                            Object {
                                              "label": "<Choose>",
                                              "value": undefined,
                                            },
                                            Object {
                                              "label": "172",
                                              "value": "2",
                                            },
                                          ]
                                        }
                                        placeholder="<Choose>"
                                        value="2"
                                      >
                                        <Select
                                          className=""
                                          disabled={false}
                                          helperText=""
                                          id="ems_id"
                                          inline={false}
                                          invalid={false}
                                          invalidText=""
                                          labelText={
                                            <IsRequired>
                                              Provider:
                                            </IsRequired>
                                          }
                                          light={false}
                                          name="ems_id"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          value="2"
                                        >
                                          <div
                                            className="bx--form-item"
                                          >
                                            <div
                                              className="bx--select"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="ems_id"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Provider:
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--select-input__wrapper"
                                                data-invalid={null}
                                              >
                                                <select
                                                  className="bx--select-input"
                                                  id="ems_id"
                                                  name="ems_id"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  value="2"
                                                >
                                                  <SelectItem
                                                    disabled={false}
                                                    hidden={false}
                                                    key="0"
                                                    label="<Choose>"
                                                    text="<Choose>"
                                                    value=""
                                                  >
                                                    <option
                                                      className="bx--select-option"
                                                      disabled={false}
                                                      hidden={false}
                                                      label="<Choose>"
                                                      value=""
                                                    >
                                                      &lt;Choose&gt;
                                                    </option>
                                                  </SelectItem>
                                                  <SelectItem
                                                    disabled={false}
                                                    hidden={false}
                                                    key="2"
                                                    label="172"
                                                    text="172"
                                                    value="2"
                                                  >
                                                    <option
                                                      className="bx--select-option"
                                                      disabled={false}
                                                      hidden={false}
                                                      label="172"
                                                      value="2"
                                                    >
                                                      172
                                                    </option>
                                                  </SelectItem>
                                                </select>
                                                <ForwardRef(ChevronDown16)
                                                  className="bx--select__arrow"
                                                >
                                                  <Icon
                                                    className="bx--select__arrow"
                                                    fill="currentColor"
                                                    height={16}
                                                    preserveAspectRatio="xMidYMid meet"
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <svg
                                                      aria-hidden={true}
                                                      className="bx--select__arrow"
                                                      fill="currentColor"
                                                      focusable="false"
                                                      height={16}
                                                      preserveAspectRatio="xMidYMid meet"
                                                      viewBox="0 0 16 16"
                                                      width={16}
                                                      xmlns="http://www.w3.org/2000/svg"
                                                    >
                                                      <path
                                                        d="M8 11L3 6 3.7 5.3 8 9.6 12.3 5.3 13 6z"
                                                      />
                                                    </svg>
                                                  </Icon>
                                                </ForwardRef(ChevronDown16)>
                                              </div>
                                            </div>
                                          </div>
                                        </Select>
                                      </ClearedSelect>
                                    </Select>
                                  </Select>
                                </SelectWithOnChange>
                              </FormFieldHideWrapper>
                            </FormConditionWrapper>
                          </SingleField>
                          <SingleField
                            component="text-field"
                            id="name"
                            isRequired={true}
                            key="name"
                            label="Name:"
                            name="name"
                            validate={
                              Array [
                                Object {
                                  "type": "required",
                                },
                                [Function],
                              ]
                            }
                          >
                            <FormConditionWrapper
                              field={
                                Object {
                                  "component": "text-field",
                                  "id": "name",
                                  "isRequired": true,
                                  "label": "Name:",
                                  "name": "name",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                    [Function],
                                  ],
                                }
                              }
                            >
                              <FormFieldHideWrapper
                                hideField={false}
                              >
                                <TextField
                                  component="text-field"
                                  id="name"
                                  isRequired={true}
                                  label="Name:"
                                  name="name"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                      [Function],
                                    ]
                                  }
                                >
                                  <TextInput
                                    id="name"
                                    invalid={false}
                                    invalidText=""
                                    key="name"
                                    labelText={
                                      <IsRequired>
                                        Name:
                                      </IsRequired>
                                    }
                                    name="name"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    value="my_group"
                                    warn={false}
                                    warnText=""
                                  >
                                    <div
                                      className="bx--form-item bx--text-input-wrapper"
                                    >
                                      <label
                                        className="bx--label"
                                        htmlFor="name"
                                      >
                                        <IsRequired>
                                          <span
                                            aria-hidden="true"
                                            className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                          >
                                            *
                                          </span>
                                          Name:
                                        </IsRequired>
                                      </label>
                                      <div
                                        className="bx--text-input__field-outer-wrapper"
                                      >
                                        <div
                                          className="bx--text-input__field-wrapper"
                                          data-invalid={null}
                                        >
                                          <input
                                            className="bx--text-input bx--text-input--md"
                                            disabled={false}
                                            id="name"
                                            name="name"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onClick={[Function]}
                                            onFocus={[Function]}
                                            type="text"
                                            value="my_group"
                                          />
                                        </div>
                                      </div>
                                    </div>
                                  </TextInput>
                                </TextField>
                              </FormFieldHideWrapper>
                            </FormConditionWrapper>
                          </SingleField>
                          <SingleField
                            component="select"
                            condition={
                              Object {
                                "isNotEmpty": true,
                                "when": "ems_id",
                              }
                            }
                            id="physical_storage_id"
                            includeEmpty={true}
                            isRequired={true}
                            key="physical_storage_id-2"
                            label="Physical Storage:"
                            loadOptions={[Function]}
                            name="physical_storage_id"
                            placeholder="<Choose>"
                            validate={
                              Array [
                                Object {
                                  "type": "required",
                                },
                              ]
                            }
                          >
                            <FormConditionWrapper
                              condition={
                                Object {
                                  "isNotEmpty": true,
                                  "when": "ems_id",
                                }
                              }
                              field={
                                Object {
                                  "component": "select",
                                  "id": "physical_storage_id",
                                  "includeEmpty": true,
                                  "isRequired": true,
                                  "label": "Physical Storage:",
                                  "loadOptions": [Function],
                                  "name": "physical_storage_id",
                                  "placeholder": "<Choose>",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                }
                              }
                            >
                              <ConditionTriggerDetector
                                condition={
                                  Object {
                                    "isNotEmpty": true,
                                    "when": "ems_id",
                                  }
                                }
                                field={
                                  Object {
                                    "component": "select",
                                    "id": "physical_storage_id",
                                    "includeEmpty": true,
                                    "isRequired": true,
                                    "label": "Physical Storage:",
                                    "loadOptions": [Function],
                                    "name": "physical_storage_id",
                                    "placeholder": "<Choose>",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  }
                                }
                                triggers={
                                  Array [
                                    "ems_id",
                                  ]
                                }
                              >
                                <ForwardRef(Field)
                                  name="ems_id"
                                  subscription={
                                    Object {
                                      "value": true,
                                    }
                                  }
                                >
                                  <ConditionTriggerDetector
                                    condition={
                                      Object {
                                        "isNotEmpty": true,
                                        "when": "ems_id",
                                      }
                                    }
                                    field={
                                      Object {
                                        "component": "select",
                                        "id": "physical_storage_id",
                                        "includeEmpty": true,
                                        "isRequired": true,
                                        "label": "Physical Storage:",
                                        "loadOptions": [Function],
                                        "name": "physical_storage_id",
                                        "placeholder": "<Choose>",
                                        "validate": Array [
                                          Object {
                                            "type": "required",
                                          },
                                        ],
                                      }
                                    }
                                    triggers={Array []}
                                    values={
                                      Object {
                                        "ems_id": "2",
                                      }
                                    }
                                  >
                                    <ConditionTriggerWrapper
                                      condition={
                                        Object {
                                          "isNotEmpty": true,
                                          "when": "ems_id",
                                        }
                                      }
                                      field={
                                        Object {
                                          "component": "select",
                                          "id": "physical_storage_id",
                                          "includeEmpty": true,
                                          "isRequired": true,
                                          "label": "Physical Storage:",
                                          "loadOptions": [Function],
                                          "name": "physical_storage_id",
                                          "placeholder": "<Choose>",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                      values={
                                        Object {
                                          "ems_id": "2",
                                        }
                                      }
                                    >
                                      <Component
                                        condition={
                                          Object {
                                            "isNotEmpty": true,
                                            "when": "ems_id",
                                          }
                                        }
                                        field={
                                          Object {
                                            "component": "select",
                                            "id": "physical_storage_id",
                                            "includeEmpty": true,
                                            "isRequired": true,
                                            "label": "Physical Storage:",
                                            "loadOptions": [Function],
                                            "name": "physical_storage_id",
                                            "placeholder": "<Choose>",
                                            "validate": Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ],
                                          }
                                        }
                                        values={
                                          Object {
                                            "ems_id": "2",
                                          }
                                        }
                                      >
                                        <FormFieldHideWrapper
                                          hideField={false}
                                        >
                                          <SelectWithOnChange
                                            component="select"
                                            id="physical_storage_id"
                                            includeEmpty={true}
                                            isRequired={true}
                                            label="Physical Storage:"
                                            loadOptions={[Function]}
                                            name="physical_storage_id"
                                            placeholder="<Choose>"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          >
                                            <Select
                                              component="select"
                                              id="physical_storage_id"
                                              isRequired={true}
                                              label="Physical Storage:"
                                              loadOptions={[Function]}
                                              loadingMessage="Loading..."
                                              name="physical_storage_id"
                                              placeholder="<Choose>"
                                              validate={
                                                Array [
                                                  Object {
                                                    "type": "required",
                                                  },
                                                ]
                                              }
                                            >
                                              <Select
                                                SelectComponent={[Function]}
                                                id="physical_storage_id"
                                                invalidText=""
                                                labelText={
                                                  <IsRequired>
                                                    Physical Storage:
                                                  </IsRequired>
                                                }
                                                loadOptions={[Function]}
                                                loadOptionsChangeCounter={1}
                                                loadingMessage="Loading..."
                                                name="physical_storage_id"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                placeholder="<Choose>"
                                                simpleValue={false}
                                                value="1"
                                              >
                                                <ClearedSelect
                                                  className=""
                                                  closeMenuOnSelect={true}
                                                  hideSelectedOptions={false}
                                                  id="physical_storage_id"
                                                  invalidText=""
                                                  isClearable={false}
                                                  isFetching={false}
                                                  isSearchable={false}
                                                  labelText={
                                                    <IsRequired>
                                                      Physical Storage:
                                                    </IsRequired>
                                                  }
                                                  name="physical_storage_id"
                                                  noOptionsMessage={[Function]}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  onInputChange={[Function]}
                                                  options={
                                                    Array [
                                                      Object {
                                                        "label": "<Choose>",
                                                        "value": undefined,
                                                      },
                                                      Object {
                                                        "label": "178",
                                                        "value": 1,
                                                      },
                                                      Object {
                                                        "label": "179",
                                                        "value": 2,
                                                      },
                                                    ]
                                                  }
                                                  placeholder="<Choose>"
                                                  value="1"
                                                >
                                                  <Select
                                                    className=""
                                                    disabled={false}
                                                    helperText=""
                                                    id="physical_storage_id"
                                                    inline={false}
                                                    invalid={false}
                                                    invalidText=""
                                                    labelText={
                                                      <IsRequired>
                                                        Physical Storage:
                                                      </IsRequired>
                                                    }
                                                    light={false}
                                                    name="physical_storage_id"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    value="1"
                                                  >
                                                    <div
                                                      className="bx--form-item"
                                                    >
                                                      <div
                                                        className="bx--select"
                                                      >
                                                        <label
                                                          className="bx--label"
                                                          htmlFor="physical_storage_id"
                                                        >
                                                          <IsRequired>
                                                            <span
                                                              aria-hidden="true"
                                                              className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                            >
                                                              *
                                                            </span>
                                                            Physical Storage:
                                                          </IsRequired>
                                                        </label>
                                                        <div
                                                          className="bx--select-input__wrapper"
                                                          data-invalid={null}
                                                        >
                                                          <select
                                                            className="bx--select-input"
                                                            id="physical_storage_id"
                                                            name="physical_storage_id"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            value="1"
                                                          >
                                                            <SelectItem
                                                              disabled={false}
                                                              hidden={false}
                                                              key="0"
                                                              label="<Choose>"
                                                              text="<Choose>"
                                                              value=""
                                                            >
                                                              <option
                                                                className="bx--select-option"
                                                                disabled={false}
                                                                hidden={false}
                                                                label="<Choose>"
                                                                value=""
                                                              >
                                                                &lt;Choose&gt;
                                                              </option>
                                                            </SelectItem>
                                                            <SelectItem
                                                              disabled={false}
                                                              hidden={false}
                                                              key="1"
                                                              label="178"
                                                              text="178"
                                                              value={1}
                                                            >
                                                              <option
                                                                className="bx--select-option"
                                                                disabled={false}
                                                                hidden={false}
                                                                label="178"
                                                                value={1}
                                                              >
                                                                178
                                                              </option>
                                                            </SelectItem>
                                                            <SelectItem
                                                              disabled={false}
                                                              hidden={false}
                                                              key="2"
                                                              label="179"
                                                              text="179"
                                                              value={2}
                                                            >
                                                              <option
                                                                className="bx--select-option"
                                                                disabled={false}
                                                                hidden={false}
                                                                label="179"
                                                                value={2}
                                                              >
                                                                179
                                                              </option>
                                                            </SelectItem>
                                                          </select>
                                                          <ForwardRef(ChevronDown16)
                                                            className="bx--select__arrow"
                                                          >
                                                            <Icon
                                                              className="bx--select__arrow"
                                                              fill="currentColor"
                                                              height={16}
                                                              preserveAspectRatio="xMidYMid meet"
                                                              viewBox="0 0 16 16"
                                                              width={16}
                                                              xmlns="http://www.w3.org/2000/svg"
                                                            >
                                                              <svg
                                                                aria-hidden={true}
                                                                className="bx--select__arrow"
                                                                fill="currentColor"
                                                                focusable="false"
                                                                height={16}
                                                                preserveAspectRatio="xMidYMid meet"
                                                                viewBox="0 0 16 16"
                                                                width={16}
                                                                xmlns="http://www.w3.org/2000/svg"
                                                              >
                                                                <path
                                                                  d="M8 11L3 6 3.7 5.3 8 9.6 12.3 5.3 13 6z"
                                                                />
                                                              </svg>
                                                            </Icon>
                                                          </ForwardRef(ChevronDown16)>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </Select>
                                                </ClearedSelect>
                                              </Select>
                                            </Select>
                                          </SelectWithOnChange>
                                        </FormFieldHideWrapper>
                                      </Component>
                                    </ConditionTriggerWrapper>
                                  </ConditionTriggerDetector>
                                </ForwardRef(Field)>
                              </ConditionTriggerDetector>
                            </FormConditionWrapper>
                          </SingleField>
                          <SingleField
                            component="spy-field"
                            key="spy-field"
                            name="spy-field"
                          >
                            <FormConditionWrapper
                              field={
                                Object {
                                  "component": "spy-field",
                                  "initialize": undefined,
                                  "name": "spy-field",
                                }
                              }
                            >
                              <FormFieldHideWrapper
                                hideField={false}
                              >
                                <SpyField
                                  component="spy-field"
                                  name="spy-field"
                                >
                                  <FormSpy
                                    onChange={[Function]}
                                    subscription={
                                      Object {
                                        "pristine": true,
                                        "valid": true,
                                      }
                                    }
                                  />
                                </SpyField>
                              </FormFieldHideWrapper>
                            </FormConditionWrapper>
                          </SingleField>
                          <FormSpy>
                            <FormControls
                              Button={[Function]}
                              ButtonGroup={[Function]}
                              FormSpy={[Function]}
                              buttonOrder={
                                Array [
                                  "submit",
                                  "reset",
                                  "cancel",
                                ]
                              }
                              canReset={false}
                              cancelLabel="Cancel"
                              formFields={
                                Array [
                                  <SingleField
                                    component="select"
                                    id="ems_id"
                                    includeEmpty={true}
                                    isDisabled={false}
                                    isRequired={true}
                                    label="Provider:"
                                    loadOptions={[Function]}
                                    name="ems_id"
                                    onChange={[Function]}
                                    placeholder="<Choose>"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  />,
                                  <SingleField
                                    component="text-field"
                                    id="name"
                                    isRequired={true}
                                    label="Name:"
                                    name="name"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                        [Function],
                                      ]
                                    }
                                  />,
                                  <SingleField
                                    component="select"
                                    condition={
                                      Object {
                                        "isNotEmpty": true,
                                        "when": "ems_id",
                                      }
                                    }
                                    id="physical_storage_id"
                                    includeEmpty={true}
                                    isRequired={true}
                                    label="Physical Storage:"
                                    loadOptions={[Function]}
                                    name="physical_storage_id"
                                    placeholder="<Choose>"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  />,
                                  <SingleField
                                    component="spy-field"
                                    name="spy-field"
                                  />,
                                ]
                              }
                              formSpyProps={
                                Object {
                                  "active": undefined,
                                  "dirty": true,
                                  "dirtyFields": Object {
                                    "ems_id": true,
                                    "name": true,
                                    "physical_storage_id": true,
                                  },
                                  "dirtyFieldsSinceLastSubmit": Object {
                                    "ems_id": true,
                                    "name": true,
                                    "physical_storage_id": true,
                                  },
                                  "dirtySinceLastSubmit": false,
                                  "error": undefined,
                                  "errors": Object {},
                                  "form": Object {
                                    "batch": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "destroyOnUnregister": false,
                                    "focus": [Function],
                                    "getFieldState": [Function],
                                    "getRegisteredFields": [Function],
                                    "getState": [Function],
                                    "initialize": [Function],
                                    "isValidationPaused": [Function],
                                    "mutators": Object {
                                      "concat": [Function],
                                      "insert": [Function],
                                      "move": [Function],
                                      "pop": [Function],
                                      "push": [Function],
                                      "remove": [Function],
                                      "removeBatch": [Function],
                                      "shift": [Function],
                                      "swap": [Function],
                                      "unshift": [Function],
                                      "update": [Function],
                                    },
                                    "pauseValidation": [Function],
                                    "registerField": [Function],
                                    "reset": [Function],
                                    "resetFieldState": [Function],
                                    "restart": [Function],
                                    "resumeValidation": [Function],
                                    "setConfig": [Function],
                                    "submit": [Function],
                                    "subscribe": [Function],
                                  },
                                  "hasSubmitErrors": false,
                                  "hasValidationErrors": false,
                                  "initialValues": Object {},
                                  "invalid": false,
                                  "modified": Object {
                                    "ems_id": false,
                                    "name": true,
                                    "physical_storage_id": true,
                                  },
                                  "modifiedSinceLastSubmit": false,
                                  "pristine": false,
                                  "submitError": undefined,
                                  "submitErrors": undefined,
                                  "submitFailed": false,
                                  "submitSucceeded": false,
                                  "submitting": false,
                                  "touched": Object {
                                    "ems_id": false,
                                    "name": false,
                                    "physical_storage_id": false,
                                  },
                                  "valid": true,
                                  "validating": false,
                                  "values": Object {
                                    "ems_id": "2",
                                    "name": "my_group",
                                    "physical_storage_id": "1",
                                  },
                                  "visited": Object {
                                    "ems_id": false,
                                    "name": false,
                                    "physical_storage_id": false,
                                  },
                                }
                              }
                              onCancel={[Function]}
                              onReset={[Function]}
                              resetLabel="Reset"
                              schema={
                                Object {
                                  "fields": Array [
                                    Object {
                                      "component": "select",
                                      "id": "ems_id",
                                      "includeEmpty": true,
                                      "isDisabled": false,
                                      "isRequired": true,
                                      "key": "2",
                                      "label": "Provider:",
                                      "loadOptions": [Function],
                                      "name": "ems_id",
                                      "onChange": [Function],
                                      "placeholder": "<Choose>",
                                      "validate": Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ],
                                    },
                                    Object {
                                      "component": "text-field",
                                      "id": "name",
                                      "isRequired": true,
                                      "label": "Name:",
                                      "name": "name",
                                      "validate": Array [
                                        Object {
                                          "type": "required",
                                        },
                                        [Function],
                                      ],
                                    },
                                    Object {
                                      "component": "select",
                                      "condition": Object {
                                        "isNotEmpty": true,
                                        "when": "ems_id",
                                      },
                                      "id": "physical_storage_id",
                                      "includeEmpty": true,
                                      "isRequired": true,
                                      "key": "physical_storage_id-2",
                                      "label": "Physical Storage:",
                                      "loadOptions": [Function],
                                      "name": "physical_storage_id",
                                      "placeholder": "<Choose>",
                                      "validate": Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ],
                                    },
                                    Object {
                                      "component": "spy-field",
                                      "initialize": undefined,
                                      "name": "spy-field",
                                    },
                                  ],
                                }
                              }
                              submitLabel="Add"
                            >
                              <ButtonGroup>
                                <ButtonSet
                                  className=""
                                >
                                  <div
                                    className="bx--btn-set"
                                  >
                                    <Button
                                      buttonType="submit"
                                      key="form-submit"
                                      label="Add"
                                      type="submit"
                                      variant="primary"
                                    >
                                      <Button
                                        kind="primary"
                                        type="submit"
                                        variant="primary"
                                      >
                                        <button
                                          aria-describedby={null}
                                          aria-pressed={null}
                                          className="bx--btn bx--btn--primary"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                          tabIndex={0}
                                          type="submit"
                                          variant="primary"
                                        >
                                          Add
                                        </button>
                                      </Button>
                                    </Button>
                                    <Button
                                      buttonType="cancel"
                                      key="form-cancel"
                                      label="Cancel"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <Button
                                        kind="secondary"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <button
                                          aria-describedby={null}
                                          aria-pressed={null}
                                          className="bx--btn bx--btn--secondary"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                          tabIndex={0}
                                          type="button"
                                        >
                                          Cancel
                                        </button>
                                      </Button>
                                    </Button>
                                  </div>
                                </ButtonSet>
                              </ButtonGroup>
                            </FormControls>
                          </FormSpy>
                           
                        </form>
                      </Form>
                    </Form>
                  </FormTemplate>
                </WrappedFormTemplate>
              </Component>
            </ReactFinalForm>
          </FormRenderer>
        </MiqFormRenderer>
      </Connect(MiqFormRenderer)>
    </div>
  </HostInitiatorGroupForm>
</Provider>
`;
