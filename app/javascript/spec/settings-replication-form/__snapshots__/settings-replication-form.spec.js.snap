// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SettingsReplicationForm Form Component display a button for adding subscription when replication type is global 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <SettingsReplicationForm
    pglogicalReplicationFormId="new"
  >
    <div>
      <Connect(MiqFormRenderer)
        buttonsLabels={
          Object {
            "submitLabel": "Save",
          }
        }
        canReset={true}
        componentMapper={
          Object {
            "checkbox": [Function],
            "code-editor": [Function],
            "date-picker": [Function],
            "dual-list-select": [Function],
            "edit-password-field": [Function],
            "field-array": [Function],
            "file-upload": [Function],
            "font-icon-picker": [Function],
            "font-icon-picker-ddf": [Function],
            "key-value-list": [Function],
            "multi-select": [Function],
            "password-field": [Function],
            "plain-text": [Function],
            "radio": [Function],
            "select": [Function],
            "slider": [Function],
            "sub-form": [Function],
            "subscriptions-table": [Function],
            "switch": [Function],
            "tabs": [Function],
            "text-field": [Function],
            "textarea": [Function],
            "time-picker": [Function],
            "tree-selector": [Function],
            "tree-view": [Function],
            "validate-credentials": [Function],
            "wizard": [Function],
          }
        }
        onCancel={[Function]}
        onSubmit={[Function]}
        schema={
          Object {
            "fields": Array [
              Object {
                "component": "select",
                "id": "replication_type",
                "initialValue": "global",
                "label": "Type",
                "name": "replication_type",
                "onChange": [Function],
                "options": Array [
                  Object {
                    "label": "<None>",
                    "value": "none",
                  },
                  Object {
                    "label": "Global",
                    "value": "global",
                  },
                  Object {
                    "label": "Remote",
                    "value": "remote",
                  },
                ],
              },
              Object {
                "component": "sub-form",
                "condition": Object {
                  "is": "global",
                  "when": "replication_type",
                },
                "fields": Array [
                  Object {
                    "addButtonLabel": "Add Subscription",
                    "component": "subscriptions-table",
                    "id": "subscriptions-table",
                    "name": "subscriptions-table",
                    "onButtonClick": [Function],
                    "onCellClick": [Function],
                    "rows": Array [],
                  },
                ],
                "id": "subscriptions_section",
                "key": true,
                "name": "subscriptions_section",
              },
            ],
          }
        }
      >
        <MiqFormRenderer
          buttonsLabels={
            Object {
              "submitLabel": "Save",
            }
          }
          canReset={true}
          className="form-react"
          componentMapper={
            Object {
              "checkbox": [Function],
              "code-editor": [Function],
              "date-picker": [Function],
              "dual-list-select": [Function],
              "edit-password-field": [Function],
              "field-array": [Function],
              "file-upload": [Function],
              "font-icon-picker": [Function],
              "font-icon-picker-ddf": [Function],
              "key-value-list": [Function],
              "multi-select": [Function],
              "password-field": [Function],
              "plain-text": [Function],
              "radio": [Function],
              "select": [Function],
              "slider": [Function],
              "sub-form": [Function],
              "subscriptions-table": [Function],
              "switch": [Function],
              "tabs": [Function],
              "text-field": [Function],
              "textarea": [Function],
              "time-picker": [Function],
              "tree-selector": [Function],
              "tree-view": [Function],
              "validate-credentials": [Function],
              "wizard": [Function],
            }
          }
          disableSubmit={
            Array [
              "pristine",
              "invalid",
            ]
          }
          dispatch={[Function]}
          onCancel={[Function]}
          onSubmit={[Function]}
          schema={
            Object {
              "fields": Array [
                Object {
                  "component": "select",
                  "id": "replication_type",
                  "initialValue": "global",
                  "label": "Type",
                  "name": "replication_type",
                  "onChange": [Function],
                  "options": Array [
                    Object {
                      "label": "<None>",
                      "value": "none",
                    },
                    Object {
                      "label": "Global",
                      "value": "global",
                    },
                    Object {
                      "label": "Remote",
                      "value": "remote",
                    },
                  ],
                },
                Object {
                  "component": "sub-form",
                  "condition": Object {
                    "is": "global",
                    "when": "replication_type",
                  },
                  "fields": Array [
                    Object {
                      "addButtonLabel": "Add Subscription",
                      "component": "subscriptions-table",
                      "id": "subscriptions-table",
                      "name": "subscriptions-table",
                      "onButtonClick": [Function],
                      "onCellClick": [Function],
                      "rows": Array [],
                    },
                  ],
                  "id": "subscriptions_section",
                  "key": true,
                  "name": "subscriptions_section",
                },
              ],
            }
          }
          showFormControls={true}
        >
          <FormRenderer
            FormTemplate={[Function]}
            clearOnUnmount={false}
            componentMapper={
              Object {
                "checkbox": [Function],
                "code-editor": [Function],
                "date-picker": [Function],
                "dual-list-select": [Function],
                "edit-password-field": [Function],
                "field-array": [Function],
                "file-upload": [Function],
                "font-icon-picker": [Function],
                "font-icon-picker-ddf": [Function],
                "key-value-list": [Function],
                "multi-select": [Function],
                "password-field": [Function],
                "plain-text": [Function],
                "radio": [Function],
                "select": [Function],
                "slider": [Function],
                "spy-field": [Function],
                "sub-form": [Function],
                "subscriptions-table": [Function],
                "switch": [Function],
                "tabs": [Function],
                "text-field": [Function],
                "textarea": [Function],
                "time-picker": [Function],
                "tree-selector": [Function],
                "tree-view": [Function],
                "validate-credentials": [Function],
                "wizard": [Function],
              }
            }
            dispatch={[Function]}
            initialValues={Object {}}
            onCancel={[Function]}
            onReset={[Function]}
            onSubmit={[Function]}
            schema={
              Object {
                "fields": Array [
                  Object {
                    "component": "select",
                    "id": "replication_type",
                    "initialValue": "global",
                    "label": "Type",
                    "name": "replication_type",
                    "onChange": [Function],
                    "options": Array [
                      Object {
                        "label": "<None>",
                        "value": "none",
                      },
                      Object {
                        "label": "Global",
                        "value": "global",
                      },
                      Object {
                        "label": "Remote",
                        "value": "remote",
                      },
                    ],
                  },
                  Object {
                    "component": "sub-form",
                    "condition": Object {
                      "is": "global",
                      "when": "replication_type",
                    },
                    "fields": Array [
                      Object {
                        "addButtonLabel": "Add Subscription",
                        "component": "subscriptions-table",
                        "id": "subscriptions-table",
                        "name": "subscriptions-table",
                        "onButtonClick": [Function],
                        "onCellClick": [Function],
                        "rows": Array [],
                      },
                    ],
                    "id": "subscriptions_section",
                    "key": true,
                    "name": "subscriptions_section",
                  },
                  Object {
                    "component": "spy-field",
                    "initialize": undefined,
                    "name": "spy-field",
                  },
                ],
              }
            }
          >
            <ReactFinalForm
              decorators={
                Array [
                  [Function],
                ]
              }
              dispatch={[Function]}
              initialValues={Object {}}
              mutators={
                Object {
                  "concat": [Function],
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "removeBatch": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                }
              }
              onSubmit={[Function]}
              render={[Function]}
              subscription={
                Object {
                  "pristine": true,
                  "submitting": true,
                  "valid": true,
                }
              }
            >
              <Component
                formFields={
                  Array [
                    <SingleField
                      component="select"
                      id="replication_type"
                      initialValue="global"
                      label="Type"
                      name="replication_type"
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "<None>",
                            "value": "none",
                          },
                          Object {
                            "label": "Global",
                            "value": "global",
                          },
                          Object {
                            "label": "Remote",
                            "value": "remote",
                          },
                        ]
                      }
                    />,
                    <SingleField
                      component="sub-form"
                      condition={
                        Object {
                          "is": "global",
                          "when": "replication_type",
                        }
                      }
                      fields={
                        Array [
                          Object {
                            "addButtonLabel": "Add Subscription",
                            "component": "subscriptions-table",
                            "id": "subscriptions-table",
                            "name": "subscriptions-table",
                            "onButtonClick": [Function],
                            "onCellClick": [Function],
                            "rows": Array [],
                          },
                        ]
                      }
                      id="subscriptions_section"
                      name="subscriptions_section"
                    />,
                    <SingleField
                      component="spy-field"
                      name="spy-field"
                    />,
                  ]
                }
                schema={
                  Object {
                    "fields": Array [
                      Object {
                        "component": "select",
                        "id": "replication_type",
                        "initialValue": "global",
                        "label": "Type",
                        "name": "replication_type",
                        "onChange": [Function],
                        "options": Array [
                          Object {
                            "label": "<None>",
                            "value": "none",
                          },
                          Object {
                            "label": "Global",
                            "value": "global",
                          },
                          Object {
                            "label": "Remote",
                            "value": "remote",
                          },
                        ],
                      },
                      Object {
                        "component": "sub-form",
                        "condition": Object {
                          "is": "global",
                          "when": "replication_type",
                        },
                        "fields": Array [
                          Object {
                            "addButtonLabel": "Add Subscription",
                            "component": "subscriptions-table",
                            "id": "subscriptions-table",
                            "name": "subscriptions-table",
                            "onButtonClick": [Function],
                            "onCellClick": [Function],
                            "rows": Array [],
                          },
                        ],
                        "id": "subscriptions_section",
                        "key": true,
                        "name": "subscriptions_section",
                      },
                      Object {
                        "component": "spy-field",
                        "initialize": undefined,
                        "name": "spy-field",
                      },
                    ],
                  }
                }
              >
                <WrappedFormTemplate
                  canReset={true}
                  cancelLabel="Cancel"
                  disableSubmit={
                    Array [
                      "pristine",
                      "invalid",
                    ]
                  }
                  formFields={
                    Array [
                      <SingleField
                        component="select"
                        id="replication_type"
                        initialValue="global"
                        label="Type"
                        name="replication_type"
                        onChange={[Function]}
                        options={
                          Array [
                            Object {
                              "label": "<None>",
                              "value": "none",
                            },
                            Object {
                              "label": "Global",
                              "value": "global",
                            },
                            Object {
                              "label": "Remote",
                              "value": "remote",
                            },
                          ]
                        }
                      />,
                      <SingleField
                        component="sub-form"
                        condition={
                          Object {
                            "is": "global",
                            "when": "replication_type",
                          }
                        }
                        fields={
                          Array [
                            Object {
                              "addButtonLabel": "Add Subscription",
                              "component": "subscriptions-table",
                              "id": "subscriptions-table",
                              "name": "subscriptions-table",
                              "onButtonClick": [Function],
                              "onCellClick": [Function],
                              "rows": Array [],
                            },
                          ]
                        }
                        id="subscriptions_section"
                        name="subscriptions_section"
                      />,
                      <SingleField
                        component="spy-field"
                        name="spy-field"
                      />,
                    ]
                  }
                  formWrapperProps={
                    Object {
                      "className": "form-react",
                    }
                  }
                  resetLabel="Reset"
                  schema={
                    Object {
                      "fields": Array [
                        Object {
                          "component": "select",
                          "id": "replication_type",
                          "initialValue": "global",
                          "label": "Type",
                          "name": "replication_type",
                          "onChange": [Function],
                          "options": Array [
                            Object {
                              "label": "<None>",
                              "value": "none",
                            },
                            Object {
                              "label": "Global",
                              "value": "global",
                            },
                            Object {
                              "label": "Remote",
                              "value": "remote",
                            },
                          ],
                        },
                        Object {
                          "component": "sub-form",
                          "condition": Object {
                            "is": "global",
                            "when": "replication_type",
                          },
                          "fields": Array [
                            Object {
                              "addButtonLabel": "Add Subscription",
                              "component": "subscriptions-table",
                              "id": "subscriptions-table",
                              "name": "subscriptions-table",
                              "onButtonClick": [Function],
                              "onCellClick": [Function],
                              "rows": Array [],
                            },
                          ],
                          "id": "subscriptions_section",
                          "key": true,
                          "name": "subscriptions_section",
                        },
                        Object {
                          "component": "spy-field",
                          "initialize": undefined,
                          "name": "spy-field",
                        },
                      ],
                    }
                  }
                  showFormControls={true}
                  submitLabel="Save"
                >
                  <FormTemplate
                    Button={[Function]}
                    ButtonGroup={[Function]}
                    Description={[Function]}
                    FormWrapper={[Function]}
                    Header={[Function]}
                    Title={[Function]}
                    buttonOrder={
                      Array [
                        "submit",
                        "reset",
                        "cancel",
                      ]
                    }
                    canReset={true}
                    cancelLabel="Cancel"
                    disableSubmit={
                      Array [
                        "pristine",
                        "invalid",
                      ]
                    }
                    formFields={
                      Array [
                        <SingleField
                          component="select"
                          id="replication_type"
                          initialValue="global"
                          label="Type"
                          name="replication_type"
                          onChange={[Function]}
                          options={
                            Array [
                              Object {
                                "label": "<None>",
                                "value": "none",
                              },
                              Object {
                                "label": "Global",
                                "value": "global",
                              },
                              Object {
                                "label": "Remote",
                                "value": "remote",
                              },
                            ]
                          }
                        />,
                        <SingleField
                          component="sub-form"
                          condition={
                            Object {
                              "is": "global",
                              "when": "replication_type",
                            }
                          }
                          fields={
                            Array [
                              Object {
                                "addButtonLabel": "Add Subscription",
                                "component": "subscriptions-table",
                                "id": "subscriptions-table",
                                "name": "subscriptions-table",
                                "onButtonClick": [Function],
                                "onCellClick": [Function],
                                "rows": Array [],
                              },
                            ]
                          }
                          id="subscriptions_section"
                          name="subscriptions_section"
                        />,
                        <SingleField
                          component="spy-field"
                          name="spy-field"
                        />,
                      ]
                    }
                    formWrapperProps={
                      Object {
                        "className": "form-react",
                      }
                    }
                    resetLabel="Reset"
                    schema={
                      Object {
                        "fields": Array [
                          Object {
                            "component": "select",
                            "id": "replication_type",
                            "initialValue": "global",
                            "label": "Type",
                            "name": "replication_type",
                            "onChange": [Function],
                            "options": Array [
                              Object {
                                "label": "<None>",
                                "value": "none",
                              },
                              Object {
                                "label": "Global",
                                "value": "global",
                              },
                              Object {
                                "label": "Remote",
                                "value": "remote",
                              },
                            ],
                          },
                          Object {
                            "component": "sub-form",
                            "condition": Object {
                              "is": "global",
                              "when": "replication_type",
                            },
                            "fields": Array [
                              Object {
                                "addButtonLabel": "Add Subscription",
                                "component": "subscriptions-table",
                                "id": "subscriptions-table",
                                "name": "subscriptions-table",
                                "onButtonClick": [Function],
                                "onCellClick": [Function],
                                "rows": Array [],
                              },
                            ],
                            "id": "subscriptions_section",
                            "key": true,
                            "name": "subscriptions_section",
                          },
                          Object {
                            "component": "spy-field",
                            "initialize": undefined,
                            "name": "spy-field",
                          },
                        ],
                      }
                    }
                    showFormControls={true}
                    submitLabel="Save"
                  >
                    <Form
                      className="form-react"
                      onSubmit={[Function]}
                    >
                      <Form
                        className="form-0-2-3 form-react"
                        noValidate={true}
                        onSubmit={[Function]}
                      >
                        <form
                          className="bx--form form-0-2-3 form-react"
                          noValidate={true}
                          onSubmit={[Function]}
                        >
                           
                          <SingleField
                            component="select"
                            id="replication_type"
                            initialValue="global"
                            key="replication_type"
                            label="Type"
                            name="replication_type"
                            onChange={[Function]}
                            options={
                              Array [
                                Object {
                                  "label": "<None>",
                                  "value": "none",
                                },
                                Object {
                                  "label": "Global",
                                  "value": "global",
                                },
                                Object {
                                  "label": "Remote",
                                  "value": "remote",
                                },
                              ]
                            }
                          >
                            <FormConditionWrapper
                              field={
                                Object {
                                  "component": "select",
                                  "id": "replication_type",
                                  "initialValue": "global",
                                  "label": "Type",
                                  "name": "replication_type",
                                  "onChange": [Function],
                                  "options": Array [
                                    Object {
                                      "label": "<None>",
                                      "value": "none",
                                    },
                                    Object {
                                      "label": "Global",
                                      "value": "global",
                                    },
                                    Object {
                                      "label": "Remote",
                                      "value": "remote",
                                    },
                                  ],
                                }
                              }
                            >
                              <FormFieldHideWrapper
                                hideField={false}
                              >
                                <SelectWithOnChange
                                  component="select"
                                  id="replication_type"
                                  initialValue="global"
                                  label="Type"
                                  name="replication_type"
                                  onChange={[Function]}
                                  options={
                                    Array [
                                      Object {
                                        "label": "<None>",
                                        "value": "none",
                                      },
                                      Object {
                                        "label": "Global",
                                        "value": "global",
                                      },
                                      Object {
                                        "label": "Remote",
                                        "value": "remote",
                                      },
                                    ]
                                  }
                                  placeholder="<Choose>"
                                >
                                  <Select
                                    component="select"
                                    id="replication_type"
                                    initialValue="global"
                                    label="Type"
                                    loadingMessage="Loading..."
                                    name="replication_type"
                                    options={
                                      Array [
                                        Object {
                                          "label": "<None>",
                                          "value": "none",
                                        },
                                        Object {
                                          "label": "Global",
                                          "value": "global",
                                        },
                                        Object {
                                          "label": "Remote",
                                          "value": "remote",
                                        },
                                      ]
                                    }
                                    placeholder="<Choose>"
                                  >
                                    <Select
                                      SelectComponent={[Function]}
                                      id="replication_type"
                                      invalidText=""
                                      labelText="Type"
                                      loadOptionsChangeCounter={1}
                                      loadingMessage="Loading..."
                                      name="replication_type"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      options={
                                        Array [
                                          Object {
                                            "label": "<None>",
                                            "value": "none",
                                          },
                                          Object {
                                            "label": "Global",
                                            "value": "global",
                                          },
                                          Object {
                                            "label": "Remote",
                                            "value": "remote",
                                          },
                                        ]
                                      }
                                      placeholder="<Choose>"
                                      simpleValue={false}
                                      value="global"
                                    >
                                      <ClearedSelect
                                        className=""
                                        closeMenuOnSelect={true}
                                        hideSelectedOptions={false}
                                        id="replication_type"
                                        invalidText=""
                                        isClearable={false}
                                        isFetching={false}
                                        isSearchable={false}
                                        labelText="Type"
                                        name="replication_type"
                                        noOptionsMessage={[Function]}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        onInputChange={[Function]}
                                        options={
                                          Array [
                                            Object {
                                              "label": "<None>",
                                              "value": "none",
                                            },
                                            Object {
                                              "label": "Global",
                                              "value": "global",
                                            },
                                            Object {
                                              "label": "Remote",
                                              "value": "remote",
                                            },
                                          ]
                                        }
                                        placeholder="<Choose>"
                                        value="global"
                                      >
                                        <Select
                                          className=""
                                          disabled={false}
                                          helperText=""
                                          id="replication_type"
                                          inline={false}
                                          invalid={false}
                                          invalidText=""
                                          labelText="Type"
                                          light={false}
                                          name="replication_type"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          value="global"
                                        >
                                          <div
                                            className="bx--form-item"
                                          >
                                            <div
                                              className="bx--select"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="replication_type"
                                              >
                                                Type
                                              </label>
                                              <div
                                                className="bx--select-input__wrapper"
                                                data-invalid={null}
                                              >
                                                <select
                                                  className="bx--select-input"
                                                  id="replication_type"
                                                  name="replication_type"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  value="global"
                                                >
                                                  <SelectItem
                                                    disabled={false}
                                                    hidden={false}
                                                    key="none"
                                                    label="<None>"
                                                    text="<None>"
                                                    value="none"
                                                  >
                                                    <option
                                                      className="bx--select-option"
                                                      disabled={false}
                                                      hidden={false}
                                                      label="<None>"
                                                      value="none"
                                                    >
                                                      &lt;None&gt;
                                                    </option>
                                                  </SelectItem>
                                                  <SelectItem
                                                    disabled={false}
                                                    hidden={false}
                                                    key="global"
                                                    label="Global"
                                                    text="Global"
                                                    value="global"
                                                  >
                                                    <option
                                                      className="bx--select-option"
                                                      disabled={false}
                                                      hidden={false}
                                                      label="Global"
                                                      value="global"
                                                    >
                                                      Global
                                                    </option>
                                                  </SelectItem>
                                                  <SelectItem
                                                    disabled={false}
                                                    hidden={false}
                                                    key="remote"
                                                    label="Remote"
                                                    text="Remote"
                                                    value="remote"
                                                  >
                                                    <option
                                                      className="bx--select-option"
                                                      disabled={false}
                                                      hidden={false}
                                                      label="Remote"
                                                      value="remote"
                                                    >
                                                      Remote
                                                    </option>
                                                  </SelectItem>
                                                </select>
                                                <ForwardRef(ChevronDown16)
                                                  className="bx--select__arrow"
                                                >
                                                  <Icon
                                                    className="bx--select__arrow"
                                                    fill="currentColor"
                                                    height={16}
                                                    preserveAspectRatio="xMidYMid meet"
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <svg
                                                      aria-hidden={true}
                                                      className="bx--select__arrow"
                                                      fill="currentColor"
                                                      focusable="false"
                                                      height={16}
                                                      preserveAspectRatio="xMidYMid meet"
                                                      viewBox="0 0 16 16"
                                                      width={16}
                                                      xmlns="http://www.w3.org/2000/svg"
                                                    >
                                                      <path
                                                        d="M8 11L3 6 3.7 5.3 8 9.6 12.3 5.3 13 6z"
                                                      />
                                                    </svg>
                                                  </Icon>
                                                </ForwardRef(ChevronDown16)>
                                              </div>
                                            </div>
                                          </div>
                                        </Select>
                                      </ClearedSelect>
                                    </Select>
                                  </Select>
                                </SelectWithOnChange>
                              </FormFieldHideWrapper>
                            </FormConditionWrapper>
                          </SingleField>
                          <SingleField
                            component="sub-form"
                            condition={
                              Object {
                                "is": "global",
                                "when": "replication_type",
                              }
                            }
                            fields={
                              Array [
                                Object {
                                  "addButtonLabel": "Add Subscription",
                                  "component": "subscriptions-table",
                                  "id": "subscriptions-table",
                                  "name": "subscriptions-table",
                                  "onButtonClick": [Function],
                                  "onCellClick": [Function],
                                  "rows": Array [],
                                },
                              ]
                            }
                            id="subscriptions_section"
                            key="true"
                            name="subscriptions_section"
                          >
                            <FormConditionWrapper
                              condition={
                                Object {
                                  "is": "global",
                                  "when": "replication_type",
                                }
                              }
                              field={
                                Object {
                                  "component": "sub-form",
                                  "fields": Array [
                                    Object {
                                      "addButtonLabel": "Add Subscription",
                                      "component": "subscriptions-table",
                                      "id": "subscriptions-table",
                                      "name": "subscriptions-table",
                                      "onButtonClick": [Function],
                                      "onCellClick": [Function],
                                      "rows": Array [],
                                    },
                                  ],
                                  "id": "subscriptions_section",
                                  "name": "subscriptions_section",
                                }
                              }
                            >
                              <ConditionTriggerDetector
                                condition={
                                  Object {
                                    "is": "global",
                                    "when": "replication_type",
                                  }
                                }
                                field={
                                  Object {
                                    "component": "sub-form",
                                    "fields": Array [
                                      Object {
                                        "addButtonLabel": "Add Subscription",
                                        "component": "subscriptions-table",
                                        "id": "subscriptions-table",
                                        "name": "subscriptions-table",
                                        "onButtonClick": [Function],
                                        "onCellClick": [Function],
                                        "rows": Array [],
                                      },
                                    ],
                                    "id": "subscriptions_section",
                                    "name": "subscriptions_section",
                                  }
                                }
                                triggers={
                                  Array [
                                    "replication_type",
                                  ]
                                }
                              >
                                <ForwardRef(Field)
                                  name="replication_type"
                                  subscription={
                                    Object {
                                      "value": true,
                                    }
                                  }
                                >
                                  <ConditionTriggerDetector
                                    condition={
                                      Object {
                                        "is": "global",
                                        "when": "replication_type",
                                      }
                                    }
                                    field={
                                      Object {
                                        "component": "sub-form",
                                        "fields": Array [
                                          Object {
                                            "addButtonLabel": "Add Subscription",
                                            "component": "subscriptions-table",
                                            "id": "subscriptions-table",
                                            "name": "subscriptions-table",
                                            "onButtonClick": [Function],
                                            "onCellClick": [Function],
                                            "rows": Array [],
                                          },
                                        ],
                                        "id": "subscriptions_section",
                                        "name": "subscriptions_section",
                                      }
                                    }
                                    triggers={Array []}
                                    values={
                                      Object {
                                        "replication_type": "global",
                                      }
                                    }
                                  >
                                    <ConditionTriggerWrapper
                                      condition={
                                        Object {
                                          "is": "global",
                                          "when": "replication_type",
                                        }
                                      }
                                      field={
                                        Object {
                                          "component": "sub-form",
                                          "fields": Array [
                                            Object {
                                              "addButtonLabel": "Add Subscription",
                                              "component": "subscriptions-table",
                                              "id": "subscriptions-table",
                                              "name": "subscriptions-table",
                                              "onButtonClick": [Function],
                                              "onCellClick": [Function],
                                              "rows": Array [],
                                            },
                                          ],
                                          "id": "subscriptions_section",
                                          "name": "subscriptions_section",
                                        }
                                      }
                                      values={
                                        Object {
                                          "replication_type": "global",
                                        }
                                      }
                                    >
                                      <Component
                                        condition={
                                          Object {
                                            "is": "global",
                                            "when": "replication_type",
                                          }
                                        }
                                        field={
                                          Object {
                                            "component": "sub-form",
                                            "fields": Array [
                                              Object {
                                                "addButtonLabel": "Add Subscription",
                                                "component": "subscriptions-table",
                                                "id": "subscriptions-table",
                                                "name": "subscriptions-table",
                                                "onButtonClick": [Function],
                                                "onCellClick": [Function],
                                                "rows": Array [],
                                              },
                                            ],
                                            "id": "subscriptions_section",
                                            "name": "subscriptions_section",
                                          }
                                        }
                                        values={
                                          Object {
                                            "replication_type": "global",
                                          }
                                        }
                                      >
                                        <FormFieldHideWrapper
                                          hideField={false}
                                        >
                                          <SubForm
                                            DescriptionElement="p"
                                            TitleElement="h3"
                                            component="sub-form"
                                            fields={
                                              Array [
                                                Object {
                                                  "addButtonLabel": "Add Subscription",
                                                  "component": "subscriptions-table",
                                                  "id": "subscriptions-table",
                                                  "name": "subscriptions-table",
                                                  "onButtonClick": [Function],
                                                  "onCellClick": [Function],
                                                  "rows": Array [],
                                                },
                                              ]
                                            }
                                            id="subscriptions_section"
                                            name="subscriptions_section"
                                          >
                                            <div
                                              className=""
                                              id="subscriptions_section"
                                              name="subscriptions_section"
                                            >
                                              <SingleField
                                                addButtonLabel="Add Subscription"
                                                component="subscriptions-table"
                                                id="subscriptions-table"
                                                key="subscriptions-table"
                                                name="subscriptions-table"
                                                onButtonClick={[Function]}
                                                onCellClick={[Function]}
                                                rows={Array []}
                                              >
                                                <FormConditionWrapper
                                                  field={
                                                    Object {
                                                      "addButtonLabel": "Add Subscription",
                                                      "component": "subscriptions-table",
                                                      "id": "subscriptions-table",
                                                      "name": "subscriptions-table",
                                                      "onButtonClick": [Function],
                                                      "onCellClick": [Function],
                                                      "rows": Array [],
                                                    }
                                                  }
                                                >
                                                  <FormFieldHideWrapper
                                                    hideField={false}
                                                  >
                                                    <SubscriptionsTableComponent
                                                      addButtonLabel="Add Subscription"
                                                      component="subscriptions-table"
                                                      id="subscriptions-table"
                                                      name="subscriptions-table"
                                                      onButtonClick={[Function]}
                                                      onCellClick={[Function]}
                                                      rows={Array []}
                                                    >
                                                      <div
                                                        className="subscriptions-section"
                                                      >
                                                        <div
                                                          className="subscriptions-button"
                                                          style={
                                                            Object {
                                                              "display": "flex",
                                                              "flexDirection": "row-reverse",
                                                            }
                                                          }
                                                        >
                                                          <Button
                                                            className="subscription-add bx--btn bx--btn--primary pull-right"
                                                            kind="primary"
                                                            onClick={[Function]}
                                                            type="button"
                                                            variant="contained"
                                                          >
                                                            <button
                                                              aria-describedby={null}
                                                              aria-pressed={null}
                                                              className="subscription-add bx--btn bx--btn--primary pull-right bx--btn bx--btn--primary"
                                                              disabled={false}
                                                              onBlur={[Function]}
                                                              onClick={[Function]}
                                                              onFocus={[Function]}
                                                              onMouseEnter={[Function]}
                                                              onMouseLeave={[Function]}
                                                              tabIndex={0}
                                                              type="button"
                                                              variant="contained"
                                                            >
                                                              Add Subscription
                                                            </button>
                                                          </Button>
                                                        </div>
                                                        <div
                                                          className="subscriptions-table"
                                                          style={
                                                            Object {
                                                              "display": "grid",
                                                              "overflow": "auto",
                                                            }
                                                          }
                                                        >
                                                          <MiqDataTable
                                                            gridChecks={Array []}
                                                            headers={
                                                              Array [
                                                                Object {
                                                                  "header": "Database",
                                                                  "key": "dbname",
                                                                },
                                                                Object {
                                                                  "header": "Host",
                                                                  "key": "host",
                                                                },
                                                                Object {
                                                                  "header": "Username",
                                                                  "key": "user",
                                                                },
                                                                Object {
                                                                  "header": "Password",
                                                                  "key": "password",
                                                                },
                                                                Object {
                                                                  "header": "Port",
                                                                  "key": "port",
                                                                },
                                                                Object {
                                                                  "header": "Backlog",
                                                                  "key": "backlog",
                                                                },
                                                                Object {
                                                                  "header": "Status",
                                                                  "key": "status",
                                                                },
                                                                Object {
                                                                  "header": "Region",
                                                                  "key": "provider_region",
                                                                },
                                                                Object {
                                                                  "header": "Edit",
                                                                  "key": "edit",
                                                                },
                                                                Object {
                                                                  "header": "Validate",
                                                                  "key": "validate",
                                                                },
                                                                Object {
                                                                  "header": "Delete",
                                                                  "key": "delete",
                                                                },
                                                              ]
                                                            }
                                                            mode=""
                                                            onCellClick={[Function]}
                                                            pageOptions={
                                                              Object {
                                                                "page": 1,
                                                                "pageSize": 20,
                                                                "pageSizes": Array [
                                                                  5,
                                                                  10,
                                                                  20,
                                                                  50,
                                                                  100,
                                                                  200,
                                                                ],
                                                                "totalItems": 10,
                                                              }
                                                            }
                                                            rowCheckBox={false}
                                                            rows={Array []}
                                                            showPagination={false}
                                                            size="md"
                                                            sortable={false}
                                                            stickyHeader={false}
                                                            truncateText={true}
                                                          >
                                                            <div
                                                              className="miq-data-table"
                                                            >
                                                              <DataTable
                                                                filterRows={[Function]}
                                                                headers={
                                                                  Array [
                                                                    Object {
                                                                      "header": "Database",
                                                                      "key": "dbname",
                                                                    },
                                                                    Object {
                                                                      "header": "Host",
                                                                      "key": "host",
                                                                    },
                                                                    Object {
                                                                      "header": "Username",
                                                                      "key": "user",
                                                                    },
                                                                    Object {
                                                                      "header": "Password",
                                                                      "key": "password",
                                                                    },
                                                                    Object {
                                                                      "header": "Port",
                                                                      "key": "port",
                                                                    },
                                                                    Object {
                                                                      "header": "Backlog",
                                                                      "key": "backlog",
                                                                    },
                                                                    Object {
                                                                      "header": "Status",
                                                                      "key": "status",
                                                                    },
                                                                    Object {
                                                                      "header": "Region",
                                                                      "key": "provider_region",
                                                                    },
                                                                    Object {
                                                                      "header": "Edit",
                                                                      "key": "edit",
                                                                    },
                                                                    Object {
                                                                      "header": "Validate",
                                                                      "key": "validate",
                                                                    },
                                                                    Object {
                                                                      "header": "Delete",
                                                                      "key": "delete",
                                                                    },
                                                                  ]
                                                                }
                                                                isSortable={false}
                                                                locale="en"
                                                                overflowMenuOnHover={true}
                                                                rows={Array []}
                                                                size="md"
                                                                sortDirection="ASC"
                                                                sortRow={[Function]}
                                                                stickyHeader={false}
                                                                translateWithId={[Function]}
                                                              >
                                                                <Table
                                                                  isSortable={false}
                                                                  overflowMenuOnHover={true}
                                                                  size="md"
                                                                  stickyHeader={false}
                                                                >
                                                                  <div
                                                                    className="bx--data-table-content"
                                                                  >
                                                                    <table
                                                                      className="bx--data-table bx--data-table--md bx--data-table--no-border"
                                                                    >
                                                                      <TableHead>
                                                                        <thead>
                                                                          <TableRow>
                                                                            <tr>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="dbname"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Database
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="host"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Host
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="user"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Username
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="password"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Password
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="port"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Port
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="backlog"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Backlog
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="status"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Status
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="provider_region"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Region
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="edit"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Edit
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="validate"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Validate
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="delete"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Delete
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                            </tr>
                                                                          </TableRow>
                                                                        </thead>
                                                                      </TableHead>
                                                                      <TableBody
                                                                        aria-live="polite"
                                                                      >
                                                                        <tbody
                                                                          aria-live="polite"
                                                                        />
                                                                      </TableBody>
                                                                    </table>
                                                                  </div>
                                                                </Table>
                                                              </DataTable>
                                                            </div>
                                                          </MiqDataTable>
                                                        </div>
                                                      </div>
                                                    </SubscriptionsTableComponent>
                                                  </FormFieldHideWrapper>
                                                </FormConditionWrapper>
                                              </SingleField>
                                            </div>
                                          </SubForm>
                                        </FormFieldHideWrapper>
                                      </Component>
                                    </ConditionTriggerWrapper>
                                  </ConditionTriggerDetector>
                                </ForwardRef(Field)>
                              </ConditionTriggerDetector>
                            </FormConditionWrapper>
                          </SingleField>
                          <SingleField
                            component="spy-field"
                            key="spy-field"
                            name="spy-field"
                          >
                            <FormConditionWrapper
                              field={
                                Object {
                                  "component": "spy-field",
                                  "initialize": undefined,
                                  "name": "spy-field",
                                }
                              }
                            >
                              <FormFieldHideWrapper
                                hideField={false}
                              >
                                <SpyField
                                  component="spy-field"
                                  name="spy-field"
                                >
                                  <FormSpy
                                    onChange={[Function]}
                                    subscription={
                                      Object {
                                        "pristine": true,
                                        "valid": true,
                                      }
                                    }
                                  />
                                </SpyField>
                              </FormFieldHideWrapper>
                            </FormConditionWrapper>
                          </SingleField>
                          <FormSpy>
                            <FormControls
                              Button={[Function]}
                              ButtonGroup={[Function]}
                              FormSpy={[Function]}
                              buttonOrder={
                                Array [
                                  "submit",
                                  "reset",
                                  "cancel",
                                ]
                              }
                              canReset={true}
                              cancelLabel="Cancel"
                              formFields={
                                Array [
                                  <SingleField
                                    component="select"
                                    id="replication_type"
                                    initialValue="global"
                                    label="Type"
                                    name="replication_type"
                                    onChange={[Function]}
                                    options={
                                      Array [
                                        Object {
                                          "label": "<None>",
                                          "value": "none",
                                        },
                                        Object {
                                          "label": "Global",
                                          "value": "global",
                                        },
                                        Object {
                                          "label": "Remote",
                                          "value": "remote",
                                        },
                                      ]
                                    }
                                  />,
                                  <SingleField
                                    component="sub-form"
                                    condition={
                                      Object {
                                        "is": "global",
                                        "when": "replication_type",
                                      }
                                    }
                                    fields={
                                      Array [
                                        Object {
                                          "addButtonLabel": "Add Subscription",
                                          "component": "subscriptions-table",
                                          "id": "subscriptions-table",
                                          "name": "subscriptions-table",
                                          "onButtonClick": [Function],
                                          "onCellClick": [Function],
                                          "rows": Array [],
                                        },
                                      ]
                                    }
                                    id="subscriptions_section"
                                    name="subscriptions_section"
                                  />,
                                  <SingleField
                                    component="spy-field"
                                    name="spy-field"
                                  />,
                                ]
                              }
                              formSpyProps={
                                Object {
                                  "active": undefined,
                                  "dirty": true,
                                  "dirtyFields": Object {
                                    "replication_type": true,
                                  },
                                  "dirtyFieldsSinceLastSubmit": Object {
                                    "replication_type": true,
                                  },
                                  "dirtySinceLastSubmit": false,
                                  "error": undefined,
                                  "errors": Object {},
                                  "form": Object {
                                    "batch": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "destroyOnUnregister": false,
                                    "focus": [Function],
                                    "getFieldState": [Function],
                                    "getRegisteredFields": [Function],
                                    "getState": [Function],
                                    "initialize": [Function],
                                    "isValidationPaused": [Function],
                                    "mutators": Object {
                                      "concat": [Function],
                                      "insert": [Function],
                                      "move": [Function],
                                      "pop": [Function],
                                      "push": [Function],
                                      "remove": [Function],
                                      "removeBatch": [Function],
                                      "shift": [Function],
                                      "swap": [Function],
                                      "unshift": [Function],
                                      "update": [Function],
                                    },
                                    "pauseValidation": [Function],
                                    "registerField": [Function],
                                    "reset": [Function],
                                    "resetFieldState": [Function],
                                    "restart": [Function],
                                    "resumeValidation": [Function],
                                    "setConfig": [Function],
                                    "submit": [Function],
                                    "subscribe": [Function],
                                  },
                                  "hasSubmitErrors": false,
                                  "hasValidationErrors": false,
                                  "initialValues": Object {},
                                  "invalid": false,
                                  "modified": Object {
                                    "replication_type": true,
                                    "subscriptions-table": false,
                                  },
                                  "modifiedSinceLastSubmit": false,
                                  "pristine": false,
                                  "submitError": undefined,
                                  "submitErrors": undefined,
                                  "submitFailed": false,
                                  "submitSucceeded": false,
                                  "submitting": false,
                                  "touched": Object {
                                    "replication_type": false,
                                    "subscriptions-table": false,
                                  },
                                  "valid": true,
                                  "validating": false,
                                  "values": Object {
                                    "replication_type": "global",
                                  },
                                  "visited": Object {
                                    "replication_type": false,
                                    "subscriptions-table": false,
                                  },
                                }
                              }
                              onCancel={[Function]}
                              onReset={[Function]}
                              resetLabel="Reset"
                              schema={
                                Object {
                                  "fields": Array [
                                    Object {
                                      "component": "select",
                                      "id": "replication_type",
                                      "initialValue": "global",
                                      "label": "Type",
                                      "name": "replication_type",
                                      "onChange": [Function],
                                      "options": Array [
                                        Object {
                                          "label": "<None>",
                                          "value": "none",
                                        },
                                        Object {
                                          "label": "Global",
                                          "value": "global",
                                        },
                                        Object {
                                          "label": "Remote",
                                          "value": "remote",
                                        },
                                      ],
                                    },
                                    Object {
                                      "component": "sub-form",
                                      "condition": Object {
                                        "is": "global",
                                        "when": "replication_type",
                                      },
                                      "fields": Array [
                                        Object {
                                          "addButtonLabel": "Add Subscription",
                                          "component": "subscriptions-table",
                                          "id": "subscriptions-table",
                                          "name": "subscriptions-table",
                                          "onButtonClick": [Function],
                                          "onCellClick": [Function],
                                          "rows": Array [],
                                        },
                                      ],
                                      "id": "subscriptions_section",
                                      "key": true,
                                      "name": "subscriptions_section",
                                    },
                                    Object {
                                      "component": "spy-field",
                                      "initialize": undefined,
                                      "name": "spy-field",
                                    },
                                  ],
                                }
                              }
                              submitLabel="Save"
                            >
                              <ButtonGroup>
                                <ButtonSet
                                  className=""
                                >
                                  <div
                                    className="bx--btn-set"
                                  >
                                    <Button
                                      buttonType="submit"
                                      key="form-submit"
                                      label="Save"
                                      type="submit"
                                      variant="primary"
                                    >
                                      <Button
                                        kind="primary"
                                        type="submit"
                                        variant="primary"
                                      >
                                        <button
                                          aria-describedby={null}
                                          aria-pressed={null}
                                          className="bx--btn bx--btn--primary"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                          tabIndex={0}
                                          type="submit"
                                          variant="primary"
                                        >
                                          Save
                                        </button>
                                      </Button>
                                    </Button>
                                    <Button
                                      buttonType="reset"
                                      disabled={false}
                                      key="form-reset"
                                      label="Reset"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <Button
                                        disabled={false}
                                        kind="secondary"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <button
                                          aria-describedby={null}
                                          aria-pressed={null}
                                          className="bx--btn bx--btn--secondary"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                          tabIndex={0}
                                          type="button"
                                        >
                                          Reset
                                        </button>
                                      </Button>
                                    </Button>
                                    <Button
                                      buttonType="cancel"
                                      key="form-cancel"
                                      label="Cancel"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <Button
                                        kind="secondary"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <button
                                          aria-describedby={null}
                                          aria-pressed={null}
                                          className="bx--btn bx--btn--secondary"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                          tabIndex={0}
                                          type="button"
                                        >
                                          Cancel
                                        </button>
                                      </Button>
                                    </Button>
                                  </div>
                                </ButtonSet>
                              </ButtonGroup>
                            </FormControls>
                          </FormSpy>
                           
                        </form>
                      </Form>
                    </Form>
                  </FormTemplate>
                </WrappedFormTemplate>
              </Component>
            </ReactFinalForm>
          </FormRenderer>
        </MiqFormRenderer>
      </Connect(MiqFormRenderer)>
      <Modal
        hasScrollingContent={false}
        modalHeading="Add Subscription"
        modalLabel=""
        onKeyDown={[Function]}
        onRequestClose={[Function]}
        onRequestSubmit={[Function]}
        open={false}
        passiveModal={true}
        preventCloseOnClickOutside={false}
        primaryButtonDisabled={false}
        selectorPrimaryFocus="[data-modal-primary-focus]"
      >
        <div
          className="bx--modal"
          onBlur={[Function]}
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          role="presentation"
        >
          <span
            className="bx--visually-hidden"
            role="link"
            tabIndex="0"
          >
            Focus sentinel
          </span>
          <div
            aria-label="Add Subscription"
            aria-modal="true"
            className="bx--modal-container"
            role="dialog"
            tabIndex="-1"
          >
            <div
              className="bx--modal-header"
            >
              <button
                aria-label="close"
                className="bx--modal-close"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(Close20)
                  aria-hidden="true"
                  className="bx--modal-close__icon"
                  tabIndex="-1"
                >
                  <Icon
                    aria-hidden="true"
                    className="bx--modal-close__icon"
                    fill="currentColor"
                    height={20}
                    preserveAspectRatio="xMidYMid meet"
                    tabIndex="-1"
                    viewBox="0 0 32 32"
                    width={20}
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <svg
                      aria-hidden={true}
                      className="bx--modal-close__icon"
                      fill="currentColor"
                      focusable="false"
                      height={20}
                      preserveAspectRatio="xMidYMid meet"
                      viewBox="0 0 32 32"
                      width={20}
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M17.4141 16L24 9.4141 22.5859 8 16 14.5859 9.4143 8 8 9.4141 14.5859 16 8 22.5859 9.4143 24 16 17.4141 22.5859 24 24 22.5859 17.4141 16z"
                      />
                    </svg>
                  </Icon>
                </ForwardRef(Close20)>
              </button>
              <h3
                className="bx--modal-header__heading"
                id="bx--modal-header__heading--modal-4"
              >
                Add Subscription
              </h3>
            </div>
            <div
              className="bx--modal-content"
              id="bx--modal-body--modal-4"
            >
              <Connect(MiqFormRenderer)
                buttonsLabels={
                  Object {
                    "submitLabel": "Accept",
                  }
                }
                canReset={true}
                componentMapper={
                  Object {
                    "checkbox": [Function],
                    "code-editor": [Function],
                    "date-picker": [Function],
                    "dual-list-select": [Function],
                    "edit-password-field": [Function],
                    "field-array": [Function],
                    "file-upload": [Function],
                    "font-icon-picker": [Function],
                    "font-icon-picker-ddf": [Function],
                    "key-value-list": [Function],
                    "multi-select": [Function],
                    "password-field": [Function],
                    "plain-text": [Function],
                    "radio": [Function],
                    "select": [Function],
                    "slider": [Function],
                    "sub-form": [Function],
                    "subscriptions-table": [Function],
                    "switch": [Function],
                    "tabs": [Function],
                    "text-field": [Function],
                    "textarea": [Function],
                    "time-picker": [Function],
                    "tree-selector": [Function],
                    "tree-view": [Function],
                    "validate-credentials": [Function],
                    "wizard": [Function],
                  }
                }
                initialValues={Object {}}
                onCancel={[Function]}
                onSubmit={[Function]}
                schema={
                  Object {
                    "fields": Array [
                      Object {
                        "component": "text-field",
                        "id": "dbname",
                        "isRequired": true,
                        "label": "Database",
                        "name": "dbname",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "host",
                        "isRequired": true,
                        "label": "Host",
                        "name": "host",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "user",
                        "isRequired": true,
                        "label": "Username",
                        "name": "user",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "password",
                        "isRequired": true,
                        "label": "Password",
                        "name": "password",
                        "type": "password",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "port",
                        "isRequired": true,
                        "label": "Port",
                        "name": "port",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                    ],
                  }
                }
              >
                <MiqFormRenderer
                  buttonsLabels={
                    Object {
                      "submitLabel": "Accept",
                    }
                  }
                  canReset={true}
                  className="form-react"
                  componentMapper={
                    Object {
                      "checkbox": [Function],
                      "code-editor": [Function],
                      "date-picker": [Function],
                      "dual-list-select": [Function],
                      "edit-password-field": [Function],
                      "field-array": [Function],
                      "file-upload": [Function],
                      "font-icon-picker": [Function],
                      "font-icon-picker-ddf": [Function],
                      "key-value-list": [Function],
                      "multi-select": [Function],
                      "password-field": [Function],
                      "plain-text": [Function],
                      "radio": [Function],
                      "select": [Function],
                      "slider": [Function],
                      "sub-form": [Function],
                      "subscriptions-table": [Function],
                      "switch": [Function],
                      "tabs": [Function],
                      "text-field": [Function],
                      "textarea": [Function],
                      "time-picker": [Function],
                      "tree-selector": [Function],
                      "tree-view": [Function],
                      "validate-credentials": [Function],
                      "wizard": [Function],
                    }
                  }
                  disableSubmit={
                    Array [
                      "pristine",
                      "invalid",
                    ]
                  }
                  dispatch={[Function]}
                  initialValues={Object {}}
                  onCancel={[Function]}
                  onSubmit={[Function]}
                  schema={
                    Object {
                      "fields": Array [
                        Object {
                          "component": "text-field",
                          "id": "dbname",
                          "isRequired": true,
                          "label": "Database",
                          "name": "dbname",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "host",
                          "isRequired": true,
                          "label": "Host",
                          "name": "host",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "user",
                          "isRequired": true,
                          "label": "Username",
                          "name": "user",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "password",
                          "isRequired": true,
                          "label": "Password",
                          "name": "password",
                          "type": "password",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "port",
                          "isRequired": true,
                          "label": "Port",
                          "name": "port",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                      ],
                    }
                  }
                  showFormControls={true}
                >
                  <FormRenderer
                    FormTemplate={[Function]}
                    clearOnUnmount={false}
                    componentMapper={
                      Object {
                        "checkbox": [Function],
                        "code-editor": [Function],
                        "date-picker": [Function],
                        "dual-list-select": [Function],
                        "edit-password-field": [Function],
                        "field-array": [Function],
                        "file-upload": [Function],
                        "font-icon-picker": [Function],
                        "font-icon-picker-ddf": [Function],
                        "key-value-list": [Function],
                        "multi-select": [Function],
                        "password-field": [Function],
                        "plain-text": [Function],
                        "radio": [Function],
                        "select": [Function],
                        "slider": [Function],
                        "spy-field": [Function],
                        "sub-form": [Function],
                        "subscriptions-table": [Function],
                        "switch": [Function],
                        "tabs": [Function],
                        "text-field": [Function],
                        "textarea": [Function],
                        "time-picker": [Function],
                        "tree-selector": [Function],
                        "tree-view": [Function],
                        "validate-credentials": [Function],
                        "wizard": [Function],
                      }
                    }
                    dispatch={[Function]}
                    initialValues={Object {}}
                    onCancel={[Function]}
                    onReset={[Function]}
                    onSubmit={[Function]}
                    schema={
                      Object {
                        "fields": Array [
                          Object {
                            "component": "text-field",
                            "id": "dbname",
                            "isRequired": true,
                            "label": "Database",
                            "name": "dbname",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "host",
                            "isRequired": true,
                            "label": "Host",
                            "name": "host",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "user",
                            "isRequired": true,
                            "label": "Username",
                            "name": "user",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "password",
                            "isRequired": true,
                            "label": "Password",
                            "name": "password",
                            "type": "password",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "port",
                            "isRequired": true,
                            "label": "Port",
                            "name": "port",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "spy-field",
                            "initialize": undefined,
                            "name": "spy-field",
                          },
                        ],
                      }
                    }
                  >
                    <ReactFinalForm
                      decorators={
                        Array [
                          [Function],
                        ]
                      }
                      dispatch={[Function]}
                      initialValues={Object {}}
                      mutators={
                        Object {
                          "concat": [Function],
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "removeBatch": [Function],
                          "shift": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                          "update": [Function],
                        }
                      }
                      onSubmit={[Function]}
                      render={[Function]}
                      subscription={
                        Object {
                          "pristine": true,
                          "submitting": true,
                          "valid": true,
                        }
                      }
                    >
                      <Component
                        formFields={
                          Array [
                            <SingleField
                              component="text-field"
                              id="dbname"
                              isRequired={true}
                              label="Database"
                              name="dbname"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="host"
                              isRequired={true}
                              label="Host"
                              name="host"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="user"
                              isRequired={true}
                              label="Username"
                              name="user"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="password"
                              isRequired={true}
                              label="Password"
                              name="password"
                              type="password"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="port"
                              isRequired={true}
                              label="Port"
                              name="port"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="spy-field"
                              name="spy-field"
                            />,
                          ]
                        }
                        schema={
                          Object {
                            "fields": Array [
                              Object {
                                "component": "text-field",
                                "id": "dbname",
                                "isRequired": true,
                                "label": "Database",
                                "name": "dbname",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "host",
                                "isRequired": true,
                                "label": "Host",
                                "name": "host",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "user",
                                "isRequired": true,
                                "label": "Username",
                                "name": "user",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "password",
                                "isRequired": true,
                                "label": "Password",
                                "name": "password",
                                "type": "password",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "port",
                                "isRequired": true,
                                "label": "Port",
                                "name": "port",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "spy-field",
                                "initialize": undefined,
                                "name": "spy-field",
                              },
                            ],
                          }
                        }
                      >
                        <WrappedFormTemplate
                          canReset={true}
                          cancelLabel="Cancel"
                          disableSubmit={
                            Array [
                              "pristine",
                              "invalid",
                            ]
                          }
                          formFields={
                            Array [
                              <SingleField
                                component="text-field"
                                id="dbname"
                                isRequired={true}
                                label="Database"
                                name="dbname"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="host"
                                isRequired={true}
                                label="Host"
                                name="host"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="user"
                                isRequired={true}
                                label="Username"
                                name="user"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="password"
                                isRequired={true}
                                label="Password"
                                name="password"
                                type="password"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="port"
                                isRequired={true}
                                label="Port"
                                name="port"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="spy-field"
                                name="spy-field"
                              />,
                            ]
                          }
                          formWrapperProps={
                            Object {
                              "className": "form-react",
                            }
                          }
                          resetLabel="Reset"
                          schema={
                            Object {
                              "fields": Array [
                                Object {
                                  "component": "text-field",
                                  "id": "dbname",
                                  "isRequired": true,
                                  "label": "Database",
                                  "name": "dbname",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "host",
                                  "isRequired": true,
                                  "label": "Host",
                                  "name": "host",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "user",
                                  "isRequired": true,
                                  "label": "Username",
                                  "name": "user",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "password",
                                  "isRequired": true,
                                  "label": "Password",
                                  "name": "password",
                                  "type": "password",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "port",
                                  "isRequired": true,
                                  "label": "Port",
                                  "name": "port",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "spy-field",
                                  "initialize": undefined,
                                  "name": "spy-field",
                                },
                              ],
                            }
                          }
                          showFormControls={true}
                          submitLabel="Accept"
                        >
                          <FormTemplate
                            Button={[Function]}
                            ButtonGroup={[Function]}
                            Description={[Function]}
                            FormWrapper={[Function]}
                            Header={[Function]}
                            Title={[Function]}
                            buttonOrder={
                              Array [
                                "submit",
                                "reset",
                                "cancel",
                              ]
                            }
                            canReset={true}
                            cancelLabel="Cancel"
                            disableSubmit={
                              Array [
                                "pristine",
                                "invalid",
                              ]
                            }
                            formFields={
                              Array [
                                <SingleField
                                  component="text-field"
                                  id="dbname"
                                  isRequired={true}
                                  label="Database"
                                  name="dbname"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="host"
                                  isRequired={true}
                                  label="Host"
                                  name="host"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="user"
                                  isRequired={true}
                                  label="Username"
                                  name="user"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="password"
                                  isRequired={true}
                                  label="Password"
                                  name="password"
                                  type="password"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="port"
                                  isRequired={true}
                                  label="Port"
                                  name="port"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="spy-field"
                                  name="spy-field"
                                />,
                              ]
                            }
                            formWrapperProps={
                              Object {
                                "className": "form-react",
                              }
                            }
                            resetLabel="Reset"
                            schema={
                              Object {
                                "fields": Array [
                                  Object {
                                    "component": "text-field",
                                    "id": "dbname",
                                    "isRequired": true,
                                    "label": "Database",
                                    "name": "dbname",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "host",
                                    "isRequired": true,
                                    "label": "Host",
                                    "name": "host",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "user",
                                    "isRequired": true,
                                    "label": "Username",
                                    "name": "user",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "password",
                                    "isRequired": true,
                                    "label": "Password",
                                    "name": "password",
                                    "type": "password",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "port",
                                    "isRequired": true,
                                    "label": "Port",
                                    "name": "port",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "spy-field",
                                    "initialize": undefined,
                                    "name": "spy-field",
                                  },
                                ],
                              }
                            }
                            showFormControls={true}
                            submitLabel="Accept"
                          >
                            <Form
                              className="form-react"
                              onSubmit={[Function]}
                            >
                              <Form
                                className="form-0-2-3 form-react"
                                noValidate={true}
                                onSubmit={[Function]}
                              >
                                <form
                                  className="bx--form form-0-2-3 form-react"
                                  noValidate={true}
                                  onSubmit={[Function]}
                                >
                                   
                                  <SingleField
                                    component="text-field"
                                    id="dbname"
                                    isRequired={true}
                                    key="dbname"
                                    label="Database"
                                    name="dbname"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "dbname",
                                          "isRequired": true,
                                          "label": "Database",
                                          "name": "dbname",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="dbname"
                                          isRequired={true}
                                          label="Database"
                                          name="dbname"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="dbname"
                                            invalid={false}
                                            invalidText=""
                                            key="dbname"
                                            labelText={
                                              <IsRequired>
                                                Database
                                              </IsRequired>
                                            }
                                            name="dbname"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="dbname"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Database
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="dbname"
                                                    name="dbname"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="host"
                                    isRequired={true}
                                    key="host"
                                    label="Host"
                                    name="host"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "host",
                                          "isRequired": true,
                                          "label": "Host",
                                          "name": "host",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="host"
                                          isRequired={true}
                                          label="Host"
                                          name="host"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="host"
                                            invalid={false}
                                            invalidText=""
                                            key="host"
                                            labelText={
                                              <IsRequired>
                                                Host
                                              </IsRequired>
                                            }
                                            name="host"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="host"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Host
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="host"
                                                    name="host"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="user"
                                    isRequired={true}
                                    key="user"
                                    label="Username"
                                    name="user"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "user",
                                          "isRequired": true,
                                          "label": "Username",
                                          "name": "user",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="user"
                                          isRequired={true}
                                          label="Username"
                                          name="user"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="user"
                                            invalid={false}
                                            invalidText=""
                                            key="user"
                                            labelText={
                                              <IsRequired>
                                                Username
                                              </IsRequired>
                                            }
                                            name="user"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="user"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Username
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="user"
                                                    name="user"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="password"
                                    isRequired={true}
                                    key="password"
                                    label="Password"
                                    name="password"
                                    type="password"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "password",
                                          "isRequired": true,
                                          "label": "Password",
                                          "name": "password",
                                          "type": "password",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="password"
                                          isRequired={true}
                                          label="Password"
                                          name="password"
                                          type="password"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="password"
                                            invalid={false}
                                            invalidText=""
                                            key="password"
                                            labelText={
                                              <IsRequired>
                                                Password
                                              </IsRequired>
                                            }
                                            name="password"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            type="password"
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="password"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Password
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="password"
                                                    name="password"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="password"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="port"
                                    isRequired={true}
                                    key="port"
                                    label="Port"
                                    name="port"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "port",
                                          "isRequired": true,
                                          "label": "Port",
                                          "name": "port",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="port"
                                          isRequired={true}
                                          label="Port"
                                          name="port"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="port"
                                            invalid={false}
                                            invalidText=""
                                            key="port"
                                            labelText={
                                              <IsRequired>
                                                Port
                                              </IsRequired>
                                            }
                                            name="port"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="port"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Port
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="port"
                                                    name="port"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="spy-field"
                                    key="spy-field"
                                    name="spy-field"
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "spy-field",
                                          "initialize": undefined,
                                          "name": "spy-field",
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <SpyField
                                          component="spy-field"
                                          name="spy-field"
                                        >
                                          <FormSpy
                                            onChange={[Function]}
                                            subscription={
                                              Object {
                                                "pristine": true,
                                                "valid": true,
                                              }
                                            }
                                          />
                                        </SpyField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <FormSpy>
                                    <FormControls
                                      Button={[Function]}
                                      ButtonGroup={[Function]}
                                      FormSpy={[Function]}
                                      buttonOrder={
                                        Array [
                                          "submit",
                                          "reset",
                                          "cancel",
                                        ]
                                      }
                                      canReset={true}
                                      cancelLabel="Cancel"
                                      disableSubmit={true}
                                      formFields={
                                        Array [
                                          <SingleField
                                            component="text-field"
                                            id="dbname"
                                            isRequired={true}
                                            label="Database"
                                            name="dbname"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="host"
                                            isRequired={true}
                                            label="Host"
                                            name="host"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="user"
                                            isRequired={true}
                                            label="Username"
                                            name="user"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="password"
                                            isRequired={true}
                                            label="Password"
                                            name="password"
                                            type="password"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="port"
                                            isRequired={true}
                                            label="Port"
                                            name="port"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="spy-field"
                                            name="spy-field"
                                          />,
                                        ]
                                      }
                                      formSpyProps={
                                        Object {
                                          "active": undefined,
                                          "dirty": false,
                                          "dirtyFields": Object {},
                                          "dirtyFieldsSinceLastSubmit": Object {},
                                          "dirtySinceLastSubmit": false,
                                          "error": undefined,
                                          "errors": Object {
                                            "dbname": "Required",
                                            "host": "Required",
                                            "password": "Required",
                                            "port": "Required",
                                            "user": "Required",
                                          },
                                          "form": Object {
                                            "batch": [Function],
                                            "blur": [Function],
                                            "change": [Function],
                                            "destroyOnUnregister": false,
                                            "focus": [Function],
                                            "getFieldState": [Function],
                                            "getRegisteredFields": [Function],
                                            "getState": [Function],
                                            "initialize": [Function],
                                            "isValidationPaused": [Function],
                                            "mutators": Object {
                                              "concat": [Function],
                                              "insert": [Function],
                                              "move": [Function],
                                              "pop": [Function],
                                              "push": [Function],
                                              "remove": [Function],
                                              "removeBatch": [Function],
                                              "shift": [Function],
                                              "swap": [Function],
                                              "unshift": [Function],
                                              "update": [Function],
                                            },
                                            "pauseValidation": [Function],
                                            "registerField": [Function],
                                            "reset": [Function],
                                            "resetFieldState": [Function],
                                            "restart": [Function],
                                            "resumeValidation": [Function],
                                            "setConfig": [Function],
                                            "submit": [Function],
                                            "subscribe": [Function],
                                          },
                                          "hasSubmitErrors": false,
                                          "hasValidationErrors": true,
                                          "initialValues": Object {},
                                          "invalid": true,
                                          "modified": Object {
                                            "dbname": false,
                                            "host": false,
                                            "password": false,
                                            "port": false,
                                            "user": false,
                                          },
                                          "modifiedSinceLastSubmit": false,
                                          "pristine": true,
                                          "submitError": undefined,
                                          "submitErrors": undefined,
                                          "submitFailed": false,
                                          "submitSucceeded": false,
                                          "submitting": false,
                                          "touched": Object {
                                            "dbname": false,
                                            "host": false,
                                            "password": false,
                                            "port": false,
                                            "user": false,
                                          },
                                          "valid": false,
                                          "validating": false,
                                          "values": Object {},
                                          "visited": Object {
                                            "dbname": false,
                                            "host": false,
                                            "password": false,
                                            "port": false,
                                            "user": false,
                                          },
                                        }
                                      }
                                      onCancel={[Function]}
                                      onReset={[Function]}
                                      resetLabel="Reset"
                                      schema={
                                        Object {
                                          "fields": Array [
                                            Object {
                                              "component": "text-field",
                                              "id": "dbname",
                                              "isRequired": true,
                                              "label": "Database",
                                              "name": "dbname",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "host",
                                              "isRequired": true,
                                              "label": "Host",
                                              "name": "host",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "user",
                                              "isRequired": true,
                                              "label": "Username",
                                              "name": "user",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "password",
                                              "isRequired": true,
                                              "label": "Password",
                                              "name": "password",
                                              "type": "password",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "port",
                                              "isRequired": true,
                                              "label": "Port",
                                              "name": "port",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "spy-field",
                                              "initialize": undefined,
                                              "name": "spy-field",
                                            },
                                          ],
                                        }
                                      }
                                      submitLabel="Accept"
                                    >
                                      <ButtonGroup>
                                        <ButtonSet
                                          className=""
                                        >
                                          <div
                                            className="bx--btn-set"
                                          >
                                            <Button
                                              buttonType="submit"
                                              disabled={true}
                                              key="form-submit"
                                              label="Accept"
                                              type="submit"
                                              variant="primary"
                                            >
                                              <Button
                                                disabled={true}
                                                kind="primary"
                                                type="submit"
                                                variant="primary"
                                              >
                                                <button
                                                  aria-describedby={null}
                                                  aria-pressed={null}
                                                  className="bx--btn bx--btn--primary bx--btn--disabled"
                                                  disabled={true}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onMouseEnter={[Function]}
                                                  onMouseLeave={[Function]}
                                                  tabIndex={0}
                                                  type="submit"
                                                  variant="primary"
                                                >
                                                  Accept
                                                </button>
                                              </Button>
                                            </Button>
                                            <Button
                                              buttonType="reset"
                                              disabled={true}
                                              key="form-reset"
                                              label="Reset"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <Button
                                                disabled={true}
                                                kind="secondary"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <button
                                                  aria-describedby={null}
                                                  aria-pressed={null}
                                                  className="bx--btn bx--btn--secondary bx--btn--disabled"
                                                  disabled={true}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onMouseEnter={[Function]}
                                                  onMouseLeave={[Function]}
                                                  tabIndex={0}
                                                  type="button"
                                                >
                                                  Reset
                                                </button>
                                              </Button>
                                            </Button>
                                            <Button
                                              buttonType="cancel"
                                              key="form-cancel"
                                              label="Cancel"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <Button
                                                kind="secondary"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <button
                                                  aria-describedby={null}
                                                  aria-pressed={null}
                                                  className="bx--btn bx--btn--secondary"
                                                  disabled={false}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onMouseEnter={[Function]}
                                                  onMouseLeave={[Function]}
                                                  tabIndex={0}
                                                  type="button"
                                                >
                                                  Cancel
                                                </button>
                                              </Button>
                                            </Button>
                                          </div>
                                        </ButtonSet>
                                      </ButtonGroup>
                                    </FormControls>
                                  </FormSpy>
                                   
                                </form>
                              </Form>
                            </Form>
                          </FormTemplate>
                        </WrappedFormTemplate>
                      </Component>
                    </ReactFinalForm>
                  </FormRenderer>
                </MiqFormRenderer>
              </Connect(MiqFormRenderer)>
            </div>
          </div>
          <span
            className="bx--visually-hidden"
            role="link"
            tabIndex="0"
          >
            Focus sentinel
          </span>
        </div>
      </Modal>
    </div>
  </SettingsReplicationForm>
</Provider>
`;

exports[`SettingsReplicationForm Form Component should not render the subscription section when replication type is remote 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <SettingsReplicationForm
    pglogicalReplicationFormId="new"
  >
    <div>
      <Connect(MiqFormRenderer)
        buttonsLabels={
          Object {
            "submitLabel": "Save",
          }
        }
        canReset={true}
        componentMapper={
          Object {
            "checkbox": [Function],
            "code-editor": [Function],
            "date-picker": [Function],
            "dual-list-select": [Function],
            "edit-password-field": [Function],
            "field-array": [Function],
            "file-upload": [Function],
            "font-icon-picker": [Function],
            "font-icon-picker-ddf": [Function],
            "key-value-list": [Function],
            "multi-select": [Function],
            "password-field": [Function],
            "plain-text": [Function],
            "radio": [Function],
            "select": [Function],
            "slider": [Function],
            "sub-form": [Function],
            "subscriptions-table": [Function],
            "switch": [Function],
            "tabs": [Function],
            "text-field": [Function],
            "textarea": [Function],
            "time-picker": [Function],
            "tree-selector": [Function],
            "tree-view": [Function],
            "validate-credentials": [Function],
            "wizard": [Function],
          }
        }
        onCancel={[Function]}
        onSubmit={[Function]}
        schema={
          Object {
            "fields": Array [
              Object {
                "component": "select",
                "id": "replication_type",
                "initialValue": "remote",
                "label": "Type",
                "name": "replication_type",
                "onChange": [Function],
                "options": Array [
                  Object {
                    "label": "<None>",
                    "value": "none",
                  },
                  Object {
                    "label": "Global",
                    "value": "global",
                  },
                  Object {
                    "label": "Remote",
                    "value": "remote",
                  },
                ],
              },
              Object {
                "component": "sub-form",
                "condition": Object {
                  "is": "global",
                  "when": "replication_type",
                },
                "fields": Array [
                  Object {
                    "addButtonLabel": "Add Subscription",
                    "component": "subscriptions-table",
                    "id": "subscriptions-table",
                    "name": "subscriptions-table",
                    "onButtonClick": [Function],
                    "onCellClick": [Function],
                    "rows": Array [],
                  },
                ],
                "id": "subscriptions_section",
                "key": true,
                "name": "subscriptions_section",
              },
            ],
          }
        }
      >
        <MiqFormRenderer
          buttonsLabels={
            Object {
              "submitLabel": "Save",
            }
          }
          canReset={true}
          className="form-react"
          componentMapper={
            Object {
              "checkbox": [Function],
              "code-editor": [Function],
              "date-picker": [Function],
              "dual-list-select": [Function],
              "edit-password-field": [Function],
              "field-array": [Function],
              "file-upload": [Function],
              "font-icon-picker": [Function],
              "font-icon-picker-ddf": [Function],
              "key-value-list": [Function],
              "multi-select": [Function],
              "password-field": [Function],
              "plain-text": [Function],
              "radio": [Function],
              "select": [Function],
              "slider": [Function],
              "sub-form": [Function],
              "subscriptions-table": [Function],
              "switch": [Function],
              "tabs": [Function],
              "text-field": [Function],
              "textarea": [Function],
              "time-picker": [Function],
              "tree-selector": [Function],
              "tree-view": [Function],
              "validate-credentials": [Function],
              "wizard": [Function],
            }
          }
          disableSubmit={
            Array [
              "pristine",
              "invalid",
            ]
          }
          dispatch={[Function]}
          onCancel={[Function]}
          onSubmit={[Function]}
          schema={
            Object {
              "fields": Array [
                Object {
                  "component": "select",
                  "id": "replication_type",
                  "initialValue": "remote",
                  "label": "Type",
                  "name": "replication_type",
                  "onChange": [Function],
                  "options": Array [
                    Object {
                      "label": "<None>",
                      "value": "none",
                    },
                    Object {
                      "label": "Global",
                      "value": "global",
                    },
                    Object {
                      "label": "Remote",
                      "value": "remote",
                    },
                  ],
                },
                Object {
                  "component": "sub-form",
                  "condition": Object {
                    "is": "global",
                    "when": "replication_type",
                  },
                  "fields": Array [
                    Object {
                      "addButtonLabel": "Add Subscription",
                      "component": "subscriptions-table",
                      "id": "subscriptions-table",
                      "name": "subscriptions-table",
                      "onButtonClick": [Function],
                      "onCellClick": [Function],
                      "rows": Array [],
                    },
                  ],
                  "id": "subscriptions_section",
                  "key": true,
                  "name": "subscriptions_section",
                },
              ],
            }
          }
          showFormControls={true}
        >
          <FormRenderer
            FormTemplate={[Function]}
            clearOnUnmount={false}
            componentMapper={
              Object {
                "checkbox": [Function],
                "code-editor": [Function],
                "date-picker": [Function],
                "dual-list-select": [Function],
                "edit-password-field": [Function],
                "field-array": [Function],
                "file-upload": [Function],
                "font-icon-picker": [Function],
                "font-icon-picker-ddf": [Function],
                "key-value-list": [Function],
                "multi-select": [Function],
                "password-field": [Function],
                "plain-text": [Function],
                "radio": [Function],
                "select": [Function],
                "slider": [Function],
                "spy-field": [Function],
                "sub-form": [Function],
                "subscriptions-table": [Function],
                "switch": [Function],
                "tabs": [Function],
                "text-field": [Function],
                "textarea": [Function],
                "time-picker": [Function],
                "tree-selector": [Function],
                "tree-view": [Function],
                "validate-credentials": [Function],
                "wizard": [Function],
              }
            }
            dispatch={[Function]}
            initialValues={Object {}}
            onCancel={[Function]}
            onReset={[Function]}
            onSubmit={[Function]}
            schema={
              Object {
                "fields": Array [
                  Object {
                    "component": "select",
                    "id": "replication_type",
                    "initialValue": "remote",
                    "label": "Type",
                    "name": "replication_type",
                    "onChange": [Function],
                    "options": Array [
                      Object {
                        "label": "<None>",
                        "value": "none",
                      },
                      Object {
                        "label": "Global",
                        "value": "global",
                      },
                      Object {
                        "label": "Remote",
                        "value": "remote",
                      },
                    ],
                  },
                  Object {
                    "component": "sub-form",
                    "condition": Object {
                      "is": "global",
                      "when": "replication_type",
                    },
                    "fields": Array [
                      Object {
                        "addButtonLabel": "Add Subscription",
                        "component": "subscriptions-table",
                        "id": "subscriptions-table",
                        "name": "subscriptions-table",
                        "onButtonClick": [Function],
                        "onCellClick": [Function],
                        "rows": Array [],
                      },
                    ],
                    "id": "subscriptions_section",
                    "key": true,
                    "name": "subscriptions_section",
                  },
                  Object {
                    "component": "spy-field",
                    "initialize": undefined,
                    "name": "spy-field",
                  },
                ],
              }
            }
          >
            <ReactFinalForm
              decorators={
                Array [
                  [Function],
                ]
              }
              dispatch={[Function]}
              initialValues={Object {}}
              mutators={
                Object {
                  "concat": [Function],
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "removeBatch": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                }
              }
              onSubmit={[Function]}
              render={[Function]}
              subscription={
                Object {
                  "pristine": true,
                  "submitting": true,
                  "valid": true,
                }
              }
            >
              <Component
                formFields={
                  Array [
                    <SingleField
                      component="select"
                      id="replication_type"
                      initialValue="remote"
                      label="Type"
                      name="replication_type"
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "<None>",
                            "value": "none",
                          },
                          Object {
                            "label": "Global",
                            "value": "global",
                          },
                          Object {
                            "label": "Remote",
                            "value": "remote",
                          },
                        ]
                      }
                    />,
                    <SingleField
                      component="sub-form"
                      condition={
                        Object {
                          "is": "global",
                          "when": "replication_type",
                        }
                      }
                      fields={
                        Array [
                          Object {
                            "addButtonLabel": "Add Subscription",
                            "component": "subscriptions-table",
                            "id": "subscriptions-table",
                            "name": "subscriptions-table",
                            "onButtonClick": [Function],
                            "onCellClick": [Function],
                            "rows": Array [],
                          },
                        ]
                      }
                      id="subscriptions_section"
                      name="subscriptions_section"
                    />,
                    <SingleField
                      component="spy-field"
                      name="spy-field"
                    />,
                  ]
                }
                schema={
                  Object {
                    "fields": Array [
                      Object {
                        "component": "select",
                        "id": "replication_type",
                        "initialValue": "remote",
                        "label": "Type",
                        "name": "replication_type",
                        "onChange": [Function],
                        "options": Array [
                          Object {
                            "label": "<None>",
                            "value": "none",
                          },
                          Object {
                            "label": "Global",
                            "value": "global",
                          },
                          Object {
                            "label": "Remote",
                            "value": "remote",
                          },
                        ],
                      },
                      Object {
                        "component": "sub-form",
                        "condition": Object {
                          "is": "global",
                          "when": "replication_type",
                        },
                        "fields": Array [
                          Object {
                            "addButtonLabel": "Add Subscription",
                            "component": "subscriptions-table",
                            "id": "subscriptions-table",
                            "name": "subscriptions-table",
                            "onButtonClick": [Function],
                            "onCellClick": [Function],
                            "rows": Array [],
                          },
                        ],
                        "id": "subscriptions_section",
                        "key": true,
                        "name": "subscriptions_section",
                      },
                      Object {
                        "component": "spy-field",
                        "initialize": undefined,
                        "name": "spy-field",
                      },
                    ],
                  }
                }
              >
                <WrappedFormTemplate
                  canReset={true}
                  cancelLabel="Cancel"
                  disableSubmit={
                    Array [
                      "pristine",
                      "invalid",
                    ]
                  }
                  formFields={
                    Array [
                      <SingleField
                        component="select"
                        id="replication_type"
                        initialValue="remote"
                        label="Type"
                        name="replication_type"
                        onChange={[Function]}
                        options={
                          Array [
                            Object {
                              "label": "<None>",
                              "value": "none",
                            },
                            Object {
                              "label": "Global",
                              "value": "global",
                            },
                            Object {
                              "label": "Remote",
                              "value": "remote",
                            },
                          ]
                        }
                      />,
                      <SingleField
                        component="sub-form"
                        condition={
                          Object {
                            "is": "global",
                            "when": "replication_type",
                          }
                        }
                        fields={
                          Array [
                            Object {
                              "addButtonLabel": "Add Subscription",
                              "component": "subscriptions-table",
                              "id": "subscriptions-table",
                              "name": "subscriptions-table",
                              "onButtonClick": [Function],
                              "onCellClick": [Function],
                              "rows": Array [],
                            },
                          ]
                        }
                        id="subscriptions_section"
                        name="subscriptions_section"
                      />,
                      <SingleField
                        component="spy-field"
                        name="spy-field"
                      />,
                    ]
                  }
                  formWrapperProps={
                    Object {
                      "className": "form-react",
                    }
                  }
                  resetLabel="Reset"
                  schema={
                    Object {
                      "fields": Array [
                        Object {
                          "component": "select",
                          "id": "replication_type",
                          "initialValue": "remote",
                          "label": "Type",
                          "name": "replication_type",
                          "onChange": [Function],
                          "options": Array [
                            Object {
                              "label": "<None>",
                              "value": "none",
                            },
                            Object {
                              "label": "Global",
                              "value": "global",
                            },
                            Object {
                              "label": "Remote",
                              "value": "remote",
                            },
                          ],
                        },
                        Object {
                          "component": "sub-form",
                          "condition": Object {
                            "is": "global",
                            "when": "replication_type",
                          },
                          "fields": Array [
                            Object {
                              "addButtonLabel": "Add Subscription",
                              "component": "subscriptions-table",
                              "id": "subscriptions-table",
                              "name": "subscriptions-table",
                              "onButtonClick": [Function],
                              "onCellClick": [Function],
                              "rows": Array [],
                            },
                          ],
                          "id": "subscriptions_section",
                          "key": true,
                          "name": "subscriptions_section",
                        },
                        Object {
                          "component": "spy-field",
                          "initialize": undefined,
                          "name": "spy-field",
                        },
                      ],
                    }
                  }
                  showFormControls={true}
                  submitLabel="Save"
                >
                  <FormTemplate
                    Button={[Function]}
                    ButtonGroup={[Function]}
                    Description={[Function]}
                    FormWrapper={[Function]}
                    Header={[Function]}
                    Title={[Function]}
                    buttonOrder={
                      Array [
                        "submit",
                        "reset",
                        "cancel",
                      ]
                    }
                    canReset={true}
                    cancelLabel="Cancel"
                    disableSubmit={
                      Array [
                        "pristine",
                        "invalid",
                      ]
                    }
                    formFields={
                      Array [
                        <SingleField
                          component="select"
                          id="replication_type"
                          initialValue="remote"
                          label="Type"
                          name="replication_type"
                          onChange={[Function]}
                          options={
                            Array [
                              Object {
                                "label": "<None>",
                                "value": "none",
                              },
                              Object {
                                "label": "Global",
                                "value": "global",
                              },
                              Object {
                                "label": "Remote",
                                "value": "remote",
                              },
                            ]
                          }
                        />,
                        <SingleField
                          component="sub-form"
                          condition={
                            Object {
                              "is": "global",
                              "when": "replication_type",
                            }
                          }
                          fields={
                            Array [
                              Object {
                                "addButtonLabel": "Add Subscription",
                                "component": "subscriptions-table",
                                "id": "subscriptions-table",
                                "name": "subscriptions-table",
                                "onButtonClick": [Function],
                                "onCellClick": [Function],
                                "rows": Array [],
                              },
                            ]
                          }
                          id="subscriptions_section"
                          name="subscriptions_section"
                        />,
                        <SingleField
                          component="spy-field"
                          name="spy-field"
                        />,
                      ]
                    }
                    formWrapperProps={
                      Object {
                        "className": "form-react",
                      }
                    }
                    resetLabel="Reset"
                    schema={
                      Object {
                        "fields": Array [
                          Object {
                            "component": "select",
                            "id": "replication_type",
                            "initialValue": "remote",
                            "label": "Type",
                            "name": "replication_type",
                            "onChange": [Function],
                            "options": Array [
                              Object {
                                "label": "<None>",
                                "value": "none",
                              },
                              Object {
                                "label": "Global",
                                "value": "global",
                              },
                              Object {
                                "label": "Remote",
                                "value": "remote",
                              },
                            ],
                          },
                          Object {
                            "component": "sub-form",
                            "condition": Object {
                              "is": "global",
                              "when": "replication_type",
                            },
                            "fields": Array [
                              Object {
                                "addButtonLabel": "Add Subscription",
                                "component": "subscriptions-table",
                                "id": "subscriptions-table",
                                "name": "subscriptions-table",
                                "onButtonClick": [Function],
                                "onCellClick": [Function],
                                "rows": Array [],
                              },
                            ],
                            "id": "subscriptions_section",
                            "key": true,
                            "name": "subscriptions_section",
                          },
                          Object {
                            "component": "spy-field",
                            "initialize": undefined,
                            "name": "spy-field",
                          },
                        ],
                      }
                    }
                    showFormControls={true}
                    submitLabel="Save"
                  >
                    <Form
                      className="form-react"
                      onSubmit={[Function]}
                    >
                      <Form
                        className="form-0-2-3 form-react"
                        noValidate={true}
                        onSubmit={[Function]}
                      >
                        <form
                          className="bx--form form-0-2-3 form-react"
                          noValidate={true}
                          onSubmit={[Function]}
                        >
                           
                          <SingleField
                            component="select"
                            id="replication_type"
                            initialValue="remote"
                            key="replication_type"
                            label="Type"
                            name="replication_type"
                            onChange={[Function]}
                            options={
                              Array [
                                Object {
                                  "label": "<None>",
                                  "value": "none",
                                },
                                Object {
                                  "label": "Global",
                                  "value": "global",
                                },
                                Object {
                                  "label": "Remote",
                                  "value": "remote",
                                },
                              ]
                            }
                          >
                            <FormConditionWrapper
                              field={
                                Object {
                                  "component": "select",
                                  "id": "replication_type",
                                  "initialValue": "remote",
                                  "label": "Type",
                                  "name": "replication_type",
                                  "onChange": [Function],
                                  "options": Array [
                                    Object {
                                      "label": "<None>",
                                      "value": "none",
                                    },
                                    Object {
                                      "label": "Global",
                                      "value": "global",
                                    },
                                    Object {
                                      "label": "Remote",
                                      "value": "remote",
                                    },
                                  ],
                                }
                              }
                            >
                              <FormFieldHideWrapper
                                hideField={false}
                              >
                                <SelectWithOnChange
                                  component="select"
                                  id="replication_type"
                                  initialValue="remote"
                                  label="Type"
                                  name="replication_type"
                                  onChange={[Function]}
                                  options={
                                    Array [
                                      Object {
                                        "label": "<None>",
                                        "value": "none",
                                      },
                                      Object {
                                        "label": "Global",
                                        "value": "global",
                                      },
                                      Object {
                                        "label": "Remote",
                                        "value": "remote",
                                      },
                                    ]
                                  }
                                  placeholder="<Choose>"
                                >
                                  <Select
                                    component="select"
                                    id="replication_type"
                                    initialValue="remote"
                                    label="Type"
                                    loadingMessage="Loading..."
                                    name="replication_type"
                                    options={
                                      Array [
                                        Object {
                                          "label": "<None>",
                                          "value": "none",
                                        },
                                        Object {
                                          "label": "Global",
                                          "value": "global",
                                        },
                                        Object {
                                          "label": "Remote",
                                          "value": "remote",
                                        },
                                      ]
                                    }
                                    placeholder="<Choose>"
                                  >
                                    <Select
                                      SelectComponent={[Function]}
                                      id="replication_type"
                                      invalidText=""
                                      labelText="Type"
                                      loadOptionsChangeCounter={1}
                                      loadingMessage="Loading..."
                                      name="replication_type"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      options={
                                        Array [
                                          Object {
                                            "label": "<None>",
                                            "value": "none",
                                          },
                                          Object {
                                            "label": "Global",
                                            "value": "global",
                                          },
                                          Object {
                                            "label": "Remote",
                                            "value": "remote",
                                          },
                                        ]
                                      }
                                      placeholder="<Choose>"
                                      simpleValue={false}
                                      value="remote"
                                    >
                                      <ClearedSelect
                                        className=""
                                        closeMenuOnSelect={true}
                                        hideSelectedOptions={false}
                                        id="replication_type"
                                        invalidText=""
                                        isClearable={false}
                                        isFetching={false}
                                        isSearchable={false}
                                        labelText="Type"
                                        name="replication_type"
                                        noOptionsMessage={[Function]}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        onInputChange={[Function]}
                                        options={
                                          Array [
                                            Object {
                                              "label": "<None>",
                                              "value": "none",
                                            },
                                            Object {
                                              "label": "Global",
                                              "value": "global",
                                            },
                                            Object {
                                              "label": "Remote",
                                              "value": "remote",
                                            },
                                          ]
                                        }
                                        placeholder="<Choose>"
                                        value="remote"
                                      >
                                        <Select
                                          className=""
                                          disabled={false}
                                          helperText=""
                                          id="replication_type"
                                          inline={false}
                                          invalid={false}
                                          invalidText=""
                                          labelText="Type"
                                          light={false}
                                          name="replication_type"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          value="remote"
                                        >
                                          <div
                                            className="bx--form-item"
                                          >
                                            <div
                                              className="bx--select"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="replication_type"
                                              >
                                                Type
                                              </label>
                                              <div
                                                className="bx--select-input__wrapper"
                                                data-invalid={null}
                                              >
                                                <select
                                                  className="bx--select-input"
                                                  id="replication_type"
                                                  name="replication_type"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  value="remote"
                                                >
                                                  <SelectItem
                                                    disabled={false}
                                                    hidden={false}
                                                    key="none"
                                                    label="<None>"
                                                    text="<None>"
                                                    value="none"
                                                  >
                                                    <option
                                                      className="bx--select-option"
                                                      disabled={false}
                                                      hidden={false}
                                                      label="<None>"
                                                      value="none"
                                                    >
                                                      &lt;None&gt;
                                                    </option>
                                                  </SelectItem>
                                                  <SelectItem
                                                    disabled={false}
                                                    hidden={false}
                                                    key="global"
                                                    label="Global"
                                                    text="Global"
                                                    value="global"
                                                  >
                                                    <option
                                                      className="bx--select-option"
                                                      disabled={false}
                                                      hidden={false}
                                                      label="Global"
                                                      value="global"
                                                    >
                                                      Global
                                                    </option>
                                                  </SelectItem>
                                                  <SelectItem
                                                    disabled={false}
                                                    hidden={false}
                                                    key="remote"
                                                    label="Remote"
                                                    text="Remote"
                                                    value="remote"
                                                  >
                                                    <option
                                                      className="bx--select-option"
                                                      disabled={false}
                                                      hidden={false}
                                                      label="Remote"
                                                      value="remote"
                                                    >
                                                      Remote
                                                    </option>
                                                  </SelectItem>
                                                </select>
                                                <ForwardRef(ChevronDown16)
                                                  className="bx--select__arrow"
                                                >
                                                  <Icon
                                                    className="bx--select__arrow"
                                                    fill="currentColor"
                                                    height={16}
                                                    preserveAspectRatio="xMidYMid meet"
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <svg
                                                      aria-hidden={true}
                                                      className="bx--select__arrow"
                                                      fill="currentColor"
                                                      focusable="false"
                                                      height={16}
                                                      preserveAspectRatio="xMidYMid meet"
                                                      viewBox="0 0 16 16"
                                                      width={16}
                                                      xmlns="http://www.w3.org/2000/svg"
                                                    >
                                                      <path
                                                        d="M8 11L3 6 3.7 5.3 8 9.6 12.3 5.3 13 6z"
                                                      />
                                                    </svg>
                                                  </Icon>
                                                </ForwardRef(ChevronDown16)>
                                              </div>
                                            </div>
                                          </div>
                                        </Select>
                                      </ClearedSelect>
                                    </Select>
                                  </Select>
                                </SelectWithOnChange>
                              </FormFieldHideWrapper>
                            </FormConditionWrapper>
                          </SingleField>
                          <SingleField
                            component="sub-form"
                            condition={
                              Object {
                                "is": "global",
                                "when": "replication_type",
                              }
                            }
                            fields={
                              Array [
                                Object {
                                  "addButtonLabel": "Add Subscription",
                                  "component": "subscriptions-table",
                                  "id": "subscriptions-table",
                                  "name": "subscriptions-table",
                                  "onButtonClick": [Function],
                                  "onCellClick": [Function],
                                  "rows": Array [],
                                },
                              ]
                            }
                            id="subscriptions_section"
                            key="true"
                            name="subscriptions_section"
                          >
                            <FormConditionWrapper
                              condition={
                                Object {
                                  "is": "global",
                                  "when": "replication_type",
                                }
                              }
                              field={
                                Object {
                                  "component": "sub-form",
                                  "fields": Array [
                                    Object {
                                      "addButtonLabel": "Add Subscription",
                                      "component": "subscriptions-table",
                                      "id": "subscriptions-table",
                                      "name": "subscriptions-table",
                                      "onButtonClick": [Function],
                                      "onCellClick": [Function],
                                      "rows": Array [],
                                    },
                                  ],
                                  "id": "subscriptions_section",
                                  "name": "subscriptions_section",
                                }
                              }
                            >
                              <ConditionTriggerDetector
                                condition={
                                  Object {
                                    "is": "global",
                                    "when": "replication_type",
                                  }
                                }
                                field={
                                  Object {
                                    "component": "sub-form",
                                    "fields": Array [
                                      Object {
                                        "addButtonLabel": "Add Subscription",
                                        "component": "subscriptions-table",
                                        "id": "subscriptions-table",
                                        "name": "subscriptions-table",
                                        "onButtonClick": [Function],
                                        "onCellClick": [Function],
                                        "rows": Array [],
                                      },
                                    ],
                                    "id": "subscriptions_section",
                                    "name": "subscriptions_section",
                                  }
                                }
                                triggers={
                                  Array [
                                    "replication_type",
                                  ]
                                }
                              >
                                <ForwardRef(Field)
                                  name="replication_type"
                                  subscription={
                                    Object {
                                      "value": true,
                                    }
                                  }
                                >
                                  <ConditionTriggerDetector
                                    condition={
                                      Object {
                                        "is": "global",
                                        "when": "replication_type",
                                      }
                                    }
                                    field={
                                      Object {
                                        "component": "sub-form",
                                        "fields": Array [
                                          Object {
                                            "addButtonLabel": "Add Subscription",
                                            "component": "subscriptions-table",
                                            "id": "subscriptions-table",
                                            "name": "subscriptions-table",
                                            "onButtonClick": [Function],
                                            "onCellClick": [Function],
                                            "rows": Array [],
                                          },
                                        ],
                                        "id": "subscriptions_section",
                                        "name": "subscriptions_section",
                                      }
                                    }
                                    triggers={Array []}
                                    values={
                                      Object {
                                        "replication_type": "remote",
                                      }
                                    }
                                  >
                                    <ConditionTriggerWrapper
                                      condition={
                                        Object {
                                          "is": "global",
                                          "when": "replication_type",
                                        }
                                      }
                                      field={
                                        Object {
                                          "component": "sub-form",
                                          "fields": Array [
                                            Object {
                                              "addButtonLabel": "Add Subscription",
                                              "component": "subscriptions-table",
                                              "id": "subscriptions-table",
                                              "name": "subscriptions-table",
                                              "onButtonClick": [Function],
                                              "onCellClick": [Function],
                                              "rows": Array [],
                                            },
                                          ],
                                          "id": "subscriptions_section",
                                          "name": "subscriptions_section",
                                        }
                                      }
                                      values={
                                        Object {
                                          "replication_type": "remote",
                                        }
                                      }
                                    >
                                      <Component
                                        condition={
                                          Object {
                                            "is": "global",
                                            "when": "replication_type",
                                          }
                                        }
                                        field={
                                          Object {
                                            "component": "sub-form",
                                            "fields": Array [
                                              Object {
                                                "addButtonLabel": "Add Subscription",
                                                "component": "subscriptions-table",
                                                "id": "subscriptions-table",
                                                "name": "subscriptions-table",
                                                "onButtonClick": [Function],
                                                "onCellClick": [Function],
                                                "rows": Array [],
                                              },
                                            ],
                                            "id": "subscriptions_section",
                                            "name": "subscriptions_section",
                                          }
                                        }
                                        values={
                                          Object {
                                            "replication_type": "remote",
                                          }
                                        }
                                      />
                                    </ConditionTriggerWrapper>
                                  </ConditionTriggerDetector>
                                </ForwardRef(Field)>
                              </ConditionTriggerDetector>
                            </FormConditionWrapper>
                          </SingleField>
                          <SingleField
                            component="spy-field"
                            key="spy-field"
                            name="spy-field"
                          >
                            <FormConditionWrapper
                              field={
                                Object {
                                  "component": "spy-field",
                                  "initialize": undefined,
                                  "name": "spy-field",
                                }
                              }
                            >
                              <FormFieldHideWrapper
                                hideField={false}
                              >
                                <SpyField
                                  component="spy-field"
                                  name="spy-field"
                                >
                                  <FormSpy
                                    onChange={[Function]}
                                    subscription={
                                      Object {
                                        "pristine": true,
                                        "valid": true,
                                      }
                                    }
                                  />
                                </SpyField>
                              </FormFieldHideWrapper>
                            </FormConditionWrapper>
                          </SingleField>
                          <FormSpy>
                            <FormControls
                              Button={[Function]}
                              ButtonGroup={[Function]}
                              FormSpy={[Function]}
                              buttonOrder={
                                Array [
                                  "submit",
                                  "reset",
                                  "cancel",
                                ]
                              }
                              canReset={true}
                              cancelLabel="Cancel"
                              formFields={
                                Array [
                                  <SingleField
                                    component="select"
                                    id="replication_type"
                                    initialValue="remote"
                                    label="Type"
                                    name="replication_type"
                                    onChange={[Function]}
                                    options={
                                      Array [
                                        Object {
                                          "label": "<None>",
                                          "value": "none",
                                        },
                                        Object {
                                          "label": "Global",
                                          "value": "global",
                                        },
                                        Object {
                                          "label": "Remote",
                                          "value": "remote",
                                        },
                                      ]
                                    }
                                  />,
                                  <SingleField
                                    component="sub-form"
                                    condition={
                                      Object {
                                        "is": "global",
                                        "when": "replication_type",
                                      }
                                    }
                                    fields={
                                      Array [
                                        Object {
                                          "addButtonLabel": "Add Subscription",
                                          "component": "subscriptions-table",
                                          "id": "subscriptions-table",
                                          "name": "subscriptions-table",
                                          "onButtonClick": [Function],
                                          "onCellClick": [Function],
                                          "rows": Array [],
                                        },
                                      ]
                                    }
                                    id="subscriptions_section"
                                    name="subscriptions_section"
                                  />,
                                  <SingleField
                                    component="spy-field"
                                    name="spy-field"
                                  />,
                                ]
                              }
                              formSpyProps={
                                Object {
                                  "active": undefined,
                                  "dirty": true,
                                  "dirtyFields": Object {
                                    "replication_type": true,
                                  },
                                  "dirtyFieldsSinceLastSubmit": Object {
                                    "replication_type": true,
                                  },
                                  "dirtySinceLastSubmit": false,
                                  "error": undefined,
                                  "errors": Object {},
                                  "form": Object {
                                    "batch": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "destroyOnUnregister": false,
                                    "focus": [Function],
                                    "getFieldState": [Function],
                                    "getRegisteredFields": [Function],
                                    "getState": [Function],
                                    "initialize": [Function],
                                    "isValidationPaused": [Function],
                                    "mutators": Object {
                                      "concat": [Function],
                                      "insert": [Function],
                                      "move": [Function],
                                      "pop": [Function],
                                      "push": [Function],
                                      "remove": [Function],
                                      "removeBatch": [Function],
                                      "shift": [Function],
                                      "swap": [Function],
                                      "unshift": [Function],
                                      "update": [Function],
                                    },
                                    "pauseValidation": [Function],
                                    "registerField": [Function],
                                    "reset": [Function],
                                    "resetFieldState": [Function],
                                    "restart": [Function],
                                    "resumeValidation": [Function],
                                    "setConfig": [Function],
                                    "submit": [Function],
                                    "subscribe": [Function],
                                  },
                                  "hasSubmitErrors": false,
                                  "hasValidationErrors": false,
                                  "initialValues": Object {},
                                  "invalid": false,
                                  "modified": Object {
                                    "replication_type": true,
                                  },
                                  "modifiedSinceLastSubmit": false,
                                  "pristine": false,
                                  "submitError": undefined,
                                  "submitErrors": undefined,
                                  "submitFailed": false,
                                  "submitSucceeded": false,
                                  "submitting": false,
                                  "touched": Object {
                                    "replication_type": false,
                                  },
                                  "valid": true,
                                  "validating": false,
                                  "values": Object {
                                    "replication_type": "remote",
                                  },
                                  "visited": Object {
                                    "replication_type": false,
                                  },
                                }
                              }
                              onCancel={[Function]}
                              onReset={[Function]}
                              resetLabel="Reset"
                              schema={
                                Object {
                                  "fields": Array [
                                    Object {
                                      "component": "select",
                                      "id": "replication_type",
                                      "initialValue": "remote",
                                      "label": "Type",
                                      "name": "replication_type",
                                      "onChange": [Function],
                                      "options": Array [
                                        Object {
                                          "label": "<None>",
                                          "value": "none",
                                        },
                                        Object {
                                          "label": "Global",
                                          "value": "global",
                                        },
                                        Object {
                                          "label": "Remote",
                                          "value": "remote",
                                        },
                                      ],
                                    },
                                    Object {
                                      "component": "sub-form",
                                      "condition": Object {
                                        "is": "global",
                                        "when": "replication_type",
                                      },
                                      "fields": Array [
                                        Object {
                                          "addButtonLabel": "Add Subscription",
                                          "component": "subscriptions-table",
                                          "id": "subscriptions-table",
                                          "name": "subscriptions-table",
                                          "onButtonClick": [Function],
                                          "onCellClick": [Function],
                                          "rows": Array [],
                                        },
                                      ],
                                      "id": "subscriptions_section",
                                      "key": true,
                                      "name": "subscriptions_section",
                                    },
                                    Object {
                                      "component": "spy-field",
                                      "initialize": undefined,
                                      "name": "spy-field",
                                    },
                                  ],
                                }
                              }
                              submitLabel="Save"
                            >
                              <ButtonGroup>
                                <ButtonSet
                                  className=""
                                >
                                  <div
                                    className="bx--btn-set"
                                  >
                                    <Button
                                      buttonType="submit"
                                      key="form-submit"
                                      label="Save"
                                      type="submit"
                                      variant="primary"
                                    >
                                      <Button
                                        kind="primary"
                                        type="submit"
                                        variant="primary"
                                      >
                                        <button
                                          aria-describedby={null}
                                          aria-pressed={null}
                                          className="bx--btn bx--btn--primary"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                          tabIndex={0}
                                          type="submit"
                                          variant="primary"
                                        >
                                          Save
                                        </button>
                                      </Button>
                                    </Button>
                                    <Button
                                      buttonType="reset"
                                      disabled={false}
                                      key="form-reset"
                                      label="Reset"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <Button
                                        disabled={false}
                                        kind="secondary"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <button
                                          aria-describedby={null}
                                          aria-pressed={null}
                                          className="bx--btn bx--btn--secondary"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                          tabIndex={0}
                                          type="button"
                                        >
                                          Reset
                                        </button>
                                      </Button>
                                    </Button>
                                    <Button
                                      buttonType="cancel"
                                      key="form-cancel"
                                      label="Cancel"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <Button
                                        kind="secondary"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <button
                                          aria-describedby={null}
                                          aria-pressed={null}
                                          className="bx--btn bx--btn--secondary"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                          tabIndex={0}
                                          type="button"
                                        >
                                          Cancel
                                        </button>
                                      </Button>
                                    </Button>
                                  </div>
                                </ButtonSet>
                              </ButtonGroup>
                            </FormControls>
                          </FormSpy>
                           
                        </form>
                      </Form>
                    </Form>
                  </FormTemplate>
                </WrappedFormTemplate>
              </Component>
            </ReactFinalForm>
          </FormRenderer>
        </MiqFormRenderer>
      </Connect(MiqFormRenderer)>
      <Modal
        hasScrollingContent={false}
        modalHeading="Add Subscription"
        modalLabel=""
        onKeyDown={[Function]}
        onRequestClose={[Function]}
        onRequestSubmit={[Function]}
        open={false}
        passiveModal={true}
        preventCloseOnClickOutside={false}
        primaryButtonDisabled={false}
        selectorPrimaryFocus="[data-modal-primary-focus]"
      >
        <div
          className="bx--modal"
          onBlur={[Function]}
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          role="presentation"
        >
          <span
            className="bx--visually-hidden"
            role="link"
            tabIndex="0"
          >
            Focus sentinel
          </span>
          <div
            aria-label="Add Subscription"
            aria-modal="true"
            className="bx--modal-container"
            role="dialog"
            tabIndex="-1"
          >
            <div
              className="bx--modal-header"
            >
              <button
                aria-label="close"
                className="bx--modal-close"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(Close20)
                  aria-hidden="true"
                  className="bx--modal-close__icon"
                  tabIndex="-1"
                >
                  <Icon
                    aria-hidden="true"
                    className="bx--modal-close__icon"
                    fill="currentColor"
                    height={20}
                    preserveAspectRatio="xMidYMid meet"
                    tabIndex="-1"
                    viewBox="0 0 32 32"
                    width={20}
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <svg
                      aria-hidden={true}
                      className="bx--modal-close__icon"
                      fill="currentColor"
                      focusable="false"
                      height={20}
                      preserveAspectRatio="xMidYMid meet"
                      viewBox="0 0 32 32"
                      width={20}
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M17.4141 16L24 9.4141 22.5859 8 16 14.5859 9.4143 8 8 9.4141 14.5859 16 8 22.5859 9.4143 24 16 17.4141 22.5859 24 24 22.5859 17.4141 16z"
                      />
                    </svg>
                  </Icon>
                </ForwardRef(Close20)>
              </button>
              <h3
                className="bx--modal-header__heading"
                id="bx--modal-header__heading--modal-3"
              >
                Add Subscription
              </h3>
            </div>
            <div
              className="bx--modal-content"
              id="bx--modal-body--modal-3"
            >
              <Connect(MiqFormRenderer)
                buttonsLabels={
                  Object {
                    "submitLabel": "Accept",
                  }
                }
                canReset={true}
                componentMapper={
                  Object {
                    "checkbox": [Function],
                    "code-editor": [Function],
                    "date-picker": [Function],
                    "dual-list-select": [Function],
                    "edit-password-field": [Function],
                    "field-array": [Function],
                    "file-upload": [Function],
                    "font-icon-picker": [Function],
                    "font-icon-picker-ddf": [Function],
                    "key-value-list": [Function],
                    "multi-select": [Function],
                    "password-field": [Function],
                    "plain-text": [Function],
                    "radio": [Function],
                    "select": [Function],
                    "slider": [Function],
                    "sub-form": [Function],
                    "subscriptions-table": [Function],
                    "switch": [Function],
                    "tabs": [Function],
                    "text-field": [Function],
                    "textarea": [Function],
                    "time-picker": [Function],
                    "tree-selector": [Function],
                    "tree-view": [Function],
                    "validate-credentials": [Function],
                    "wizard": [Function],
                  }
                }
                initialValues={Object {}}
                onCancel={[Function]}
                onSubmit={[Function]}
                schema={
                  Object {
                    "fields": Array [
                      Object {
                        "component": "text-field",
                        "id": "dbname",
                        "isRequired": true,
                        "label": "Database",
                        "name": "dbname",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "host",
                        "isRequired": true,
                        "label": "Host",
                        "name": "host",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "user",
                        "isRequired": true,
                        "label": "Username",
                        "name": "user",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "password",
                        "isRequired": true,
                        "label": "Password",
                        "name": "password",
                        "type": "password",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "port",
                        "isRequired": true,
                        "label": "Port",
                        "name": "port",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                    ],
                  }
                }
              >
                <MiqFormRenderer
                  buttonsLabels={
                    Object {
                      "submitLabel": "Accept",
                    }
                  }
                  canReset={true}
                  className="form-react"
                  componentMapper={
                    Object {
                      "checkbox": [Function],
                      "code-editor": [Function],
                      "date-picker": [Function],
                      "dual-list-select": [Function],
                      "edit-password-field": [Function],
                      "field-array": [Function],
                      "file-upload": [Function],
                      "font-icon-picker": [Function],
                      "font-icon-picker-ddf": [Function],
                      "key-value-list": [Function],
                      "multi-select": [Function],
                      "password-field": [Function],
                      "plain-text": [Function],
                      "radio": [Function],
                      "select": [Function],
                      "slider": [Function],
                      "sub-form": [Function],
                      "subscriptions-table": [Function],
                      "switch": [Function],
                      "tabs": [Function],
                      "text-field": [Function],
                      "textarea": [Function],
                      "time-picker": [Function],
                      "tree-selector": [Function],
                      "tree-view": [Function],
                      "validate-credentials": [Function],
                      "wizard": [Function],
                    }
                  }
                  disableSubmit={
                    Array [
                      "pristine",
                      "invalid",
                    ]
                  }
                  dispatch={[Function]}
                  initialValues={Object {}}
                  onCancel={[Function]}
                  onSubmit={[Function]}
                  schema={
                    Object {
                      "fields": Array [
                        Object {
                          "component": "text-field",
                          "id": "dbname",
                          "isRequired": true,
                          "label": "Database",
                          "name": "dbname",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "host",
                          "isRequired": true,
                          "label": "Host",
                          "name": "host",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "user",
                          "isRequired": true,
                          "label": "Username",
                          "name": "user",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "password",
                          "isRequired": true,
                          "label": "Password",
                          "name": "password",
                          "type": "password",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "port",
                          "isRequired": true,
                          "label": "Port",
                          "name": "port",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                      ],
                    }
                  }
                  showFormControls={true}
                >
                  <FormRenderer
                    FormTemplate={[Function]}
                    clearOnUnmount={false}
                    componentMapper={
                      Object {
                        "checkbox": [Function],
                        "code-editor": [Function],
                        "date-picker": [Function],
                        "dual-list-select": [Function],
                        "edit-password-field": [Function],
                        "field-array": [Function],
                        "file-upload": [Function],
                        "font-icon-picker": [Function],
                        "font-icon-picker-ddf": [Function],
                        "key-value-list": [Function],
                        "multi-select": [Function],
                        "password-field": [Function],
                        "plain-text": [Function],
                        "radio": [Function],
                        "select": [Function],
                        "slider": [Function],
                        "spy-field": [Function],
                        "sub-form": [Function],
                        "subscriptions-table": [Function],
                        "switch": [Function],
                        "tabs": [Function],
                        "text-field": [Function],
                        "textarea": [Function],
                        "time-picker": [Function],
                        "tree-selector": [Function],
                        "tree-view": [Function],
                        "validate-credentials": [Function],
                        "wizard": [Function],
                      }
                    }
                    dispatch={[Function]}
                    initialValues={Object {}}
                    onCancel={[Function]}
                    onReset={[Function]}
                    onSubmit={[Function]}
                    schema={
                      Object {
                        "fields": Array [
                          Object {
                            "component": "text-field",
                            "id": "dbname",
                            "isRequired": true,
                            "label": "Database",
                            "name": "dbname",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "host",
                            "isRequired": true,
                            "label": "Host",
                            "name": "host",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "user",
                            "isRequired": true,
                            "label": "Username",
                            "name": "user",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "password",
                            "isRequired": true,
                            "label": "Password",
                            "name": "password",
                            "type": "password",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "port",
                            "isRequired": true,
                            "label": "Port",
                            "name": "port",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "spy-field",
                            "initialize": undefined,
                            "name": "spy-field",
                          },
                        ],
                      }
                    }
                  >
                    <ReactFinalForm
                      decorators={
                        Array [
                          [Function],
                        ]
                      }
                      dispatch={[Function]}
                      initialValues={Object {}}
                      mutators={
                        Object {
                          "concat": [Function],
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "removeBatch": [Function],
                          "shift": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                          "update": [Function],
                        }
                      }
                      onSubmit={[Function]}
                      render={[Function]}
                      subscription={
                        Object {
                          "pristine": true,
                          "submitting": true,
                          "valid": true,
                        }
                      }
                    >
                      <Component
                        formFields={
                          Array [
                            <SingleField
                              component="text-field"
                              id="dbname"
                              isRequired={true}
                              label="Database"
                              name="dbname"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="host"
                              isRequired={true}
                              label="Host"
                              name="host"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="user"
                              isRequired={true}
                              label="Username"
                              name="user"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="password"
                              isRequired={true}
                              label="Password"
                              name="password"
                              type="password"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="port"
                              isRequired={true}
                              label="Port"
                              name="port"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="spy-field"
                              name="spy-field"
                            />,
                          ]
                        }
                        schema={
                          Object {
                            "fields": Array [
                              Object {
                                "component": "text-field",
                                "id": "dbname",
                                "isRequired": true,
                                "label": "Database",
                                "name": "dbname",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "host",
                                "isRequired": true,
                                "label": "Host",
                                "name": "host",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "user",
                                "isRequired": true,
                                "label": "Username",
                                "name": "user",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "password",
                                "isRequired": true,
                                "label": "Password",
                                "name": "password",
                                "type": "password",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "port",
                                "isRequired": true,
                                "label": "Port",
                                "name": "port",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "spy-field",
                                "initialize": undefined,
                                "name": "spy-field",
                              },
                            ],
                          }
                        }
                      >
                        <WrappedFormTemplate
                          canReset={true}
                          cancelLabel="Cancel"
                          disableSubmit={
                            Array [
                              "pristine",
                              "invalid",
                            ]
                          }
                          formFields={
                            Array [
                              <SingleField
                                component="text-field"
                                id="dbname"
                                isRequired={true}
                                label="Database"
                                name="dbname"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="host"
                                isRequired={true}
                                label="Host"
                                name="host"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="user"
                                isRequired={true}
                                label="Username"
                                name="user"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="password"
                                isRequired={true}
                                label="Password"
                                name="password"
                                type="password"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="port"
                                isRequired={true}
                                label="Port"
                                name="port"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="spy-field"
                                name="spy-field"
                              />,
                            ]
                          }
                          formWrapperProps={
                            Object {
                              "className": "form-react",
                            }
                          }
                          resetLabel="Reset"
                          schema={
                            Object {
                              "fields": Array [
                                Object {
                                  "component": "text-field",
                                  "id": "dbname",
                                  "isRequired": true,
                                  "label": "Database",
                                  "name": "dbname",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "host",
                                  "isRequired": true,
                                  "label": "Host",
                                  "name": "host",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "user",
                                  "isRequired": true,
                                  "label": "Username",
                                  "name": "user",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "password",
                                  "isRequired": true,
                                  "label": "Password",
                                  "name": "password",
                                  "type": "password",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "port",
                                  "isRequired": true,
                                  "label": "Port",
                                  "name": "port",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "spy-field",
                                  "initialize": undefined,
                                  "name": "spy-field",
                                },
                              ],
                            }
                          }
                          showFormControls={true}
                          submitLabel="Accept"
                        >
                          <FormTemplate
                            Button={[Function]}
                            ButtonGroup={[Function]}
                            Description={[Function]}
                            FormWrapper={[Function]}
                            Header={[Function]}
                            Title={[Function]}
                            buttonOrder={
                              Array [
                                "submit",
                                "reset",
                                "cancel",
                              ]
                            }
                            canReset={true}
                            cancelLabel="Cancel"
                            disableSubmit={
                              Array [
                                "pristine",
                                "invalid",
                              ]
                            }
                            formFields={
                              Array [
                                <SingleField
                                  component="text-field"
                                  id="dbname"
                                  isRequired={true}
                                  label="Database"
                                  name="dbname"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="host"
                                  isRequired={true}
                                  label="Host"
                                  name="host"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="user"
                                  isRequired={true}
                                  label="Username"
                                  name="user"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="password"
                                  isRequired={true}
                                  label="Password"
                                  name="password"
                                  type="password"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="port"
                                  isRequired={true}
                                  label="Port"
                                  name="port"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="spy-field"
                                  name="spy-field"
                                />,
                              ]
                            }
                            formWrapperProps={
                              Object {
                                "className": "form-react",
                              }
                            }
                            resetLabel="Reset"
                            schema={
                              Object {
                                "fields": Array [
                                  Object {
                                    "component": "text-field",
                                    "id": "dbname",
                                    "isRequired": true,
                                    "label": "Database",
                                    "name": "dbname",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "host",
                                    "isRequired": true,
                                    "label": "Host",
                                    "name": "host",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "user",
                                    "isRequired": true,
                                    "label": "Username",
                                    "name": "user",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "password",
                                    "isRequired": true,
                                    "label": "Password",
                                    "name": "password",
                                    "type": "password",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "port",
                                    "isRequired": true,
                                    "label": "Port",
                                    "name": "port",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "spy-field",
                                    "initialize": undefined,
                                    "name": "spy-field",
                                  },
                                ],
                              }
                            }
                            showFormControls={true}
                            submitLabel="Accept"
                          >
                            <Form
                              className="form-react"
                              onSubmit={[Function]}
                            >
                              <Form
                                className="form-0-2-3 form-react"
                                noValidate={true}
                                onSubmit={[Function]}
                              >
                                <form
                                  className="bx--form form-0-2-3 form-react"
                                  noValidate={true}
                                  onSubmit={[Function]}
                                >
                                   
                                  <SingleField
                                    component="text-field"
                                    id="dbname"
                                    isRequired={true}
                                    key="dbname"
                                    label="Database"
                                    name="dbname"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "dbname",
                                          "isRequired": true,
                                          "label": "Database",
                                          "name": "dbname",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="dbname"
                                          isRequired={true}
                                          label="Database"
                                          name="dbname"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="dbname"
                                            invalid={false}
                                            invalidText=""
                                            key="dbname"
                                            labelText={
                                              <IsRequired>
                                                Database
                                              </IsRequired>
                                            }
                                            name="dbname"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="dbname"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Database
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="dbname"
                                                    name="dbname"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="host"
                                    isRequired={true}
                                    key="host"
                                    label="Host"
                                    name="host"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "host",
                                          "isRequired": true,
                                          "label": "Host",
                                          "name": "host",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="host"
                                          isRequired={true}
                                          label="Host"
                                          name="host"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="host"
                                            invalid={false}
                                            invalidText=""
                                            key="host"
                                            labelText={
                                              <IsRequired>
                                                Host
                                              </IsRequired>
                                            }
                                            name="host"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="host"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Host
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="host"
                                                    name="host"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="user"
                                    isRequired={true}
                                    key="user"
                                    label="Username"
                                    name="user"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "user",
                                          "isRequired": true,
                                          "label": "Username",
                                          "name": "user",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="user"
                                          isRequired={true}
                                          label="Username"
                                          name="user"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="user"
                                            invalid={false}
                                            invalidText=""
                                            key="user"
                                            labelText={
                                              <IsRequired>
                                                Username
                                              </IsRequired>
                                            }
                                            name="user"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="user"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Username
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="user"
                                                    name="user"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="password"
                                    isRequired={true}
                                    key="password"
                                    label="Password"
                                    name="password"
                                    type="password"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "password",
                                          "isRequired": true,
                                          "label": "Password",
                                          "name": "password",
                                          "type": "password",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="password"
                                          isRequired={true}
                                          label="Password"
                                          name="password"
                                          type="password"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="password"
                                            invalid={false}
                                            invalidText=""
                                            key="password"
                                            labelText={
                                              <IsRequired>
                                                Password
                                              </IsRequired>
                                            }
                                            name="password"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            type="password"
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="password"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Password
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="password"
                                                    name="password"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="password"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="port"
                                    isRequired={true}
                                    key="port"
                                    label="Port"
                                    name="port"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "port",
                                          "isRequired": true,
                                          "label": "Port",
                                          "name": "port",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="port"
                                          isRequired={true}
                                          label="Port"
                                          name="port"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="port"
                                            invalid={false}
                                            invalidText=""
                                            key="port"
                                            labelText={
                                              <IsRequired>
                                                Port
                                              </IsRequired>
                                            }
                                            name="port"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="port"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Port
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="port"
                                                    name="port"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="spy-field"
                                    key="spy-field"
                                    name="spy-field"
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "spy-field",
                                          "initialize": undefined,
                                          "name": "spy-field",
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <SpyField
                                          component="spy-field"
                                          name="spy-field"
                                        >
                                          <FormSpy
                                            onChange={[Function]}
                                            subscription={
                                              Object {
                                                "pristine": true,
                                                "valid": true,
                                              }
                                            }
                                          />
                                        </SpyField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <FormSpy>
                                    <FormControls
                                      Button={[Function]}
                                      ButtonGroup={[Function]}
                                      FormSpy={[Function]}
                                      buttonOrder={
                                        Array [
                                          "submit",
                                          "reset",
                                          "cancel",
                                        ]
                                      }
                                      canReset={true}
                                      cancelLabel="Cancel"
                                      disableSubmit={true}
                                      formFields={
                                        Array [
                                          <SingleField
                                            component="text-field"
                                            id="dbname"
                                            isRequired={true}
                                            label="Database"
                                            name="dbname"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="host"
                                            isRequired={true}
                                            label="Host"
                                            name="host"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="user"
                                            isRequired={true}
                                            label="Username"
                                            name="user"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="password"
                                            isRequired={true}
                                            label="Password"
                                            name="password"
                                            type="password"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="port"
                                            isRequired={true}
                                            label="Port"
                                            name="port"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="spy-field"
                                            name="spy-field"
                                          />,
                                        ]
                                      }
                                      formSpyProps={
                                        Object {
                                          "active": undefined,
                                          "dirty": false,
                                          "dirtyFields": Object {},
                                          "dirtyFieldsSinceLastSubmit": Object {},
                                          "dirtySinceLastSubmit": false,
                                          "error": undefined,
                                          "errors": Object {
                                            "dbname": "Required",
                                            "host": "Required",
                                            "password": "Required",
                                            "port": "Required",
                                            "user": "Required",
                                          },
                                          "form": Object {
                                            "batch": [Function],
                                            "blur": [Function],
                                            "change": [Function],
                                            "destroyOnUnregister": false,
                                            "focus": [Function],
                                            "getFieldState": [Function],
                                            "getRegisteredFields": [Function],
                                            "getState": [Function],
                                            "initialize": [Function],
                                            "isValidationPaused": [Function],
                                            "mutators": Object {
                                              "concat": [Function],
                                              "insert": [Function],
                                              "move": [Function],
                                              "pop": [Function],
                                              "push": [Function],
                                              "remove": [Function],
                                              "removeBatch": [Function],
                                              "shift": [Function],
                                              "swap": [Function],
                                              "unshift": [Function],
                                              "update": [Function],
                                            },
                                            "pauseValidation": [Function],
                                            "registerField": [Function],
                                            "reset": [Function],
                                            "resetFieldState": [Function],
                                            "restart": [Function],
                                            "resumeValidation": [Function],
                                            "setConfig": [Function],
                                            "submit": [Function],
                                            "subscribe": [Function],
                                          },
                                          "hasSubmitErrors": false,
                                          "hasValidationErrors": true,
                                          "initialValues": Object {},
                                          "invalid": true,
                                          "modified": Object {
                                            "dbname": false,
                                            "host": false,
                                            "password": false,
                                            "port": false,
                                            "user": false,
                                          },
                                          "modifiedSinceLastSubmit": false,
                                          "pristine": true,
                                          "submitError": undefined,
                                          "submitErrors": undefined,
                                          "submitFailed": false,
                                          "submitSucceeded": false,
                                          "submitting": false,
                                          "touched": Object {
                                            "dbname": false,
                                            "host": false,
                                            "password": false,
                                            "port": false,
                                            "user": false,
                                          },
                                          "valid": false,
                                          "validating": false,
                                          "values": Object {},
                                          "visited": Object {
                                            "dbname": false,
                                            "host": false,
                                            "password": false,
                                            "port": false,
                                            "user": false,
                                          },
                                        }
                                      }
                                      onCancel={[Function]}
                                      onReset={[Function]}
                                      resetLabel="Reset"
                                      schema={
                                        Object {
                                          "fields": Array [
                                            Object {
                                              "component": "text-field",
                                              "id": "dbname",
                                              "isRequired": true,
                                              "label": "Database",
                                              "name": "dbname",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "host",
                                              "isRequired": true,
                                              "label": "Host",
                                              "name": "host",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "user",
                                              "isRequired": true,
                                              "label": "Username",
                                              "name": "user",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "password",
                                              "isRequired": true,
                                              "label": "Password",
                                              "name": "password",
                                              "type": "password",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "port",
                                              "isRequired": true,
                                              "label": "Port",
                                              "name": "port",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "spy-field",
                                              "initialize": undefined,
                                              "name": "spy-field",
                                            },
                                          ],
                                        }
                                      }
                                      submitLabel="Accept"
                                    >
                                      <ButtonGroup>
                                        <ButtonSet
                                          className=""
                                        >
                                          <div
                                            className="bx--btn-set"
                                          >
                                            <Button
                                              buttonType="submit"
                                              disabled={true}
                                              key="form-submit"
                                              label="Accept"
                                              type="submit"
                                              variant="primary"
                                            >
                                              <Button
                                                disabled={true}
                                                kind="primary"
                                                type="submit"
                                                variant="primary"
                                              >
                                                <button
                                                  aria-describedby={null}
                                                  aria-pressed={null}
                                                  className="bx--btn bx--btn--primary bx--btn--disabled"
                                                  disabled={true}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onMouseEnter={[Function]}
                                                  onMouseLeave={[Function]}
                                                  tabIndex={0}
                                                  type="submit"
                                                  variant="primary"
                                                >
                                                  Accept
                                                </button>
                                              </Button>
                                            </Button>
                                            <Button
                                              buttonType="reset"
                                              disabled={true}
                                              key="form-reset"
                                              label="Reset"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <Button
                                                disabled={true}
                                                kind="secondary"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <button
                                                  aria-describedby={null}
                                                  aria-pressed={null}
                                                  className="bx--btn bx--btn--secondary bx--btn--disabled"
                                                  disabled={true}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onMouseEnter={[Function]}
                                                  onMouseLeave={[Function]}
                                                  tabIndex={0}
                                                  type="button"
                                                >
                                                  Reset
                                                </button>
                                              </Button>
                                            </Button>
                                            <Button
                                              buttonType="cancel"
                                              key="form-cancel"
                                              label="Cancel"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <Button
                                                kind="secondary"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <button
                                                  aria-describedby={null}
                                                  aria-pressed={null}
                                                  className="bx--btn bx--btn--secondary"
                                                  disabled={false}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onMouseEnter={[Function]}
                                                  onMouseLeave={[Function]}
                                                  tabIndex={0}
                                                  type="button"
                                                >
                                                  Cancel
                                                </button>
                                              </Button>
                                            </Button>
                                          </div>
                                        </ButtonSet>
                                      </ButtonGroup>
                                    </FormControls>
                                  </FormSpy>
                                   
                                </form>
                              </Form>
                            </Form>
                          </FormTemplate>
                        </WrappedFormTemplate>
                      </Component>
                    </ReactFinalForm>
                  </FormRenderer>
                </MiqFormRenderer>
              </Connect(MiqFormRenderer)>
            </div>
          </div>
          <span
            className="bx--visually-hidden"
            role="link"
            tabIndex="0"
          >
            Focus sentinel
          </span>
        </div>
      </Modal>
    </div>
  </SettingsReplicationForm>
</Provider>
`;

exports[`SettingsReplicationForm Form Component should render SettingsReplicationForm correctly 1`] = `""`;

exports[`SettingsReplicationForm Form Component should render the replication type dropdown 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <SettingsReplicationForm
    pglogicalReplicationFormId="new"
  >
    <div>
      <Connect(MiqFormRenderer)
        buttonsLabels={
          Object {
            "submitLabel": "Save",
          }
        }
        canReset={true}
        componentMapper={
          Object {
            "checkbox": [Function],
            "code-editor": [Function],
            "date-picker": [Function],
            "dual-list-select": [Function],
            "edit-password-field": [Function],
            "field-array": [Function],
            "file-upload": [Function],
            "font-icon-picker": [Function],
            "font-icon-picker-ddf": [Function],
            "key-value-list": [Function],
            "multi-select": [Function],
            "password-field": [Function],
            "plain-text": [Function],
            "radio": [Function],
            "select": [Function],
            "slider": [Function],
            "sub-form": [Function],
            "subscriptions-table": [Function],
            "switch": [Function],
            "tabs": [Function],
            "text-field": [Function],
            "textarea": [Function],
            "time-picker": [Function],
            "tree-selector": [Function],
            "tree-view": [Function],
            "validate-credentials": [Function],
            "wizard": [Function],
          }
        }
        onCancel={[Function]}
        onSubmit={[Function]}
        schema={
          Object {
            "fields": Array [
              Object {
                "component": "select",
                "id": "replication_type",
                "initialValue": undefined,
                "label": "Type",
                "name": "replication_type",
                "onChange": [Function],
                "options": Array [
                  Object {
                    "label": "<None>",
                    "value": "none",
                  },
                  Object {
                    "label": "Global",
                    "value": "global",
                  },
                  Object {
                    "label": "Remote",
                    "value": "remote",
                  },
                ],
              },
              Object {
                "component": "sub-form",
                "condition": Object {
                  "is": "global",
                  "when": "replication_type",
                },
                "fields": Array [
                  Object {
                    "addButtonLabel": "Add Subscription",
                    "component": "subscriptions-table",
                    "id": "subscriptions-table",
                    "name": "subscriptions-table",
                    "onButtonClick": [Function],
                    "onCellClick": [Function],
                    "rows": Array [],
                  },
                ],
                "id": "subscriptions_section",
                "key": true,
                "name": "subscriptions_section",
              },
            ],
          }
        }
      >
        <MiqFormRenderer
          buttonsLabels={
            Object {
              "submitLabel": "Save",
            }
          }
          canReset={true}
          className="form-react"
          componentMapper={
            Object {
              "checkbox": [Function],
              "code-editor": [Function],
              "date-picker": [Function],
              "dual-list-select": [Function],
              "edit-password-field": [Function],
              "field-array": [Function],
              "file-upload": [Function],
              "font-icon-picker": [Function],
              "font-icon-picker-ddf": [Function],
              "key-value-list": [Function],
              "multi-select": [Function],
              "password-field": [Function],
              "plain-text": [Function],
              "radio": [Function],
              "select": [Function],
              "slider": [Function],
              "sub-form": [Function],
              "subscriptions-table": [Function],
              "switch": [Function],
              "tabs": [Function],
              "text-field": [Function],
              "textarea": [Function],
              "time-picker": [Function],
              "tree-selector": [Function],
              "tree-view": [Function],
              "validate-credentials": [Function],
              "wizard": [Function],
            }
          }
          disableSubmit={
            Array [
              "pristine",
              "invalid",
            ]
          }
          dispatch={[Function]}
          onCancel={[Function]}
          onSubmit={[Function]}
          schema={
            Object {
              "fields": Array [
                Object {
                  "component": "select",
                  "id": "replication_type",
                  "initialValue": undefined,
                  "label": "Type",
                  "name": "replication_type",
                  "onChange": [Function],
                  "options": Array [
                    Object {
                      "label": "<None>",
                      "value": "none",
                    },
                    Object {
                      "label": "Global",
                      "value": "global",
                    },
                    Object {
                      "label": "Remote",
                      "value": "remote",
                    },
                  ],
                },
                Object {
                  "component": "sub-form",
                  "condition": Object {
                    "is": "global",
                    "when": "replication_type",
                  },
                  "fields": Array [
                    Object {
                      "addButtonLabel": "Add Subscription",
                      "component": "subscriptions-table",
                      "id": "subscriptions-table",
                      "name": "subscriptions-table",
                      "onButtonClick": [Function],
                      "onCellClick": [Function],
                      "rows": Array [],
                    },
                  ],
                  "id": "subscriptions_section",
                  "key": true,
                  "name": "subscriptions_section",
                },
              ],
            }
          }
          showFormControls={true}
        >
          <FormRenderer
            FormTemplate={[Function]}
            clearOnUnmount={false}
            componentMapper={
              Object {
                "checkbox": [Function],
                "code-editor": [Function],
                "date-picker": [Function],
                "dual-list-select": [Function],
                "edit-password-field": [Function],
                "field-array": [Function],
                "file-upload": [Function],
                "font-icon-picker": [Function],
                "font-icon-picker-ddf": [Function],
                "key-value-list": [Function],
                "multi-select": [Function],
                "password-field": [Function],
                "plain-text": [Function],
                "radio": [Function],
                "select": [Function],
                "slider": [Function],
                "spy-field": [Function],
                "sub-form": [Function],
                "subscriptions-table": [Function],
                "switch": [Function],
                "tabs": [Function],
                "text-field": [Function],
                "textarea": [Function],
                "time-picker": [Function],
                "tree-selector": [Function],
                "tree-view": [Function],
                "validate-credentials": [Function],
                "wizard": [Function],
              }
            }
            dispatch={[Function]}
            initialValues={Object {}}
            onCancel={[Function]}
            onReset={[Function]}
            onSubmit={[Function]}
            schema={
              Object {
                "fields": Array [
                  Object {
                    "component": "select",
                    "id": "replication_type",
                    "initialValue": undefined,
                    "label": "Type",
                    "name": "replication_type",
                    "onChange": [Function],
                    "options": Array [
                      Object {
                        "label": "<None>",
                        "value": "none",
                      },
                      Object {
                        "label": "Global",
                        "value": "global",
                      },
                      Object {
                        "label": "Remote",
                        "value": "remote",
                      },
                    ],
                  },
                  Object {
                    "component": "sub-form",
                    "condition": Object {
                      "is": "global",
                      "when": "replication_type",
                    },
                    "fields": Array [
                      Object {
                        "addButtonLabel": "Add Subscription",
                        "component": "subscriptions-table",
                        "id": "subscriptions-table",
                        "name": "subscriptions-table",
                        "onButtonClick": [Function],
                        "onCellClick": [Function],
                        "rows": Array [],
                      },
                    ],
                    "id": "subscriptions_section",
                    "key": true,
                    "name": "subscriptions_section",
                  },
                  Object {
                    "component": "spy-field",
                    "initialize": undefined,
                    "name": "spy-field",
                  },
                ],
              }
            }
          >
            <ReactFinalForm
              decorators={
                Array [
                  [Function],
                ]
              }
              dispatch={[Function]}
              initialValues={Object {}}
              mutators={
                Object {
                  "concat": [Function],
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "removeBatch": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                }
              }
              onSubmit={[Function]}
              render={[Function]}
              subscription={
                Object {
                  "pristine": true,
                  "submitting": true,
                  "valid": true,
                }
              }
            >
              <Component
                formFields={
                  Array [
                    <SingleField
                      component="select"
                      id="replication_type"
                      label="Type"
                      name="replication_type"
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "<None>",
                            "value": "none",
                          },
                          Object {
                            "label": "Global",
                            "value": "global",
                          },
                          Object {
                            "label": "Remote",
                            "value": "remote",
                          },
                        ]
                      }
                    />,
                    <SingleField
                      component="sub-form"
                      condition={
                        Object {
                          "is": "global",
                          "when": "replication_type",
                        }
                      }
                      fields={
                        Array [
                          Object {
                            "addButtonLabel": "Add Subscription",
                            "component": "subscriptions-table",
                            "id": "subscriptions-table",
                            "name": "subscriptions-table",
                            "onButtonClick": [Function],
                            "onCellClick": [Function],
                            "rows": Array [],
                          },
                        ]
                      }
                      id="subscriptions_section"
                      name="subscriptions_section"
                    />,
                    <SingleField
                      component="spy-field"
                      name="spy-field"
                    />,
                  ]
                }
                schema={
                  Object {
                    "fields": Array [
                      Object {
                        "component": "select",
                        "id": "replication_type",
                        "initialValue": undefined,
                        "label": "Type",
                        "name": "replication_type",
                        "onChange": [Function],
                        "options": Array [
                          Object {
                            "label": "<None>",
                            "value": "none",
                          },
                          Object {
                            "label": "Global",
                            "value": "global",
                          },
                          Object {
                            "label": "Remote",
                            "value": "remote",
                          },
                        ],
                      },
                      Object {
                        "component": "sub-form",
                        "condition": Object {
                          "is": "global",
                          "when": "replication_type",
                        },
                        "fields": Array [
                          Object {
                            "addButtonLabel": "Add Subscription",
                            "component": "subscriptions-table",
                            "id": "subscriptions-table",
                            "name": "subscriptions-table",
                            "onButtonClick": [Function],
                            "onCellClick": [Function],
                            "rows": Array [],
                          },
                        ],
                        "id": "subscriptions_section",
                        "key": true,
                        "name": "subscriptions_section",
                      },
                      Object {
                        "component": "spy-field",
                        "initialize": undefined,
                        "name": "spy-field",
                      },
                    ],
                  }
                }
              >
                <WrappedFormTemplate
                  canReset={true}
                  cancelLabel="Cancel"
                  disableSubmit={
                    Array [
                      "pristine",
                      "invalid",
                    ]
                  }
                  formFields={
                    Array [
                      <SingleField
                        component="select"
                        id="replication_type"
                        label="Type"
                        name="replication_type"
                        onChange={[Function]}
                        options={
                          Array [
                            Object {
                              "label": "<None>",
                              "value": "none",
                            },
                            Object {
                              "label": "Global",
                              "value": "global",
                            },
                            Object {
                              "label": "Remote",
                              "value": "remote",
                            },
                          ]
                        }
                      />,
                      <SingleField
                        component="sub-form"
                        condition={
                          Object {
                            "is": "global",
                            "when": "replication_type",
                          }
                        }
                        fields={
                          Array [
                            Object {
                              "addButtonLabel": "Add Subscription",
                              "component": "subscriptions-table",
                              "id": "subscriptions-table",
                              "name": "subscriptions-table",
                              "onButtonClick": [Function],
                              "onCellClick": [Function],
                              "rows": Array [],
                            },
                          ]
                        }
                        id="subscriptions_section"
                        name="subscriptions_section"
                      />,
                      <SingleField
                        component="spy-field"
                        name="spy-field"
                      />,
                    ]
                  }
                  formWrapperProps={
                    Object {
                      "className": "form-react",
                    }
                  }
                  resetLabel="Reset"
                  schema={
                    Object {
                      "fields": Array [
                        Object {
                          "component": "select",
                          "id": "replication_type",
                          "initialValue": undefined,
                          "label": "Type",
                          "name": "replication_type",
                          "onChange": [Function],
                          "options": Array [
                            Object {
                              "label": "<None>",
                              "value": "none",
                            },
                            Object {
                              "label": "Global",
                              "value": "global",
                            },
                            Object {
                              "label": "Remote",
                              "value": "remote",
                            },
                          ],
                        },
                        Object {
                          "component": "sub-form",
                          "condition": Object {
                            "is": "global",
                            "when": "replication_type",
                          },
                          "fields": Array [
                            Object {
                              "addButtonLabel": "Add Subscription",
                              "component": "subscriptions-table",
                              "id": "subscriptions-table",
                              "name": "subscriptions-table",
                              "onButtonClick": [Function],
                              "onCellClick": [Function],
                              "rows": Array [],
                            },
                          ],
                          "id": "subscriptions_section",
                          "key": true,
                          "name": "subscriptions_section",
                        },
                        Object {
                          "component": "spy-field",
                          "initialize": undefined,
                          "name": "spy-field",
                        },
                      ],
                    }
                  }
                  showFormControls={true}
                  submitLabel="Save"
                >
                  <FormTemplate
                    Button={[Function]}
                    ButtonGroup={[Function]}
                    Description={[Function]}
                    FormWrapper={[Function]}
                    Header={[Function]}
                    Title={[Function]}
                    buttonOrder={
                      Array [
                        "submit",
                        "reset",
                        "cancel",
                      ]
                    }
                    canReset={true}
                    cancelLabel="Cancel"
                    disableSubmit={
                      Array [
                        "pristine",
                        "invalid",
                      ]
                    }
                    formFields={
                      Array [
                        <SingleField
                          component="select"
                          id="replication_type"
                          label="Type"
                          name="replication_type"
                          onChange={[Function]}
                          options={
                            Array [
                              Object {
                                "label": "<None>",
                                "value": "none",
                              },
                              Object {
                                "label": "Global",
                                "value": "global",
                              },
                              Object {
                                "label": "Remote",
                                "value": "remote",
                              },
                            ]
                          }
                        />,
                        <SingleField
                          component="sub-form"
                          condition={
                            Object {
                              "is": "global",
                              "when": "replication_type",
                            }
                          }
                          fields={
                            Array [
                              Object {
                                "addButtonLabel": "Add Subscription",
                                "component": "subscriptions-table",
                                "id": "subscriptions-table",
                                "name": "subscriptions-table",
                                "onButtonClick": [Function],
                                "onCellClick": [Function],
                                "rows": Array [],
                              },
                            ]
                          }
                          id="subscriptions_section"
                          name="subscriptions_section"
                        />,
                        <SingleField
                          component="spy-field"
                          name="spy-field"
                        />,
                      ]
                    }
                    formWrapperProps={
                      Object {
                        "className": "form-react",
                      }
                    }
                    resetLabel="Reset"
                    schema={
                      Object {
                        "fields": Array [
                          Object {
                            "component": "select",
                            "id": "replication_type",
                            "initialValue": undefined,
                            "label": "Type",
                            "name": "replication_type",
                            "onChange": [Function],
                            "options": Array [
                              Object {
                                "label": "<None>",
                                "value": "none",
                              },
                              Object {
                                "label": "Global",
                                "value": "global",
                              },
                              Object {
                                "label": "Remote",
                                "value": "remote",
                              },
                            ],
                          },
                          Object {
                            "component": "sub-form",
                            "condition": Object {
                              "is": "global",
                              "when": "replication_type",
                            },
                            "fields": Array [
                              Object {
                                "addButtonLabel": "Add Subscription",
                                "component": "subscriptions-table",
                                "id": "subscriptions-table",
                                "name": "subscriptions-table",
                                "onButtonClick": [Function],
                                "onCellClick": [Function],
                                "rows": Array [],
                              },
                            ],
                            "id": "subscriptions_section",
                            "key": true,
                            "name": "subscriptions_section",
                          },
                          Object {
                            "component": "spy-field",
                            "initialize": undefined,
                            "name": "spy-field",
                          },
                        ],
                      }
                    }
                    showFormControls={true}
                    submitLabel="Save"
                  >
                    <Form
                      className="form-react"
                      onSubmit={[Function]}
                    >
                      <Form
                        className="form-0-2-3 form-react"
                        noValidate={true}
                        onSubmit={[Function]}
                      >
                        <form
                          className="bx--form form-0-2-3 form-react"
                          noValidate={true}
                          onSubmit={[Function]}
                        >
                           
                          <SingleField
                            component="select"
                            id="replication_type"
                            key="replication_type"
                            label="Type"
                            name="replication_type"
                            onChange={[Function]}
                            options={
                              Array [
                                Object {
                                  "label": "<None>",
                                  "value": "none",
                                },
                                Object {
                                  "label": "Global",
                                  "value": "global",
                                },
                                Object {
                                  "label": "Remote",
                                  "value": "remote",
                                },
                              ]
                            }
                          >
                            <FormConditionWrapper
                              field={
                                Object {
                                  "component": "select",
                                  "id": "replication_type",
                                  "initialValue": undefined,
                                  "label": "Type",
                                  "name": "replication_type",
                                  "onChange": [Function],
                                  "options": Array [
                                    Object {
                                      "label": "<None>",
                                      "value": "none",
                                    },
                                    Object {
                                      "label": "Global",
                                      "value": "global",
                                    },
                                    Object {
                                      "label": "Remote",
                                      "value": "remote",
                                    },
                                  ],
                                }
                              }
                            >
                              <FormFieldHideWrapper
                                hideField={false}
                              >
                                <SelectWithOnChange
                                  component="select"
                                  id="replication_type"
                                  label="Type"
                                  name="replication_type"
                                  onChange={[Function]}
                                  options={
                                    Array [
                                      Object {
                                        "label": "<None>",
                                        "value": "none",
                                      },
                                      Object {
                                        "label": "Global",
                                        "value": "global",
                                      },
                                      Object {
                                        "label": "Remote",
                                        "value": "remote",
                                      },
                                    ]
                                  }
                                  placeholder="<Choose>"
                                >
                                  <Select
                                    component="select"
                                    id="replication_type"
                                    label="Type"
                                    loadingMessage="Loading..."
                                    name="replication_type"
                                    options={
                                      Array [
                                        Object {
                                          "label": "<None>",
                                          "value": "none",
                                        },
                                        Object {
                                          "label": "Global",
                                          "value": "global",
                                        },
                                        Object {
                                          "label": "Remote",
                                          "value": "remote",
                                        },
                                      ]
                                    }
                                    placeholder="<Choose>"
                                  >
                                    <Select
                                      SelectComponent={[Function]}
                                      id="replication_type"
                                      invalidText=""
                                      labelText="Type"
                                      loadOptionsChangeCounter={1}
                                      loadingMessage="Loading..."
                                      name="replication_type"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      options={
                                        Array [
                                          Object {
                                            "label": "<None>",
                                            "value": "none",
                                          },
                                          Object {
                                            "label": "Global",
                                            "value": "global",
                                          },
                                          Object {
                                            "label": "Remote",
                                            "value": "remote",
                                          },
                                        ]
                                      }
                                      placeholder="<Choose>"
                                      simpleValue={false}
                                      value=""
                                    >
                                      <ClearedSelect
                                        className=""
                                        closeMenuOnSelect={true}
                                        hideSelectedOptions={false}
                                        id="replication_type"
                                        invalidText=""
                                        isClearable={false}
                                        isFetching={false}
                                        isSearchable={false}
                                        labelText="Type"
                                        name="replication_type"
                                        noOptionsMessage={[Function]}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        onInputChange={[Function]}
                                        options={
                                          Array [
                                            Object {
                                              "label": "<None>",
                                              "value": "none",
                                            },
                                            Object {
                                              "label": "Global",
                                              "value": "global",
                                            },
                                            Object {
                                              "label": "Remote",
                                              "value": "remote",
                                            },
                                          ]
                                        }
                                        placeholder="<Choose>"
                                        value=""
                                      >
                                        <Select
                                          className=""
                                          disabled={false}
                                          helperText=""
                                          id="replication_type"
                                          inline={false}
                                          invalid={false}
                                          invalidText=""
                                          labelText="Type"
                                          light={false}
                                          name="replication_type"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          value=""
                                        >
                                          <div
                                            className="bx--form-item"
                                          >
                                            <div
                                              className="bx--select"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="replication_type"
                                              >
                                                Type
                                              </label>
                                              <div
                                                className="bx--select-input__wrapper"
                                                data-invalid={null}
                                              >
                                                <select
                                                  className="bx--select-input"
                                                  id="replication_type"
                                                  name="replication_type"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  value=""
                                                >
                                                  <SelectItem
                                                    disabled={false}
                                                    hidden={false}
                                                    key="none"
                                                    label="<None>"
                                                    text="<None>"
                                                    value="none"
                                                  >
                                                    <option
                                                      className="bx--select-option"
                                                      disabled={false}
                                                      hidden={false}
                                                      label="<None>"
                                                      value="none"
                                                    >
                                                      &lt;None&gt;
                                                    </option>
                                                  </SelectItem>
                                                  <SelectItem
                                                    disabled={false}
                                                    hidden={false}
                                                    key="global"
                                                    label="Global"
                                                    text="Global"
                                                    value="global"
                                                  >
                                                    <option
                                                      className="bx--select-option"
                                                      disabled={false}
                                                      hidden={false}
                                                      label="Global"
                                                      value="global"
                                                    >
                                                      Global
                                                    </option>
                                                  </SelectItem>
                                                  <SelectItem
                                                    disabled={false}
                                                    hidden={false}
                                                    key="remote"
                                                    label="Remote"
                                                    text="Remote"
                                                    value="remote"
                                                  >
                                                    <option
                                                      className="bx--select-option"
                                                      disabled={false}
                                                      hidden={false}
                                                      label="Remote"
                                                      value="remote"
                                                    >
                                                      Remote
                                                    </option>
                                                  </SelectItem>
                                                </select>
                                                <ForwardRef(ChevronDown16)
                                                  className="bx--select__arrow"
                                                >
                                                  <Icon
                                                    className="bx--select__arrow"
                                                    fill="currentColor"
                                                    height={16}
                                                    preserveAspectRatio="xMidYMid meet"
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <svg
                                                      aria-hidden={true}
                                                      className="bx--select__arrow"
                                                      fill="currentColor"
                                                      focusable="false"
                                                      height={16}
                                                      preserveAspectRatio="xMidYMid meet"
                                                      viewBox="0 0 16 16"
                                                      width={16}
                                                      xmlns="http://www.w3.org/2000/svg"
                                                    >
                                                      <path
                                                        d="M8 11L3 6 3.7 5.3 8 9.6 12.3 5.3 13 6z"
                                                      />
                                                    </svg>
                                                  </Icon>
                                                </ForwardRef(ChevronDown16)>
                                              </div>
                                            </div>
                                          </div>
                                        </Select>
                                      </ClearedSelect>
                                    </Select>
                                  </Select>
                                </SelectWithOnChange>
                              </FormFieldHideWrapper>
                            </FormConditionWrapper>
                          </SingleField>
                          <SingleField
                            component="sub-form"
                            condition={
                              Object {
                                "is": "global",
                                "when": "replication_type",
                              }
                            }
                            fields={
                              Array [
                                Object {
                                  "addButtonLabel": "Add Subscription",
                                  "component": "subscriptions-table",
                                  "id": "subscriptions-table",
                                  "name": "subscriptions-table",
                                  "onButtonClick": [Function],
                                  "onCellClick": [Function],
                                  "rows": Array [],
                                },
                              ]
                            }
                            id="subscriptions_section"
                            key="true"
                            name="subscriptions_section"
                          >
                            <FormConditionWrapper
                              condition={
                                Object {
                                  "is": "global",
                                  "when": "replication_type",
                                }
                              }
                              field={
                                Object {
                                  "component": "sub-form",
                                  "fields": Array [
                                    Object {
                                      "addButtonLabel": "Add Subscription",
                                      "component": "subscriptions-table",
                                      "id": "subscriptions-table",
                                      "name": "subscriptions-table",
                                      "onButtonClick": [Function],
                                      "onCellClick": [Function],
                                      "rows": Array [],
                                    },
                                  ],
                                  "id": "subscriptions_section",
                                  "name": "subscriptions_section",
                                }
                              }
                            >
                              <ConditionTriggerDetector
                                condition={
                                  Object {
                                    "is": "global",
                                    "when": "replication_type",
                                  }
                                }
                                field={
                                  Object {
                                    "component": "sub-form",
                                    "fields": Array [
                                      Object {
                                        "addButtonLabel": "Add Subscription",
                                        "component": "subscriptions-table",
                                        "id": "subscriptions-table",
                                        "name": "subscriptions-table",
                                        "onButtonClick": [Function],
                                        "onCellClick": [Function],
                                        "rows": Array [],
                                      },
                                    ],
                                    "id": "subscriptions_section",
                                    "name": "subscriptions_section",
                                  }
                                }
                                triggers={
                                  Array [
                                    "replication_type",
                                  ]
                                }
                              >
                                <ForwardRef(Field)
                                  name="replication_type"
                                  subscription={
                                    Object {
                                      "value": true,
                                    }
                                  }
                                >
                                  <ConditionTriggerDetector
                                    condition={
                                      Object {
                                        "is": "global",
                                        "when": "replication_type",
                                      }
                                    }
                                    field={
                                      Object {
                                        "component": "sub-form",
                                        "fields": Array [
                                          Object {
                                            "addButtonLabel": "Add Subscription",
                                            "component": "subscriptions-table",
                                            "id": "subscriptions-table",
                                            "name": "subscriptions-table",
                                            "onButtonClick": [Function],
                                            "onCellClick": [Function],
                                            "rows": Array [],
                                          },
                                        ],
                                        "id": "subscriptions_section",
                                        "name": "subscriptions_section",
                                      }
                                    }
                                    triggers={Array []}
                                    values={
                                      Object {
                                        "replication_type": "",
                                      }
                                    }
                                  >
                                    <ConditionTriggerWrapper
                                      condition={
                                        Object {
                                          "is": "global",
                                          "when": "replication_type",
                                        }
                                      }
                                      field={
                                        Object {
                                          "component": "sub-form",
                                          "fields": Array [
                                            Object {
                                              "addButtonLabel": "Add Subscription",
                                              "component": "subscriptions-table",
                                              "id": "subscriptions-table",
                                              "name": "subscriptions-table",
                                              "onButtonClick": [Function],
                                              "onCellClick": [Function],
                                              "rows": Array [],
                                            },
                                          ],
                                          "id": "subscriptions_section",
                                          "name": "subscriptions_section",
                                        }
                                      }
                                      values={
                                        Object {
                                          "replication_type": "",
                                        }
                                      }
                                    >
                                      <Component
                                        condition={
                                          Object {
                                            "is": "global",
                                            "when": "replication_type",
                                          }
                                        }
                                        field={
                                          Object {
                                            "component": "sub-form",
                                            "fields": Array [
                                              Object {
                                                "addButtonLabel": "Add Subscription",
                                                "component": "subscriptions-table",
                                                "id": "subscriptions-table",
                                                "name": "subscriptions-table",
                                                "onButtonClick": [Function],
                                                "onCellClick": [Function],
                                                "rows": Array [],
                                              },
                                            ],
                                            "id": "subscriptions_section",
                                            "name": "subscriptions_section",
                                          }
                                        }
                                        values={
                                          Object {
                                            "replication_type": "",
                                          }
                                        }
                                      />
                                    </ConditionTriggerWrapper>
                                  </ConditionTriggerDetector>
                                </ForwardRef(Field)>
                              </ConditionTriggerDetector>
                            </FormConditionWrapper>
                          </SingleField>
                          <SingleField
                            component="spy-field"
                            key="spy-field"
                            name="spy-field"
                          >
                            <FormConditionWrapper
                              field={
                                Object {
                                  "component": "spy-field",
                                  "initialize": undefined,
                                  "name": "spy-field",
                                }
                              }
                            >
                              <FormFieldHideWrapper
                                hideField={false}
                              >
                                <SpyField
                                  component="spy-field"
                                  name="spy-field"
                                >
                                  <FormSpy
                                    onChange={[Function]}
                                    subscription={
                                      Object {
                                        "pristine": true,
                                        "valid": true,
                                      }
                                    }
                                  />
                                </SpyField>
                              </FormFieldHideWrapper>
                            </FormConditionWrapper>
                          </SingleField>
                          <FormSpy>
                            <FormControls
                              Button={[Function]}
                              ButtonGroup={[Function]}
                              FormSpy={[Function]}
                              buttonOrder={
                                Array [
                                  "submit",
                                  "reset",
                                  "cancel",
                                ]
                              }
                              canReset={true}
                              cancelLabel="Cancel"
                              disableSubmit={true}
                              formFields={
                                Array [
                                  <SingleField
                                    component="select"
                                    id="replication_type"
                                    label="Type"
                                    name="replication_type"
                                    onChange={[Function]}
                                    options={
                                      Array [
                                        Object {
                                          "label": "<None>",
                                          "value": "none",
                                        },
                                        Object {
                                          "label": "Global",
                                          "value": "global",
                                        },
                                        Object {
                                          "label": "Remote",
                                          "value": "remote",
                                        },
                                      ]
                                    }
                                  />,
                                  <SingleField
                                    component="sub-form"
                                    condition={
                                      Object {
                                        "is": "global",
                                        "when": "replication_type",
                                      }
                                    }
                                    fields={
                                      Array [
                                        Object {
                                          "addButtonLabel": "Add Subscription",
                                          "component": "subscriptions-table",
                                          "id": "subscriptions-table",
                                          "name": "subscriptions-table",
                                          "onButtonClick": [Function],
                                          "onCellClick": [Function],
                                          "rows": Array [],
                                        },
                                      ]
                                    }
                                    id="subscriptions_section"
                                    name="subscriptions_section"
                                  />,
                                  <SingleField
                                    component="spy-field"
                                    name="spy-field"
                                  />,
                                ]
                              }
                              formSpyProps={
                                Object {
                                  "active": undefined,
                                  "dirty": false,
                                  "dirtyFields": Object {},
                                  "dirtyFieldsSinceLastSubmit": Object {},
                                  "dirtySinceLastSubmit": false,
                                  "error": undefined,
                                  "errors": Object {},
                                  "form": Object {
                                    "batch": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "destroyOnUnregister": false,
                                    "focus": [Function],
                                    "getFieldState": [Function],
                                    "getRegisteredFields": [Function],
                                    "getState": [Function],
                                    "initialize": [Function],
                                    "isValidationPaused": [Function],
                                    "mutators": Object {
                                      "concat": [Function],
                                      "insert": [Function],
                                      "move": [Function],
                                      "pop": [Function],
                                      "push": [Function],
                                      "remove": [Function],
                                      "removeBatch": [Function],
                                      "shift": [Function],
                                      "swap": [Function],
                                      "unshift": [Function],
                                      "update": [Function],
                                    },
                                    "pauseValidation": [Function],
                                    "registerField": [Function],
                                    "reset": [Function],
                                    "resetFieldState": [Function],
                                    "restart": [Function],
                                    "resumeValidation": [Function],
                                    "setConfig": [Function],
                                    "submit": [Function],
                                    "subscribe": [Function],
                                  },
                                  "hasSubmitErrors": false,
                                  "hasValidationErrors": false,
                                  "initialValues": Object {},
                                  "invalid": false,
                                  "modified": Object {
                                    "replication_type": false,
                                  },
                                  "modifiedSinceLastSubmit": false,
                                  "pristine": true,
                                  "submitError": undefined,
                                  "submitErrors": undefined,
                                  "submitFailed": false,
                                  "submitSucceeded": false,
                                  "submitting": false,
                                  "touched": Object {
                                    "replication_type": false,
                                  },
                                  "valid": true,
                                  "validating": false,
                                  "values": Object {},
                                  "visited": Object {
                                    "replication_type": false,
                                  },
                                }
                              }
                              onCancel={[Function]}
                              onReset={[Function]}
                              resetLabel="Reset"
                              schema={
                                Object {
                                  "fields": Array [
                                    Object {
                                      "component": "select",
                                      "id": "replication_type",
                                      "initialValue": undefined,
                                      "label": "Type",
                                      "name": "replication_type",
                                      "onChange": [Function],
                                      "options": Array [
                                        Object {
                                          "label": "<None>",
                                          "value": "none",
                                        },
                                        Object {
                                          "label": "Global",
                                          "value": "global",
                                        },
                                        Object {
                                          "label": "Remote",
                                          "value": "remote",
                                        },
                                      ],
                                    },
                                    Object {
                                      "component": "sub-form",
                                      "condition": Object {
                                        "is": "global",
                                        "when": "replication_type",
                                      },
                                      "fields": Array [
                                        Object {
                                          "addButtonLabel": "Add Subscription",
                                          "component": "subscriptions-table",
                                          "id": "subscriptions-table",
                                          "name": "subscriptions-table",
                                          "onButtonClick": [Function],
                                          "onCellClick": [Function],
                                          "rows": Array [],
                                        },
                                      ],
                                      "id": "subscriptions_section",
                                      "key": true,
                                      "name": "subscriptions_section",
                                    },
                                    Object {
                                      "component": "spy-field",
                                      "initialize": undefined,
                                      "name": "spy-field",
                                    },
                                  ],
                                }
                              }
                              submitLabel="Save"
                            >
                              <ButtonGroup>
                                <ButtonSet
                                  className=""
                                >
                                  <div
                                    className="bx--btn-set"
                                  >
                                    <Button
                                      buttonType="submit"
                                      disabled={true}
                                      key="form-submit"
                                      label="Save"
                                      type="submit"
                                      variant="primary"
                                    >
                                      <Button
                                        disabled={true}
                                        kind="primary"
                                        type="submit"
                                        variant="primary"
                                      >
                                        <button
                                          aria-describedby={null}
                                          aria-pressed={null}
                                          className="bx--btn bx--btn--primary bx--btn--disabled"
                                          disabled={true}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                          tabIndex={0}
                                          type="submit"
                                          variant="primary"
                                        >
                                          Save
                                        </button>
                                      </Button>
                                    </Button>
                                    <Button
                                      buttonType="reset"
                                      disabled={true}
                                      key="form-reset"
                                      label="Reset"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <Button
                                        disabled={true}
                                        kind="secondary"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <button
                                          aria-describedby={null}
                                          aria-pressed={null}
                                          className="bx--btn bx--btn--secondary bx--btn--disabled"
                                          disabled={true}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                          tabIndex={0}
                                          type="button"
                                        >
                                          Reset
                                        </button>
                                      </Button>
                                    </Button>
                                    <Button
                                      buttonType="cancel"
                                      key="form-cancel"
                                      label="Cancel"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <Button
                                        kind="secondary"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <button
                                          aria-describedby={null}
                                          aria-pressed={null}
                                          className="bx--btn bx--btn--secondary"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                          tabIndex={0}
                                          type="button"
                                        >
                                          Cancel
                                        </button>
                                      </Button>
                                    </Button>
                                  </div>
                                </ButtonSet>
                              </ButtonGroup>
                            </FormControls>
                          </FormSpy>
                           
                        </form>
                      </Form>
                    </Form>
                  </FormTemplate>
                </WrappedFormTemplate>
              </Component>
            </ReactFinalForm>
          </FormRenderer>
        </MiqFormRenderer>
      </Connect(MiqFormRenderer)>
      <Modal
        hasScrollingContent={false}
        modalHeading="Add Subscription"
        modalLabel=""
        onKeyDown={[Function]}
        onRequestClose={[Function]}
        onRequestSubmit={[Function]}
        open={false}
        passiveModal={true}
        preventCloseOnClickOutside={false}
        primaryButtonDisabled={false}
        selectorPrimaryFocus="[data-modal-primary-focus]"
      >
        <div
          className="bx--modal"
          onBlur={[Function]}
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          role="presentation"
        >
          <span
            className="bx--visually-hidden"
            role="link"
            tabIndex="0"
          >
            Focus sentinel
          </span>
          <div
            aria-label="Add Subscription"
            aria-modal="true"
            className="bx--modal-container"
            role="dialog"
            tabIndex="-1"
          >
            <div
              className="bx--modal-header"
            >
              <button
                aria-label="close"
                className="bx--modal-close"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(Close20)
                  aria-hidden="true"
                  className="bx--modal-close__icon"
                  tabIndex="-1"
                >
                  <Icon
                    aria-hidden="true"
                    className="bx--modal-close__icon"
                    fill="currentColor"
                    height={20}
                    preserveAspectRatio="xMidYMid meet"
                    tabIndex="-1"
                    viewBox="0 0 32 32"
                    width={20}
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <svg
                      aria-hidden={true}
                      className="bx--modal-close__icon"
                      fill="currentColor"
                      focusable="false"
                      height={20}
                      preserveAspectRatio="xMidYMid meet"
                      viewBox="0 0 32 32"
                      width={20}
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M17.4141 16L24 9.4141 22.5859 8 16 14.5859 9.4143 8 8 9.4141 14.5859 16 8 22.5859 9.4143 24 16 17.4141 22.5859 24 24 22.5859 17.4141 16z"
                      />
                    </svg>
                  </Icon>
                </ForwardRef(Close20)>
              </button>
              <h3
                className="bx--modal-header__heading"
                id="bx--modal-header__heading--modal-1"
              >
                Add Subscription
              </h3>
            </div>
            <div
              className="bx--modal-content"
              id="bx--modal-body--modal-1"
            >
              <Connect(MiqFormRenderer)
                buttonsLabels={
                  Object {
                    "submitLabel": "Accept",
                  }
                }
                canReset={true}
                componentMapper={
                  Object {
                    "checkbox": [Function],
                    "code-editor": [Function],
                    "date-picker": [Function],
                    "dual-list-select": [Function],
                    "edit-password-field": [Function],
                    "field-array": [Function],
                    "file-upload": [Function],
                    "font-icon-picker": [Function],
                    "font-icon-picker-ddf": [Function],
                    "key-value-list": [Function],
                    "multi-select": [Function],
                    "password-field": [Function],
                    "plain-text": [Function],
                    "radio": [Function],
                    "select": [Function],
                    "slider": [Function],
                    "sub-form": [Function],
                    "subscriptions-table": [Function],
                    "switch": [Function],
                    "tabs": [Function],
                    "text-field": [Function],
                    "textarea": [Function],
                    "time-picker": [Function],
                    "tree-selector": [Function],
                    "tree-view": [Function],
                    "validate-credentials": [Function],
                    "wizard": [Function],
                  }
                }
                initialValues={Object {}}
                onCancel={[Function]}
                onSubmit={[Function]}
                schema={
                  Object {
                    "fields": Array [
                      Object {
                        "component": "text-field",
                        "id": "dbname",
                        "isRequired": true,
                        "label": "Database",
                        "name": "dbname",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "host",
                        "isRequired": true,
                        "label": "Host",
                        "name": "host",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "user",
                        "isRequired": true,
                        "label": "Username",
                        "name": "user",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "password",
                        "isRequired": true,
                        "label": "Password",
                        "name": "password",
                        "type": "password",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "port",
                        "isRequired": true,
                        "label": "Port",
                        "name": "port",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                    ],
                  }
                }
              >
                <MiqFormRenderer
                  buttonsLabels={
                    Object {
                      "submitLabel": "Accept",
                    }
                  }
                  canReset={true}
                  className="form-react"
                  componentMapper={
                    Object {
                      "checkbox": [Function],
                      "code-editor": [Function],
                      "date-picker": [Function],
                      "dual-list-select": [Function],
                      "edit-password-field": [Function],
                      "field-array": [Function],
                      "file-upload": [Function],
                      "font-icon-picker": [Function],
                      "font-icon-picker-ddf": [Function],
                      "key-value-list": [Function],
                      "multi-select": [Function],
                      "password-field": [Function],
                      "plain-text": [Function],
                      "radio": [Function],
                      "select": [Function],
                      "slider": [Function],
                      "sub-form": [Function],
                      "subscriptions-table": [Function],
                      "switch": [Function],
                      "tabs": [Function],
                      "text-field": [Function],
                      "textarea": [Function],
                      "time-picker": [Function],
                      "tree-selector": [Function],
                      "tree-view": [Function],
                      "validate-credentials": [Function],
                      "wizard": [Function],
                    }
                  }
                  disableSubmit={
                    Array [
                      "pristine",
                      "invalid",
                    ]
                  }
                  dispatch={[Function]}
                  initialValues={Object {}}
                  onCancel={[Function]}
                  onSubmit={[Function]}
                  schema={
                    Object {
                      "fields": Array [
                        Object {
                          "component": "text-field",
                          "id": "dbname",
                          "isRequired": true,
                          "label": "Database",
                          "name": "dbname",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "host",
                          "isRequired": true,
                          "label": "Host",
                          "name": "host",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "user",
                          "isRequired": true,
                          "label": "Username",
                          "name": "user",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "password",
                          "isRequired": true,
                          "label": "Password",
                          "name": "password",
                          "type": "password",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "port",
                          "isRequired": true,
                          "label": "Port",
                          "name": "port",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                      ],
                    }
                  }
                  showFormControls={true}
                >
                  <FormRenderer
                    FormTemplate={[Function]}
                    clearOnUnmount={false}
                    componentMapper={
                      Object {
                        "checkbox": [Function],
                        "code-editor": [Function],
                        "date-picker": [Function],
                        "dual-list-select": [Function],
                        "edit-password-field": [Function],
                        "field-array": [Function],
                        "file-upload": [Function],
                        "font-icon-picker": [Function],
                        "font-icon-picker-ddf": [Function],
                        "key-value-list": [Function],
                        "multi-select": [Function],
                        "password-field": [Function],
                        "plain-text": [Function],
                        "radio": [Function],
                        "select": [Function],
                        "slider": [Function],
                        "spy-field": [Function],
                        "sub-form": [Function],
                        "subscriptions-table": [Function],
                        "switch": [Function],
                        "tabs": [Function],
                        "text-field": [Function],
                        "textarea": [Function],
                        "time-picker": [Function],
                        "tree-selector": [Function],
                        "tree-view": [Function],
                        "validate-credentials": [Function],
                        "wizard": [Function],
                      }
                    }
                    dispatch={[Function]}
                    initialValues={Object {}}
                    onCancel={[Function]}
                    onReset={[Function]}
                    onSubmit={[Function]}
                    schema={
                      Object {
                        "fields": Array [
                          Object {
                            "component": "text-field",
                            "id": "dbname",
                            "isRequired": true,
                            "label": "Database",
                            "name": "dbname",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "host",
                            "isRequired": true,
                            "label": "Host",
                            "name": "host",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "user",
                            "isRequired": true,
                            "label": "Username",
                            "name": "user",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "password",
                            "isRequired": true,
                            "label": "Password",
                            "name": "password",
                            "type": "password",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "port",
                            "isRequired": true,
                            "label": "Port",
                            "name": "port",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "spy-field",
                            "initialize": undefined,
                            "name": "spy-field",
                          },
                        ],
                      }
                    }
                  >
                    <ReactFinalForm
                      decorators={
                        Array [
                          [Function],
                        ]
                      }
                      dispatch={[Function]}
                      initialValues={Object {}}
                      mutators={
                        Object {
                          "concat": [Function],
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "removeBatch": [Function],
                          "shift": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                          "update": [Function],
                        }
                      }
                      onSubmit={[Function]}
                      render={[Function]}
                      subscription={
                        Object {
                          "pristine": true,
                          "submitting": true,
                          "valid": true,
                        }
                      }
                    >
                      <Component
                        formFields={
                          Array [
                            <SingleField
                              component="text-field"
                              id="dbname"
                              isRequired={true}
                              label="Database"
                              name="dbname"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="host"
                              isRequired={true}
                              label="Host"
                              name="host"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="user"
                              isRequired={true}
                              label="Username"
                              name="user"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="password"
                              isRequired={true}
                              label="Password"
                              name="password"
                              type="password"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="port"
                              isRequired={true}
                              label="Port"
                              name="port"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="spy-field"
                              name="spy-field"
                            />,
                          ]
                        }
                        schema={
                          Object {
                            "fields": Array [
                              Object {
                                "component": "text-field",
                                "id": "dbname",
                                "isRequired": true,
                                "label": "Database",
                                "name": "dbname",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "host",
                                "isRequired": true,
                                "label": "Host",
                                "name": "host",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "user",
                                "isRequired": true,
                                "label": "Username",
                                "name": "user",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "password",
                                "isRequired": true,
                                "label": "Password",
                                "name": "password",
                                "type": "password",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "port",
                                "isRequired": true,
                                "label": "Port",
                                "name": "port",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "spy-field",
                                "initialize": undefined,
                                "name": "spy-field",
                              },
                            ],
                          }
                        }
                      >
                        <WrappedFormTemplate
                          canReset={true}
                          cancelLabel="Cancel"
                          disableSubmit={
                            Array [
                              "pristine",
                              "invalid",
                            ]
                          }
                          formFields={
                            Array [
                              <SingleField
                                component="text-field"
                                id="dbname"
                                isRequired={true}
                                label="Database"
                                name="dbname"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="host"
                                isRequired={true}
                                label="Host"
                                name="host"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="user"
                                isRequired={true}
                                label="Username"
                                name="user"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="password"
                                isRequired={true}
                                label="Password"
                                name="password"
                                type="password"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="port"
                                isRequired={true}
                                label="Port"
                                name="port"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="spy-field"
                                name="spy-field"
                              />,
                            ]
                          }
                          formWrapperProps={
                            Object {
                              "className": "form-react",
                            }
                          }
                          resetLabel="Reset"
                          schema={
                            Object {
                              "fields": Array [
                                Object {
                                  "component": "text-field",
                                  "id": "dbname",
                                  "isRequired": true,
                                  "label": "Database",
                                  "name": "dbname",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "host",
                                  "isRequired": true,
                                  "label": "Host",
                                  "name": "host",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "user",
                                  "isRequired": true,
                                  "label": "Username",
                                  "name": "user",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "password",
                                  "isRequired": true,
                                  "label": "Password",
                                  "name": "password",
                                  "type": "password",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "port",
                                  "isRequired": true,
                                  "label": "Port",
                                  "name": "port",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "spy-field",
                                  "initialize": undefined,
                                  "name": "spy-field",
                                },
                              ],
                            }
                          }
                          showFormControls={true}
                          submitLabel="Accept"
                        >
                          <FormTemplate
                            Button={[Function]}
                            ButtonGroup={[Function]}
                            Description={[Function]}
                            FormWrapper={[Function]}
                            Header={[Function]}
                            Title={[Function]}
                            buttonOrder={
                              Array [
                                "submit",
                                "reset",
                                "cancel",
                              ]
                            }
                            canReset={true}
                            cancelLabel="Cancel"
                            disableSubmit={
                              Array [
                                "pristine",
                                "invalid",
                              ]
                            }
                            formFields={
                              Array [
                                <SingleField
                                  component="text-field"
                                  id="dbname"
                                  isRequired={true}
                                  label="Database"
                                  name="dbname"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="host"
                                  isRequired={true}
                                  label="Host"
                                  name="host"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="user"
                                  isRequired={true}
                                  label="Username"
                                  name="user"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="password"
                                  isRequired={true}
                                  label="Password"
                                  name="password"
                                  type="password"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="port"
                                  isRequired={true}
                                  label="Port"
                                  name="port"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="spy-field"
                                  name="spy-field"
                                />,
                              ]
                            }
                            formWrapperProps={
                              Object {
                                "className": "form-react",
                              }
                            }
                            resetLabel="Reset"
                            schema={
                              Object {
                                "fields": Array [
                                  Object {
                                    "component": "text-field",
                                    "id": "dbname",
                                    "isRequired": true,
                                    "label": "Database",
                                    "name": "dbname",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "host",
                                    "isRequired": true,
                                    "label": "Host",
                                    "name": "host",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "user",
                                    "isRequired": true,
                                    "label": "Username",
                                    "name": "user",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "password",
                                    "isRequired": true,
                                    "label": "Password",
                                    "name": "password",
                                    "type": "password",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "port",
                                    "isRequired": true,
                                    "label": "Port",
                                    "name": "port",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "spy-field",
                                    "initialize": undefined,
                                    "name": "spy-field",
                                  },
                                ],
                              }
                            }
                            showFormControls={true}
                            submitLabel="Accept"
                          >
                            <Form
                              className="form-react"
                              onSubmit={[Function]}
                            >
                              <Form
                                className="form-0-2-3 form-react"
                                noValidate={true}
                                onSubmit={[Function]}
                              >
                                <form
                                  className="bx--form form-0-2-3 form-react"
                                  noValidate={true}
                                  onSubmit={[Function]}
                                >
                                   
                                  <SingleField
                                    component="text-field"
                                    id="dbname"
                                    isRequired={true}
                                    key="dbname"
                                    label="Database"
                                    name="dbname"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "dbname",
                                          "isRequired": true,
                                          "label": "Database",
                                          "name": "dbname",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="dbname"
                                          isRequired={true}
                                          label="Database"
                                          name="dbname"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="dbname"
                                            invalid={false}
                                            invalidText=""
                                            key="dbname"
                                            labelText={
                                              <IsRequired>
                                                Database
                                              </IsRequired>
                                            }
                                            name="dbname"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="dbname"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Database
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="dbname"
                                                    name="dbname"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="host"
                                    isRequired={true}
                                    key="host"
                                    label="Host"
                                    name="host"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "host",
                                          "isRequired": true,
                                          "label": "Host",
                                          "name": "host",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="host"
                                          isRequired={true}
                                          label="Host"
                                          name="host"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="host"
                                            invalid={false}
                                            invalidText=""
                                            key="host"
                                            labelText={
                                              <IsRequired>
                                                Host
                                              </IsRequired>
                                            }
                                            name="host"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="host"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Host
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="host"
                                                    name="host"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="user"
                                    isRequired={true}
                                    key="user"
                                    label="Username"
                                    name="user"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "user",
                                          "isRequired": true,
                                          "label": "Username",
                                          "name": "user",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="user"
                                          isRequired={true}
                                          label="Username"
                                          name="user"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="user"
                                            invalid={false}
                                            invalidText=""
                                            key="user"
                                            labelText={
                                              <IsRequired>
                                                Username
                                              </IsRequired>
                                            }
                                            name="user"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="user"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Username
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="user"
                                                    name="user"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="password"
                                    isRequired={true}
                                    key="password"
                                    label="Password"
                                    name="password"
                                    type="password"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "password",
                                          "isRequired": true,
                                          "label": "Password",
                                          "name": "password",
                                          "type": "password",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="password"
                                          isRequired={true}
                                          label="Password"
                                          name="password"
                                          type="password"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="password"
                                            invalid={false}
                                            invalidText=""
                                            key="password"
                                            labelText={
                                              <IsRequired>
                                                Password
                                              </IsRequired>
                                            }
                                            name="password"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            type="password"
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="password"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Password
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="password"
                                                    name="password"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="password"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="port"
                                    isRequired={true}
                                    key="port"
                                    label="Port"
                                    name="port"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "port",
                                          "isRequired": true,
                                          "label": "Port",
                                          "name": "port",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="port"
                                          isRequired={true}
                                          label="Port"
                                          name="port"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="port"
                                            invalid={false}
                                            invalidText=""
                                            key="port"
                                            labelText={
                                              <IsRequired>
                                                Port
                                              </IsRequired>
                                            }
                                            name="port"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="port"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Port
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="port"
                                                    name="port"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="spy-field"
                                    key="spy-field"
                                    name="spy-field"
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "spy-field",
                                          "initialize": undefined,
                                          "name": "spy-field",
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <SpyField
                                          component="spy-field"
                                          name="spy-field"
                                        >
                                          <FormSpy
                                            onChange={[Function]}
                                            subscription={
                                              Object {
                                                "pristine": true,
                                                "valid": true,
                                              }
                                            }
                                          />
                                        </SpyField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <FormSpy>
                                    <FormControls
                                      Button={[Function]}
                                      ButtonGroup={[Function]}
                                      FormSpy={[Function]}
                                      buttonOrder={
                                        Array [
                                          "submit",
                                          "reset",
                                          "cancel",
                                        ]
                                      }
                                      canReset={true}
                                      cancelLabel="Cancel"
                                      disableSubmit={true}
                                      formFields={
                                        Array [
                                          <SingleField
                                            component="text-field"
                                            id="dbname"
                                            isRequired={true}
                                            label="Database"
                                            name="dbname"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="host"
                                            isRequired={true}
                                            label="Host"
                                            name="host"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="user"
                                            isRequired={true}
                                            label="Username"
                                            name="user"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="password"
                                            isRequired={true}
                                            label="Password"
                                            name="password"
                                            type="password"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="port"
                                            isRequired={true}
                                            label="Port"
                                            name="port"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="spy-field"
                                            name="spy-field"
                                          />,
                                        ]
                                      }
                                      formSpyProps={
                                        Object {
                                          "active": undefined,
                                          "dirty": false,
                                          "dirtyFields": Object {},
                                          "dirtyFieldsSinceLastSubmit": Object {},
                                          "dirtySinceLastSubmit": false,
                                          "error": undefined,
                                          "errors": Object {
                                            "dbname": "Required",
                                            "host": "Required",
                                            "password": "Required",
                                            "port": "Required",
                                            "user": "Required",
                                          },
                                          "form": Object {
                                            "batch": [Function],
                                            "blur": [Function],
                                            "change": [Function],
                                            "destroyOnUnregister": false,
                                            "focus": [Function],
                                            "getFieldState": [Function],
                                            "getRegisteredFields": [Function],
                                            "getState": [Function],
                                            "initialize": [Function],
                                            "isValidationPaused": [Function],
                                            "mutators": Object {
                                              "concat": [Function],
                                              "insert": [Function],
                                              "move": [Function],
                                              "pop": [Function],
                                              "push": [Function],
                                              "remove": [Function],
                                              "removeBatch": [Function],
                                              "shift": [Function],
                                              "swap": [Function],
                                              "unshift": [Function],
                                              "update": [Function],
                                            },
                                            "pauseValidation": [Function],
                                            "registerField": [Function],
                                            "reset": [Function],
                                            "resetFieldState": [Function],
                                            "restart": [Function],
                                            "resumeValidation": [Function],
                                            "setConfig": [Function],
                                            "submit": [Function],
                                            "subscribe": [Function],
                                          },
                                          "hasSubmitErrors": false,
                                          "hasValidationErrors": true,
                                          "initialValues": Object {},
                                          "invalid": true,
                                          "modified": Object {
                                            "dbname": false,
                                            "host": false,
                                            "password": false,
                                            "port": false,
                                            "user": false,
                                          },
                                          "modifiedSinceLastSubmit": false,
                                          "pristine": true,
                                          "submitError": undefined,
                                          "submitErrors": undefined,
                                          "submitFailed": false,
                                          "submitSucceeded": false,
                                          "submitting": false,
                                          "touched": Object {
                                            "dbname": false,
                                            "host": false,
                                            "password": false,
                                            "port": false,
                                            "user": false,
                                          },
                                          "valid": false,
                                          "validating": false,
                                          "values": Object {},
                                          "visited": Object {
                                            "dbname": false,
                                            "host": false,
                                            "password": false,
                                            "port": false,
                                            "user": false,
                                          },
                                        }
                                      }
                                      onCancel={[Function]}
                                      onReset={[Function]}
                                      resetLabel="Reset"
                                      schema={
                                        Object {
                                          "fields": Array [
                                            Object {
                                              "component": "text-field",
                                              "id": "dbname",
                                              "isRequired": true,
                                              "label": "Database",
                                              "name": "dbname",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "host",
                                              "isRequired": true,
                                              "label": "Host",
                                              "name": "host",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "user",
                                              "isRequired": true,
                                              "label": "Username",
                                              "name": "user",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "password",
                                              "isRequired": true,
                                              "label": "Password",
                                              "name": "password",
                                              "type": "password",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "port",
                                              "isRequired": true,
                                              "label": "Port",
                                              "name": "port",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "spy-field",
                                              "initialize": undefined,
                                              "name": "spy-field",
                                            },
                                          ],
                                        }
                                      }
                                      submitLabel="Accept"
                                    >
                                      <ButtonGroup>
                                        <ButtonSet
                                          className=""
                                        >
                                          <div
                                            className="bx--btn-set"
                                          >
                                            <Button
                                              buttonType="submit"
                                              disabled={true}
                                              key="form-submit"
                                              label="Accept"
                                              type="submit"
                                              variant="primary"
                                            >
                                              <Button
                                                disabled={true}
                                                kind="primary"
                                                type="submit"
                                                variant="primary"
                                              >
                                                <button
                                                  aria-describedby={null}
                                                  aria-pressed={null}
                                                  className="bx--btn bx--btn--primary bx--btn--disabled"
                                                  disabled={true}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onMouseEnter={[Function]}
                                                  onMouseLeave={[Function]}
                                                  tabIndex={0}
                                                  type="submit"
                                                  variant="primary"
                                                >
                                                  Accept
                                                </button>
                                              </Button>
                                            </Button>
                                            <Button
                                              buttonType="reset"
                                              disabled={true}
                                              key="form-reset"
                                              label="Reset"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <Button
                                                disabled={true}
                                                kind="secondary"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <button
                                                  aria-describedby={null}
                                                  aria-pressed={null}
                                                  className="bx--btn bx--btn--secondary bx--btn--disabled"
                                                  disabled={true}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onMouseEnter={[Function]}
                                                  onMouseLeave={[Function]}
                                                  tabIndex={0}
                                                  type="button"
                                                >
                                                  Reset
                                                </button>
                                              </Button>
                                            </Button>
                                            <Button
                                              buttonType="cancel"
                                              key="form-cancel"
                                              label="Cancel"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <Button
                                                kind="secondary"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <button
                                                  aria-describedby={null}
                                                  aria-pressed={null}
                                                  className="bx--btn bx--btn--secondary"
                                                  disabled={false}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onMouseEnter={[Function]}
                                                  onMouseLeave={[Function]}
                                                  tabIndex={0}
                                                  type="button"
                                                >
                                                  Cancel
                                                </button>
                                              </Button>
                                            </Button>
                                          </div>
                                        </ButtonSet>
                                      </ButtonGroup>
                                    </FormControls>
                                  </FormSpy>
                                   
                                </form>
                              </Form>
                            </Form>
                          </FormTemplate>
                        </WrappedFormTemplate>
                      </Component>
                    </ReactFinalForm>
                  </FormRenderer>
                </MiqFormRenderer>
              </Connect(MiqFormRenderer)>
            </div>
          </div>
          <span
            className="bx--visually-hidden"
            role="link"
            tabIndex="0"
          >
            Focus sentinel
          </span>
        </div>
      </Modal>
    </div>
  </SettingsReplicationForm>
</Provider>
`;

exports[`SettingsReplicationForm Form Component should render the subscription section when replication type is global 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <SettingsReplicationForm
    pglogicalReplicationFormId="new"
  >
    <div>
      <Connect(MiqFormRenderer)
        buttonsLabels={
          Object {
            "submitLabel": "Save",
          }
        }
        canReset={true}
        componentMapper={
          Object {
            "checkbox": [Function],
            "code-editor": [Function],
            "date-picker": [Function],
            "dual-list-select": [Function],
            "edit-password-field": [Function],
            "field-array": [Function],
            "file-upload": [Function],
            "font-icon-picker": [Function],
            "font-icon-picker-ddf": [Function],
            "key-value-list": [Function],
            "multi-select": [Function],
            "password-field": [Function],
            "plain-text": [Function],
            "radio": [Function],
            "select": [Function],
            "slider": [Function],
            "sub-form": [Function],
            "subscriptions-table": [Function],
            "switch": [Function],
            "tabs": [Function],
            "text-field": [Function],
            "textarea": [Function],
            "time-picker": [Function],
            "tree-selector": [Function],
            "tree-view": [Function],
            "validate-credentials": [Function],
            "wizard": [Function],
          }
        }
        onCancel={[Function]}
        onSubmit={[Function]}
        schema={
          Object {
            "fields": Array [
              Object {
                "component": "select",
                "id": "replication_type",
                "initialValue": "global",
                "label": "Type",
                "name": "replication_type",
                "onChange": [Function],
                "options": Array [
                  Object {
                    "label": "<None>",
                    "value": "none",
                  },
                  Object {
                    "label": "Global",
                    "value": "global",
                  },
                  Object {
                    "label": "Remote",
                    "value": "remote",
                  },
                ],
              },
              Object {
                "component": "sub-form",
                "condition": Object {
                  "is": "global",
                  "when": "replication_type",
                },
                "fields": Array [
                  Object {
                    "addButtonLabel": "Add Subscription",
                    "component": "subscriptions-table",
                    "id": "subscriptions-table",
                    "name": "subscriptions-table",
                    "onButtonClick": [Function],
                    "onCellClick": [Function],
                    "rows": Array [],
                  },
                ],
                "id": "subscriptions_section",
                "key": true,
                "name": "subscriptions_section",
              },
            ],
          }
        }
      >
        <MiqFormRenderer
          buttonsLabels={
            Object {
              "submitLabel": "Save",
            }
          }
          canReset={true}
          className="form-react"
          componentMapper={
            Object {
              "checkbox": [Function],
              "code-editor": [Function],
              "date-picker": [Function],
              "dual-list-select": [Function],
              "edit-password-field": [Function],
              "field-array": [Function],
              "file-upload": [Function],
              "font-icon-picker": [Function],
              "font-icon-picker-ddf": [Function],
              "key-value-list": [Function],
              "multi-select": [Function],
              "password-field": [Function],
              "plain-text": [Function],
              "radio": [Function],
              "select": [Function],
              "slider": [Function],
              "sub-form": [Function],
              "subscriptions-table": [Function],
              "switch": [Function],
              "tabs": [Function],
              "text-field": [Function],
              "textarea": [Function],
              "time-picker": [Function],
              "tree-selector": [Function],
              "tree-view": [Function],
              "validate-credentials": [Function],
              "wizard": [Function],
            }
          }
          disableSubmit={
            Array [
              "pristine",
              "invalid",
            ]
          }
          dispatch={[Function]}
          onCancel={[Function]}
          onSubmit={[Function]}
          schema={
            Object {
              "fields": Array [
                Object {
                  "component": "select",
                  "id": "replication_type",
                  "initialValue": "global",
                  "label": "Type",
                  "name": "replication_type",
                  "onChange": [Function],
                  "options": Array [
                    Object {
                      "label": "<None>",
                      "value": "none",
                    },
                    Object {
                      "label": "Global",
                      "value": "global",
                    },
                    Object {
                      "label": "Remote",
                      "value": "remote",
                    },
                  ],
                },
                Object {
                  "component": "sub-form",
                  "condition": Object {
                    "is": "global",
                    "when": "replication_type",
                  },
                  "fields": Array [
                    Object {
                      "addButtonLabel": "Add Subscription",
                      "component": "subscriptions-table",
                      "id": "subscriptions-table",
                      "name": "subscriptions-table",
                      "onButtonClick": [Function],
                      "onCellClick": [Function],
                      "rows": Array [],
                    },
                  ],
                  "id": "subscriptions_section",
                  "key": true,
                  "name": "subscriptions_section",
                },
              ],
            }
          }
          showFormControls={true}
        >
          <FormRenderer
            FormTemplate={[Function]}
            clearOnUnmount={false}
            componentMapper={
              Object {
                "checkbox": [Function],
                "code-editor": [Function],
                "date-picker": [Function],
                "dual-list-select": [Function],
                "edit-password-field": [Function],
                "field-array": [Function],
                "file-upload": [Function],
                "font-icon-picker": [Function],
                "font-icon-picker-ddf": [Function],
                "key-value-list": [Function],
                "multi-select": [Function],
                "password-field": [Function],
                "plain-text": [Function],
                "radio": [Function],
                "select": [Function],
                "slider": [Function],
                "spy-field": [Function],
                "sub-form": [Function],
                "subscriptions-table": [Function],
                "switch": [Function],
                "tabs": [Function],
                "text-field": [Function],
                "textarea": [Function],
                "time-picker": [Function],
                "tree-selector": [Function],
                "tree-view": [Function],
                "validate-credentials": [Function],
                "wizard": [Function],
              }
            }
            dispatch={[Function]}
            initialValues={Object {}}
            onCancel={[Function]}
            onReset={[Function]}
            onSubmit={[Function]}
            schema={
              Object {
                "fields": Array [
                  Object {
                    "component": "select",
                    "id": "replication_type",
                    "initialValue": "global",
                    "label": "Type",
                    "name": "replication_type",
                    "onChange": [Function],
                    "options": Array [
                      Object {
                        "label": "<None>",
                        "value": "none",
                      },
                      Object {
                        "label": "Global",
                        "value": "global",
                      },
                      Object {
                        "label": "Remote",
                        "value": "remote",
                      },
                    ],
                  },
                  Object {
                    "component": "sub-form",
                    "condition": Object {
                      "is": "global",
                      "when": "replication_type",
                    },
                    "fields": Array [
                      Object {
                        "addButtonLabel": "Add Subscription",
                        "component": "subscriptions-table",
                        "id": "subscriptions-table",
                        "name": "subscriptions-table",
                        "onButtonClick": [Function],
                        "onCellClick": [Function],
                        "rows": Array [],
                      },
                    ],
                    "id": "subscriptions_section",
                    "key": true,
                    "name": "subscriptions_section",
                  },
                  Object {
                    "component": "spy-field",
                    "initialize": undefined,
                    "name": "spy-field",
                  },
                ],
              }
            }
          >
            <ReactFinalForm
              decorators={
                Array [
                  [Function],
                ]
              }
              dispatch={[Function]}
              initialValues={Object {}}
              mutators={
                Object {
                  "concat": [Function],
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "removeBatch": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                }
              }
              onSubmit={[Function]}
              render={[Function]}
              subscription={
                Object {
                  "pristine": true,
                  "submitting": true,
                  "valid": true,
                }
              }
            >
              <Component
                formFields={
                  Array [
                    <SingleField
                      component="select"
                      id="replication_type"
                      initialValue="global"
                      label="Type"
                      name="replication_type"
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "<None>",
                            "value": "none",
                          },
                          Object {
                            "label": "Global",
                            "value": "global",
                          },
                          Object {
                            "label": "Remote",
                            "value": "remote",
                          },
                        ]
                      }
                    />,
                    <SingleField
                      component="sub-form"
                      condition={
                        Object {
                          "is": "global",
                          "when": "replication_type",
                        }
                      }
                      fields={
                        Array [
                          Object {
                            "addButtonLabel": "Add Subscription",
                            "component": "subscriptions-table",
                            "id": "subscriptions-table",
                            "name": "subscriptions-table",
                            "onButtonClick": [Function],
                            "onCellClick": [Function],
                            "rows": Array [],
                          },
                        ]
                      }
                      id="subscriptions_section"
                      name="subscriptions_section"
                    />,
                    <SingleField
                      component="spy-field"
                      name="spy-field"
                    />,
                  ]
                }
                schema={
                  Object {
                    "fields": Array [
                      Object {
                        "component": "select",
                        "id": "replication_type",
                        "initialValue": "global",
                        "label": "Type",
                        "name": "replication_type",
                        "onChange": [Function],
                        "options": Array [
                          Object {
                            "label": "<None>",
                            "value": "none",
                          },
                          Object {
                            "label": "Global",
                            "value": "global",
                          },
                          Object {
                            "label": "Remote",
                            "value": "remote",
                          },
                        ],
                      },
                      Object {
                        "component": "sub-form",
                        "condition": Object {
                          "is": "global",
                          "when": "replication_type",
                        },
                        "fields": Array [
                          Object {
                            "addButtonLabel": "Add Subscription",
                            "component": "subscriptions-table",
                            "id": "subscriptions-table",
                            "name": "subscriptions-table",
                            "onButtonClick": [Function],
                            "onCellClick": [Function],
                            "rows": Array [],
                          },
                        ],
                        "id": "subscriptions_section",
                        "key": true,
                        "name": "subscriptions_section",
                      },
                      Object {
                        "component": "spy-field",
                        "initialize": undefined,
                        "name": "spy-field",
                      },
                    ],
                  }
                }
              >
                <WrappedFormTemplate
                  canReset={true}
                  cancelLabel="Cancel"
                  disableSubmit={
                    Array [
                      "pristine",
                      "invalid",
                    ]
                  }
                  formFields={
                    Array [
                      <SingleField
                        component="select"
                        id="replication_type"
                        initialValue="global"
                        label="Type"
                        name="replication_type"
                        onChange={[Function]}
                        options={
                          Array [
                            Object {
                              "label": "<None>",
                              "value": "none",
                            },
                            Object {
                              "label": "Global",
                              "value": "global",
                            },
                            Object {
                              "label": "Remote",
                              "value": "remote",
                            },
                          ]
                        }
                      />,
                      <SingleField
                        component="sub-form"
                        condition={
                          Object {
                            "is": "global",
                            "when": "replication_type",
                          }
                        }
                        fields={
                          Array [
                            Object {
                              "addButtonLabel": "Add Subscription",
                              "component": "subscriptions-table",
                              "id": "subscriptions-table",
                              "name": "subscriptions-table",
                              "onButtonClick": [Function],
                              "onCellClick": [Function],
                              "rows": Array [],
                            },
                          ]
                        }
                        id="subscriptions_section"
                        name="subscriptions_section"
                      />,
                      <SingleField
                        component="spy-field"
                        name="spy-field"
                      />,
                    ]
                  }
                  formWrapperProps={
                    Object {
                      "className": "form-react",
                    }
                  }
                  resetLabel="Reset"
                  schema={
                    Object {
                      "fields": Array [
                        Object {
                          "component": "select",
                          "id": "replication_type",
                          "initialValue": "global",
                          "label": "Type",
                          "name": "replication_type",
                          "onChange": [Function],
                          "options": Array [
                            Object {
                              "label": "<None>",
                              "value": "none",
                            },
                            Object {
                              "label": "Global",
                              "value": "global",
                            },
                            Object {
                              "label": "Remote",
                              "value": "remote",
                            },
                          ],
                        },
                        Object {
                          "component": "sub-form",
                          "condition": Object {
                            "is": "global",
                            "when": "replication_type",
                          },
                          "fields": Array [
                            Object {
                              "addButtonLabel": "Add Subscription",
                              "component": "subscriptions-table",
                              "id": "subscriptions-table",
                              "name": "subscriptions-table",
                              "onButtonClick": [Function],
                              "onCellClick": [Function],
                              "rows": Array [],
                            },
                          ],
                          "id": "subscriptions_section",
                          "key": true,
                          "name": "subscriptions_section",
                        },
                        Object {
                          "component": "spy-field",
                          "initialize": undefined,
                          "name": "spy-field",
                        },
                      ],
                    }
                  }
                  showFormControls={true}
                  submitLabel="Save"
                >
                  <FormTemplate
                    Button={[Function]}
                    ButtonGroup={[Function]}
                    Description={[Function]}
                    FormWrapper={[Function]}
                    Header={[Function]}
                    Title={[Function]}
                    buttonOrder={
                      Array [
                        "submit",
                        "reset",
                        "cancel",
                      ]
                    }
                    canReset={true}
                    cancelLabel="Cancel"
                    disableSubmit={
                      Array [
                        "pristine",
                        "invalid",
                      ]
                    }
                    formFields={
                      Array [
                        <SingleField
                          component="select"
                          id="replication_type"
                          initialValue="global"
                          label="Type"
                          name="replication_type"
                          onChange={[Function]}
                          options={
                            Array [
                              Object {
                                "label": "<None>",
                                "value": "none",
                              },
                              Object {
                                "label": "Global",
                                "value": "global",
                              },
                              Object {
                                "label": "Remote",
                                "value": "remote",
                              },
                            ]
                          }
                        />,
                        <SingleField
                          component="sub-form"
                          condition={
                            Object {
                              "is": "global",
                              "when": "replication_type",
                            }
                          }
                          fields={
                            Array [
                              Object {
                                "addButtonLabel": "Add Subscription",
                                "component": "subscriptions-table",
                                "id": "subscriptions-table",
                                "name": "subscriptions-table",
                                "onButtonClick": [Function],
                                "onCellClick": [Function],
                                "rows": Array [],
                              },
                            ]
                          }
                          id="subscriptions_section"
                          name="subscriptions_section"
                        />,
                        <SingleField
                          component="spy-field"
                          name="spy-field"
                        />,
                      ]
                    }
                    formWrapperProps={
                      Object {
                        "className": "form-react",
                      }
                    }
                    resetLabel="Reset"
                    schema={
                      Object {
                        "fields": Array [
                          Object {
                            "component": "select",
                            "id": "replication_type",
                            "initialValue": "global",
                            "label": "Type",
                            "name": "replication_type",
                            "onChange": [Function],
                            "options": Array [
                              Object {
                                "label": "<None>",
                                "value": "none",
                              },
                              Object {
                                "label": "Global",
                                "value": "global",
                              },
                              Object {
                                "label": "Remote",
                                "value": "remote",
                              },
                            ],
                          },
                          Object {
                            "component": "sub-form",
                            "condition": Object {
                              "is": "global",
                              "when": "replication_type",
                            },
                            "fields": Array [
                              Object {
                                "addButtonLabel": "Add Subscription",
                                "component": "subscriptions-table",
                                "id": "subscriptions-table",
                                "name": "subscriptions-table",
                                "onButtonClick": [Function],
                                "onCellClick": [Function],
                                "rows": Array [],
                              },
                            ],
                            "id": "subscriptions_section",
                            "key": true,
                            "name": "subscriptions_section",
                          },
                          Object {
                            "component": "spy-field",
                            "initialize": undefined,
                            "name": "spy-field",
                          },
                        ],
                      }
                    }
                    showFormControls={true}
                    submitLabel="Save"
                  >
                    <Form
                      className="form-react"
                      onSubmit={[Function]}
                    >
                      <Form
                        className="form-0-2-3 form-react"
                        noValidate={true}
                        onSubmit={[Function]}
                      >
                        <form
                          className="bx--form form-0-2-3 form-react"
                          noValidate={true}
                          onSubmit={[Function]}
                        >
                           
                          <SingleField
                            component="select"
                            id="replication_type"
                            initialValue="global"
                            key="replication_type"
                            label="Type"
                            name="replication_type"
                            onChange={[Function]}
                            options={
                              Array [
                                Object {
                                  "label": "<None>",
                                  "value": "none",
                                },
                                Object {
                                  "label": "Global",
                                  "value": "global",
                                },
                                Object {
                                  "label": "Remote",
                                  "value": "remote",
                                },
                              ]
                            }
                          >
                            <FormConditionWrapper
                              field={
                                Object {
                                  "component": "select",
                                  "id": "replication_type",
                                  "initialValue": "global",
                                  "label": "Type",
                                  "name": "replication_type",
                                  "onChange": [Function],
                                  "options": Array [
                                    Object {
                                      "label": "<None>",
                                      "value": "none",
                                    },
                                    Object {
                                      "label": "Global",
                                      "value": "global",
                                    },
                                    Object {
                                      "label": "Remote",
                                      "value": "remote",
                                    },
                                  ],
                                }
                              }
                            >
                              <FormFieldHideWrapper
                                hideField={false}
                              >
                                <SelectWithOnChange
                                  component="select"
                                  id="replication_type"
                                  initialValue="global"
                                  label="Type"
                                  name="replication_type"
                                  onChange={[Function]}
                                  options={
                                    Array [
                                      Object {
                                        "label": "<None>",
                                        "value": "none",
                                      },
                                      Object {
                                        "label": "Global",
                                        "value": "global",
                                      },
                                      Object {
                                        "label": "Remote",
                                        "value": "remote",
                                      },
                                    ]
                                  }
                                  placeholder="<Choose>"
                                >
                                  <Select
                                    component="select"
                                    id="replication_type"
                                    initialValue="global"
                                    label="Type"
                                    loadingMessage="Loading..."
                                    name="replication_type"
                                    options={
                                      Array [
                                        Object {
                                          "label": "<None>",
                                          "value": "none",
                                        },
                                        Object {
                                          "label": "Global",
                                          "value": "global",
                                        },
                                        Object {
                                          "label": "Remote",
                                          "value": "remote",
                                        },
                                      ]
                                    }
                                    placeholder="<Choose>"
                                  >
                                    <Select
                                      SelectComponent={[Function]}
                                      id="replication_type"
                                      invalidText=""
                                      labelText="Type"
                                      loadOptionsChangeCounter={1}
                                      loadingMessage="Loading..."
                                      name="replication_type"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      options={
                                        Array [
                                          Object {
                                            "label": "<None>",
                                            "value": "none",
                                          },
                                          Object {
                                            "label": "Global",
                                            "value": "global",
                                          },
                                          Object {
                                            "label": "Remote",
                                            "value": "remote",
                                          },
                                        ]
                                      }
                                      placeholder="<Choose>"
                                      simpleValue={false}
                                      value="global"
                                    >
                                      <ClearedSelect
                                        className=""
                                        closeMenuOnSelect={true}
                                        hideSelectedOptions={false}
                                        id="replication_type"
                                        invalidText=""
                                        isClearable={false}
                                        isFetching={false}
                                        isSearchable={false}
                                        labelText="Type"
                                        name="replication_type"
                                        noOptionsMessage={[Function]}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        onInputChange={[Function]}
                                        options={
                                          Array [
                                            Object {
                                              "label": "<None>",
                                              "value": "none",
                                            },
                                            Object {
                                              "label": "Global",
                                              "value": "global",
                                            },
                                            Object {
                                              "label": "Remote",
                                              "value": "remote",
                                            },
                                          ]
                                        }
                                        placeholder="<Choose>"
                                        value="global"
                                      >
                                        <Select
                                          className=""
                                          disabled={false}
                                          helperText=""
                                          id="replication_type"
                                          inline={false}
                                          invalid={false}
                                          invalidText=""
                                          labelText="Type"
                                          light={false}
                                          name="replication_type"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          value="global"
                                        >
                                          <div
                                            className="bx--form-item"
                                          >
                                            <div
                                              className="bx--select"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="replication_type"
                                              >
                                                Type
                                              </label>
                                              <div
                                                className="bx--select-input__wrapper"
                                                data-invalid={null}
                                              >
                                                <select
                                                  className="bx--select-input"
                                                  id="replication_type"
                                                  name="replication_type"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  value="global"
                                                >
                                                  <SelectItem
                                                    disabled={false}
                                                    hidden={false}
                                                    key="none"
                                                    label="<None>"
                                                    text="<None>"
                                                    value="none"
                                                  >
                                                    <option
                                                      className="bx--select-option"
                                                      disabled={false}
                                                      hidden={false}
                                                      label="<None>"
                                                      value="none"
                                                    >
                                                      &lt;None&gt;
                                                    </option>
                                                  </SelectItem>
                                                  <SelectItem
                                                    disabled={false}
                                                    hidden={false}
                                                    key="global"
                                                    label="Global"
                                                    text="Global"
                                                    value="global"
                                                  >
                                                    <option
                                                      className="bx--select-option"
                                                      disabled={false}
                                                      hidden={false}
                                                      label="Global"
                                                      value="global"
                                                    >
                                                      Global
                                                    </option>
                                                  </SelectItem>
                                                  <SelectItem
                                                    disabled={false}
                                                    hidden={false}
                                                    key="remote"
                                                    label="Remote"
                                                    text="Remote"
                                                    value="remote"
                                                  >
                                                    <option
                                                      className="bx--select-option"
                                                      disabled={false}
                                                      hidden={false}
                                                      label="Remote"
                                                      value="remote"
                                                    >
                                                      Remote
                                                    </option>
                                                  </SelectItem>
                                                </select>
                                                <ForwardRef(ChevronDown16)
                                                  className="bx--select__arrow"
                                                >
                                                  <Icon
                                                    className="bx--select__arrow"
                                                    fill="currentColor"
                                                    height={16}
                                                    preserveAspectRatio="xMidYMid meet"
                                                    viewBox="0 0 16 16"
                                                    width={16}
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <svg
                                                      aria-hidden={true}
                                                      className="bx--select__arrow"
                                                      fill="currentColor"
                                                      focusable="false"
                                                      height={16}
                                                      preserveAspectRatio="xMidYMid meet"
                                                      viewBox="0 0 16 16"
                                                      width={16}
                                                      xmlns="http://www.w3.org/2000/svg"
                                                    >
                                                      <path
                                                        d="M8 11L3 6 3.7 5.3 8 9.6 12.3 5.3 13 6z"
                                                      />
                                                    </svg>
                                                  </Icon>
                                                </ForwardRef(ChevronDown16)>
                                              </div>
                                            </div>
                                          </div>
                                        </Select>
                                      </ClearedSelect>
                                    </Select>
                                  </Select>
                                </SelectWithOnChange>
                              </FormFieldHideWrapper>
                            </FormConditionWrapper>
                          </SingleField>
                          <SingleField
                            component="sub-form"
                            condition={
                              Object {
                                "is": "global",
                                "when": "replication_type",
                              }
                            }
                            fields={
                              Array [
                                Object {
                                  "addButtonLabel": "Add Subscription",
                                  "component": "subscriptions-table",
                                  "id": "subscriptions-table",
                                  "name": "subscriptions-table",
                                  "onButtonClick": [Function],
                                  "onCellClick": [Function],
                                  "rows": Array [],
                                },
                              ]
                            }
                            id="subscriptions_section"
                            key="true"
                            name="subscriptions_section"
                          >
                            <FormConditionWrapper
                              condition={
                                Object {
                                  "is": "global",
                                  "when": "replication_type",
                                }
                              }
                              field={
                                Object {
                                  "component": "sub-form",
                                  "fields": Array [
                                    Object {
                                      "addButtonLabel": "Add Subscription",
                                      "component": "subscriptions-table",
                                      "id": "subscriptions-table",
                                      "name": "subscriptions-table",
                                      "onButtonClick": [Function],
                                      "onCellClick": [Function],
                                      "rows": Array [],
                                    },
                                  ],
                                  "id": "subscriptions_section",
                                  "name": "subscriptions_section",
                                }
                              }
                            >
                              <ConditionTriggerDetector
                                condition={
                                  Object {
                                    "is": "global",
                                    "when": "replication_type",
                                  }
                                }
                                field={
                                  Object {
                                    "component": "sub-form",
                                    "fields": Array [
                                      Object {
                                        "addButtonLabel": "Add Subscription",
                                        "component": "subscriptions-table",
                                        "id": "subscriptions-table",
                                        "name": "subscriptions-table",
                                        "onButtonClick": [Function],
                                        "onCellClick": [Function],
                                        "rows": Array [],
                                      },
                                    ],
                                    "id": "subscriptions_section",
                                    "name": "subscriptions_section",
                                  }
                                }
                                triggers={
                                  Array [
                                    "replication_type",
                                  ]
                                }
                              >
                                <ForwardRef(Field)
                                  name="replication_type"
                                  subscription={
                                    Object {
                                      "value": true,
                                    }
                                  }
                                >
                                  <ConditionTriggerDetector
                                    condition={
                                      Object {
                                        "is": "global",
                                        "when": "replication_type",
                                      }
                                    }
                                    field={
                                      Object {
                                        "component": "sub-form",
                                        "fields": Array [
                                          Object {
                                            "addButtonLabel": "Add Subscription",
                                            "component": "subscriptions-table",
                                            "id": "subscriptions-table",
                                            "name": "subscriptions-table",
                                            "onButtonClick": [Function],
                                            "onCellClick": [Function],
                                            "rows": Array [],
                                          },
                                        ],
                                        "id": "subscriptions_section",
                                        "name": "subscriptions_section",
                                      }
                                    }
                                    triggers={Array []}
                                    values={
                                      Object {
                                        "replication_type": "global",
                                      }
                                    }
                                  >
                                    <ConditionTriggerWrapper
                                      condition={
                                        Object {
                                          "is": "global",
                                          "when": "replication_type",
                                        }
                                      }
                                      field={
                                        Object {
                                          "component": "sub-form",
                                          "fields": Array [
                                            Object {
                                              "addButtonLabel": "Add Subscription",
                                              "component": "subscriptions-table",
                                              "id": "subscriptions-table",
                                              "name": "subscriptions-table",
                                              "onButtonClick": [Function],
                                              "onCellClick": [Function],
                                              "rows": Array [],
                                            },
                                          ],
                                          "id": "subscriptions_section",
                                          "name": "subscriptions_section",
                                        }
                                      }
                                      values={
                                        Object {
                                          "replication_type": "global",
                                        }
                                      }
                                    >
                                      <Component
                                        condition={
                                          Object {
                                            "is": "global",
                                            "when": "replication_type",
                                          }
                                        }
                                        field={
                                          Object {
                                            "component": "sub-form",
                                            "fields": Array [
                                              Object {
                                                "addButtonLabel": "Add Subscription",
                                                "component": "subscriptions-table",
                                                "id": "subscriptions-table",
                                                "name": "subscriptions-table",
                                                "onButtonClick": [Function],
                                                "onCellClick": [Function],
                                                "rows": Array [],
                                              },
                                            ],
                                            "id": "subscriptions_section",
                                            "name": "subscriptions_section",
                                          }
                                        }
                                        values={
                                          Object {
                                            "replication_type": "global",
                                          }
                                        }
                                      >
                                        <FormFieldHideWrapper
                                          hideField={false}
                                        >
                                          <SubForm
                                            DescriptionElement="p"
                                            TitleElement="h3"
                                            component="sub-form"
                                            fields={
                                              Array [
                                                Object {
                                                  "addButtonLabel": "Add Subscription",
                                                  "component": "subscriptions-table",
                                                  "id": "subscriptions-table",
                                                  "name": "subscriptions-table",
                                                  "onButtonClick": [Function],
                                                  "onCellClick": [Function],
                                                  "rows": Array [],
                                                },
                                              ]
                                            }
                                            id="subscriptions_section"
                                            name="subscriptions_section"
                                          >
                                            <div
                                              className=""
                                              id="subscriptions_section"
                                              name="subscriptions_section"
                                            >
                                              <SingleField
                                                addButtonLabel="Add Subscription"
                                                component="subscriptions-table"
                                                id="subscriptions-table"
                                                key="subscriptions-table"
                                                name="subscriptions-table"
                                                onButtonClick={[Function]}
                                                onCellClick={[Function]}
                                                rows={Array []}
                                              >
                                                <FormConditionWrapper
                                                  field={
                                                    Object {
                                                      "addButtonLabel": "Add Subscription",
                                                      "component": "subscriptions-table",
                                                      "id": "subscriptions-table",
                                                      "name": "subscriptions-table",
                                                      "onButtonClick": [Function],
                                                      "onCellClick": [Function],
                                                      "rows": Array [],
                                                    }
                                                  }
                                                >
                                                  <FormFieldHideWrapper
                                                    hideField={false}
                                                  >
                                                    <SubscriptionsTableComponent
                                                      addButtonLabel="Add Subscription"
                                                      component="subscriptions-table"
                                                      id="subscriptions-table"
                                                      name="subscriptions-table"
                                                      onButtonClick={[Function]}
                                                      onCellClick={[Function]}
                                                      rows={Array []}
                                                    >
                                                      <div
                                                        className="subscriptions-section"
                                                      >
                                                        <div
                                                          className="subscriptions-button"
                                                          style={
                                                            Object {
                                                              "display": "flex",
                                                              "flexDirection": "row-reverse",
                                                            }
                                                          }
                                                        >
                                                          <Button
                                                            className="subscription-add bx--btn bx--btn--primary pull-right"
                                                            kind="primary"
                                                            onClick={[Function]}
                                                            type="button"
                                                            variant="contained"
                                                          >
                                                            <button
                                                              aria-describedby={null}
                                                              aria-pressed={null}
                                                              className="subscription-add bx--btn bx--btn--primary pull-right bx--btn bx--btn--primary"
                                                              disabled={false}
                                                              onBlur={[Function]}
                                                              onClick={[Function]}
                                                              onFocus={[Function]}
                                                              onMouseEnter={[Function]}
                                                              onMouseLeave={[Function]}
                                                              tabIndex={0}
                                                              type="button"
                                                              variant="contained"
                                                            >
                                                              Add Subscription
                                                            </button>
                                                          </Button>
                                                        </div>
                                                        <div
                                                          className="subscriptions-table"
                                                          style={
                                                            Object {
                                                              "display": "grid",
                                                              "overflow": "auto",
                                                            }
                                                          }
                                                        >
                                                          <MiqDataTable
                                                            gridChecks={Array []}
                                                            headers={
                                                              Array [
                                                                Object {
                                                                  "header": "Database",
                                                                  "key": "dbname",
                                                                },
                                                                Object {
                                                                  "header": "Host",
                                                                  "key": "host",
                                                                },
                                                                Object {
                                                                  "header": "Username",
                                                                  "key": "user",
                                                                },
                                                                Object {
                                                                  "header": "Password",
                                                                  "key": "password",
                                                                },
                                                                Object {
                                                                  "header": "Port",
                                                                  "key": "port",
                                                                },
                                                                Object {
                                                                  "header": "Backlog",
                                                                  "key": "backlog",
                                                                },
                                                                Object {
                                                                  "header": "Status",
                                                                  "key": "status",
                                                                },
                                                                Object {
                                                                  "header": "Region",
                                                                  "key": "provider_region",
                                                                },
                                                                Object {
                                                                  "header": "Edit",
                                                                  "key": "edit",
                                                                },
                                                                Object {
                                                                  "header": "Validate",
                                                                  "key": "validate",
                                                                },
                                                                Object {
                                                                  "header": "Delete",
                                                                  "key": "delete",
                                                                },
                                                              ]
                                                            }
                                                            mode=""
                                                            onCellClick={[Function]}
                                                            pageOptions={
                                                              Object {
                                                                "page": 1,
                                                                "pageSize": 20,
                                                                "pageSizes": Array [
                                                                  5,
                                                                  10,
                                                                  20,
                                                                  50,
                                                                  100,
                                                                  200,
                                                                ],
                                                                "totalItems": 10,
                                                              }
                                                            }
                                                            rowCheckBox={false}
                                                            rows={Array []}
                                                            showPagination={false}
                                                            size="md"
                                                            sortable={false}
                                                            stickyHeader={false}
                                                            truncateText={true}
                                                          >
                                                            <div
                                                              className="miq-data-table"
                                                            >
                                                              <DataTable
                                                                filterRows={[Function]}
                                                                headers={
                                                                  Array [
                                                                    Object {
                                                                      "header": "Database",
                                                                      "key": "dbname",
                                                                    },
                                                                    Object {
                                                                      "header": "Host",
                                                                      "key": "host",
                                                                    },
                                                                    Object {
                                                                      "header": "Username",
                                                                      "key": "user",
                                                                    },
                                                                    Object {
                                                                      "header": "Password",
                                                                      "key": "password",
                                                                    },
                                                                    Object {
                                                                      "header": "Port",
                                                                      "key": "port",
                                                                    },
                                                                    Object {
                                                                      "header": "Backlog",
                                                                      "key": "backlog",
                                                                    },
                                                                    Object {
                                                                      "header": "Status",
                                                                      "key": "status",
                                                                    },
                                                                    Object {
                                                                      "header": "Region",
                                                                      "key": "provider_region",
                                                                    },
                                                                    Object {
                                                                      "header": "Edit",
                                                                      "key": "edit",
                                                                    },
                                                                    Object {
                                                                      "header": "Validate",
                                                                      "key": "validate",
                                                                    },
                                                                    Object {
                                                                      "header": "Delete",
                                                                      "key": "delete",
                                                                    },
                                                                  ]
                                                                }
                                                                isSortable={false}
                                                                locale="en"
                                                                overflowMenuOnHover={true}
                                                                rows={Array []}
                                                                size="md"
                                                                sortDirection="ASC"
                                                                sortRow={[Function]}
                                                                stickyHeader={false}
                                                                translateWithId={[Function]}
                                                              >
                                                                <Table
                                                                  isSortable={false}
                                                                  overflowMenuOnHover={true}
                                                                  size="md"
                                                                  stickyHeader={false}
                                                                >
                                                                  <div
                                                                    className="bx--data-table-content"
                                                                  >
                                                                    <table
                                                                      className="bx--data-table bx--data-table--md bx--data-table--no-border"
                                                                    >
                                                                      <TableHead>
                                                                        <thead>
                                                                          <TableRow>
                                                                            <tr>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="dbname"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Database
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="host"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Host
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="user"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Username
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="password"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Password
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="port"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Port
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="backlog"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Backlog
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="status"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Status
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="provider_region"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Region
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="edit"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Edit
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="validate"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Validate
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                              <TableHeader
                                                                                className="miq-data-table-header"
                                                                                isSortHeader={false}
                                                                                isSortable={false}
                                                                                key="delete"
                                                                                onClick={[Function]}
                                                                                scope="col"
                                                                                sortDirection="NONE"
                                                                                translateWithId={[Function]}
                                                                              >
                                                                                <th
                                                                                  className="miq-data-table-header"
                                                                                  scope="col"
                                                                                >
                                                                                  <div
                                                                                    className="bx--table-header-label"
                                                                                  >
                                                                                    Delete
                                                                                  </div>
                                                                                </th>
                                                                              </TableHeader>
                                                                            </tr>
                                                                          </TableRow>
                                                                        </thead>
                                                                      </TableHead>
                                                                      <TableBody
                                                                        aria-live="polite"
                                                                      >
                                                                        <tbody
                                                                          aria-live="polite"
                                                                        />
                                                                      </TableBody>
                                                                    </table>
                                                                  </div>
                                                                </Table>
                                                              </DataTable>
                                                            </div>
                                                          </MiqDataTable>
                                                        </div>
                                                      </div>
                                                    </SubscriptionsTableComponent>
                                                  </FormFieldHideWrapper>
                                                </FormConditionWrapper>
                                              </SingleField>
                                            </div>
                                          </SubForm>
                                        </FormFieldHideWrapper>
                                      </Component>
                                    </ConditionTriggerWrapper>
                                  </ConditionTriggerDetector>
                                </ForwardRef(Field)>
                              </ConditionTriggerDetector>
                            </FormConditionWrapper>
                          </SingleField>
                          <SingleField
                            component="spy-field"
                            key="spy-field"
                            name="spy-field"
                          >
                            <FormConditionWrapper
                              field={
                                Object {
                                  "component": "spy-field",
                                  "initialize": undefined,
                                  "name": "spy-field",
                                }
                              }
                            >
                              <FormFieldHideWrapper
                                hideField={false}
                              >
                                <SpyField
                                  component="spy-field"
                                  name="spy-field"
                                >
                                  <FormSpy
                                    onChange={[Function]}
                                    subscription={
                                      Object {
                                        "pristine": true,
                                        "valid": true,
                                      }
                                    }
                                  />
                                </SpyField>
                              </FormFieldHideWrapper>
                            </FormConditionWrapper>
                          </SingleField>
                          <FormSpy>
                            <FormControls
                              Button={[Function]}
                              ButtonGroup={[Function]}
                              FormSpy={[Function]}
                              buttonOrder={
                                Array [
                                  "submit",
                                  "reset",
                                  "cancel",
                                ]
                              }
                              canReset={true}
                              cancelLabel="Cancel"
                              formFields={
                                Array [
                                  <SingleField
                                    component="select"
                                    id="replication_type"
                                    initialValue="global"
                                    label="Type"
                                    name="replication_type"
                                    onChange={[Function]}
                                    options={
                                      Array [
                                        Object {
                                          "label": "<None>",
                                          "value": "none",
                                        },
                                        Object {
                                          "label": "Global",
                                          "value": "global",
                                        },
                                        Object {
                                          "label": "Remote",
                                          "value": "remote",
                                        },
                                      ]
                                    }
                                  />,
                                  <SingleField
                                    component="sub-form"
                                    condition={
                                      Object {
                                        "is": "global",
                                        "when": "replication_type",
                                      }
                                    }
                                    fields={
                                      Array [
                                        Object {
                                          "addButtonLabel": "Add Subscription",
                                          "component": "subscriptions-table",
                                          "id": "subscriptions-table",
                                          "name": "subscriptions-table",
                                          "onButtonClick": [Function],
                                          "onCellClick": [Function],
                                          "rows": Array [],
                                        },
                                      ]
                                    }
                                    id="subscriptions_section"
                                    name="subscriptions_section"
                                  />,
                                  <SingleField
                                    component="spy-field"
                                    name="spy-field"
                                  />,
                                ]
                              }
                              formSpyProps={
                                Object {
                                  "active": undefined,
                                  "dirty": true,
                                  "dirtyFields": Object {
                                    "replication_type": true,
                                  },
                                  "dirtyFieldsSinceLastSubmit": Object {
                                    "replication_type": true,
                                  },
                                  "dirtySinceLastSubmit": false,
                                  "error": undefined,
                                  "errors": Object {},
                                  "form": Object {
                                    "batch": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "destroyOnUnregister": false,
                                    "focus": [Function],
                                    "getFieldState": [Function],
                                    "getRegisteredFields": [Function],
                                    "getState": [Function],
                                    "initialize": [Function],
                                    "isValidationPaused": [Function],
                                    "mutators": Object {
                                      "concat": [Function],
                                      "insert": [Function],
                                      "move": [Function],
                                      "pop": [Function],
                                      "push": [Function],
                                      "remove": [Function],
                                      "removeBatch": [Function],
                                      "shift": [Function],
                                      "swap": [Function],
                                      "unshift": [Function],
                                      "update": [Function],
                                    },
                                    "pauseValidation": [Function],
                                    "registerField": [Function],
                                    "reset": [Function],
                                    "resetFieldState": [Function],
                                    "restart": [Function],
                                    "resumeValidation": [Function],
                                    "setConfig": [Function],
                                    "submit": [Function],
                                    "subscribe": [Function],
                                  },
                                  "hasSubmitErrors": false,
                                  "hasValidationErrors": false,
                                  "initialValues": Object {},
                                  "invalid": false,
                                  "modified": Object {
                                    "replication_type": true,
                                    "subscriptions-table": false,
                                  },
                                  "modifiedSinceLastSubmit": false,
                                  "pristine": false,
                                  "submitError": undefined,
                                  "submitErrors": undefined,
                                  "submitFailed": false,
                                  "submitSucceeded": false,
                                  "submitting": false,
                                  "touched": Object {
                                    "replication_type": false,
                                    "subscriptions-table": false,
                                  },
                                  "valid": true,
                                  "validating": false,
                                  "values": Object {
                                    "replication_type": "global",
                                  },
                                  "visited": Object {
                                    "replication_type": false,
                                    "subscriptions-table": false,
                                  },
                                }
                              }
                              onCancel={[Function]}
                              onReset={[Function]}
                              resetLabel="Reset"
                              schema={
                                Object {
                                  "fields": Array [
                                    Object {
                                      "component": "select",
                                      "id": "replication_type",
                                      "initialValue": "global",
                                      "label": "Type",
                                      "name": "replication_type",
                                      "onChange": [Function],
                                      "options": Array [
                                        Object {
                                          "label": "<None>",
                                          "value": "none",
                                        },
                                        Object {
                                          "label": "Global",
                                          "value": "global",
                                        },
                                        Object {
                                          "label": "Remote",
                                          "value": "remote",
                                        },
                                      ],
                                    },
                                    Object {
                                      "component": "sub-form",
                                      "condition": Object {
                                        "is": "global",
                                        "when": "replication_type",
                                      },
                                      "fields": Array [
                                        Object {
                                          "addButtonLabel": "Add Subscription",
                                          "component": "subscriptions-table",
                                          "id": "subscriptions-table",
                                          "name": "subscriptions-table",
                                          "onButtonClick": [Function],
                                          "onCellClick": [Function],
                                          "rows": Array [],
                                        },
                                      ],
                                      "id": "subscriptions_section",
                                      "key": true,
                                      "name": "subscriptions_section",
                                    },
                                    Object {
                                      "component": "spy-field",
                                      "initialize": undefined,
                                      "name": "spy-field",
                                    },
                                  ],
                                }
                              }
                              submitLabel="Save"
                            >
                              <ButtonGroup>
                                <ButtonSet
                                  className=""
                                >
                                  <div
                                    className="bx--btn-set"
                                  >
                                    <Button
                                      buttonType="submit"
                                      key="form-submit"
                                      label="Save"
                                      type="submit"
                                      variant="primary"
                                    >
                                      <Button
                                        kind="primary"
                                        type="submit"
                                        variant="primary"
                                      >
                                        <button
                                          aria-describedby={null}
                                          aria-pressed={null}
                                          className="bx--btn bx--btn--primary"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                          tabIndex={0}
                                          type="submit"
                                          variant="primary"
                                        >
                                          Save
                                        </button>
                                      </Button>
                                    </Button>
                                    <Button
                                      buttonType="reset"
                                      disabled={false}
                                      key="form-reset"
                                      label="Reset"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <Button
                                        disabled={false}
                                        kind="secondary"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <button
                                          aria-describedby={null}
                                          aria-pressed={null}
                                          className="bx--btn bx--btn--secondary"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                          tabIndex={0}
                                          type="button"
                                        >
                                          Reset
                                        </button>
                                      </Button>
                                    </Button>
                                    <Button
                                      buttonType="cancel"
                                      key="form-cancel"
                                      label="Cancel"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <Button
                                        kind="secondary"
                                        onClick={[Function]}
                                        type="button"
                                      >
                                        <button
                                          aria-describedby={null}
                                          aria-pressed={null}
                                          className="bx--btn bx--btn--secondary"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                          tabIndex={0}
                                          type="button"
                                        >
                                          Cancel
                                        </button>
                                      </Button>
                                    </Button>
                                  </div>
                                </ButtonSet>
                              </ButtonGroup>
                            </FormControls>
                          </FormSpy>
                           
                        </form>
                      </Form>
                    </Form>
                  </FormTemplate>
                </WrappedFormTemplate>
              </Component>
            </ReactFinalForm>
          </FormRenderer>
        </MiqFormRenderer>
      </Connect(MiqFormRenderer)>
      <Modal
        hasScrollingContent={false}
        modalHeading="Add Subscription"
        modalLabel=""
        onKeyDown={[Function]}
        onRequestClose={[Function]}
        onRequestSubmit={[Function]}
        open={false}
        passiveModal={true}
        preventCloseOnClickOutside={false}
        primaryButtonDisabled={false}
        selectorPrimaryFocus="[data-modal-primary-focus]"
      >
        <div
          className="bx--modal"
          onBlur={[Function]}
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          role="presentation"
        >
          <span
            className="bx--visually-hidden"
            role="link"
            tabIndex="0"
          >
            Focus sentinel
          </span>
          <div
            aria-label="Add Subscription"
            aria-modal="true"
            className="bx--modal-container"
            role="dialog"
            tabIndex="-1"
          >
            <div
              className="bx--modal-header"
            >
              <button
                aria-label="close"
                className="bx--modal-close"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(Close20)
                  aria-hidden="true"
                  className="bx--modal-close__icon"
                  tabIndex="-1"
                >
                  <Icon
                    aria-hidden="true"
                    className="bx--modal-close__icon"
                    fill="currentColor"
                    height={20}
                    preserveAspectRatio="xMidYMid meet"
                    tabIndex="-1"
                    viewBox="0 0 32 32"
                    width={20}
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <svg
                      aria-hidden={true}
                      className="bx--modal-close__icon"
                      fill="currentColor"
                      focusable="false"
                      height={20}
                      preserveAspectRatio="xMidYMid meet"
                      viewBox="0 0 32 32"
                      width={20}
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M17.4141 16L24 9.4141 22.5859 8 16 14.5859 9.4143 8 8 9.4141 14.5859 16 8 22.5859 9.4143 24 16 17.4141 22.5859 24 24 22.5859 17.4141 16z"
                      />
                    </svg>
                  </Icon>
                </ForwardRef(Close20)>
              </button>
              <h3
                className="bx--modal-header__heading"
                id="bx--modal-header__heading--modal-2"
              >
                Add Subscription
              </h3>
            </div>
            <div
              className="bx--modal-content"
              id="bx--modal-body--modal-2"
            >
              <Connect(MiqFormRenderer)
                buttonsLabels={
                  Object {
                    "submitLabel": "Accept",
                  }
                }
                canReset={true}
                componentMapper={
                  Object {
                    "checkbox": [Function],
                    "code-editor": [Function],
                    "date-picker": [Function],
                    "dual-list-select": [Function],
                    "edit-password-field": [Function],
                    "field-array": [Function],
                    "file-upload": [Function],
                    "font-icon-picker": [Function],
                    "font-icon-picker-ddf": [Function],
                    "key-value-list": [Function],
                    "multi-select": [Function],
                    "password-field": [Function],
                    "plain-text": [Function],
                    "radio": [Function],
                    "select": [Function],
                    "slider": [Function],
                    "sub-form": [Function],
                    "subscriptions-table": [Function],
                    "switch": [Function],
                    "tabs": [Function],
                    "text-field": [Function],
                    "textarea": [Function],
                    "time-picker": [Function],
                    "tree-selector": [Function],
                    "tree-view": [Function],
                    "validate-credentials": [Function],
                    "wizard": [Function],
                  }
                }
                initialValues={Object {}}
                onCancel={[Function]}
                onSubmit={[Function]}
                schema={
                  Object {
                    "fields": Array [
                      Object {
                        "component": "text-field",
                        "id": "dbname",
                        "isRequired": true,
                        "label": "Database",
                        "name": "dbname",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "host",
                        "isRequired": true,
                        "label": "Host",
                        "name": "host",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "user",
                        "isRequired": true,
                        "label": "Username",
                        "name": "user",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "password",
                        "isRequired": true,
                        "label": "Password",
                        "name": "password",
                        "type": "password",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                      Object {
                        "component": "text-field",
                        "id": "port",
                        "isRequired": true,
                        "label": "Port",
                        "name": "port",
                        "validate": Array [
                          Object {
                            "type": "required",
                          },
                        ],
                      },
                    ],
                  }
                }
              >
                <MiqFormRenderer
                  buttonsLabels={
                    Object {
                      "submitLabel": "Accept",
                    }
                  }
                  canReset={true}
                  className="form-react"
                  componentMapper={
                    Object {
                      "checkbox": [Function],
                      "code-editor": [Function],
                      "date-picker": [Function],
                      "dual-list-select": [Function],
                      "edit-password-field": [Function],
                      "field-array": [Function],
                      "file-upload": [Function],
                      "font-icon-picker": [Function],
                      "font-icon-picker-ddf": [Function],
                      "key-value-list": [Function],
                      "multi-select": [Function],
                      "password-field": [Function],
                      "plain-text": [Function],
                      "radio": [Function],
                      "select": [Function],
                      "slider": [Function],
                      "sub-form": [Function],
                      "subscriptions-table": [Function],
                      "switch": [Function],
                      "tabs": [Function],
                      "text-field": [Function],
                      "textarea": [Function],
                      "time-picker": [Function],
                      "tree-selector": [Function],
                      "tree-view": [Function],
                      "validate-credentials": [Function],
                      "wizard": [Function],
                    }
                  }
                  disableSubmit={
                    Array [
                      "pristine",
                      "invalid",
                    ]
                  }
                  dispatch={[Function]}
                  initialValues={Object {}}
                  onCancel={[Function]}
                  onSubmit={[Function]}
                  schema={
                    Object {
                      "fields": Array [
                        Object {
                          "component": "text-field",
                          "id": "dbname",
                          "isRequired": true,
                          "label": "Database",
                          "name": "dbname",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "host",
                          "isRequired": true,
                          "label": "Host",
                          "name": "host",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "user",
                          "isRequired": true,
                          "label": "Username",
                          "name": "user",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "password",
                          "isRequired": true,
                          "label": "Password",
                          "name": "password",
                          "type": "password",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                        Object {
                          "component": "text-field",
                          "id": "port",
                          "isRequired": true,
                          "label": "Port",
                          "name": "port",
                          "validate": Array [
                            Object {
                              "type": "required",
                            },
                          ],
                        },
                      ],
                    }
                  }
                  showFormControls={true}
                >
                  <FormRenderer
                    FormTemplate={[Function]}
                    clearOnUnmount={false}
                    componentMapper={
                      Object {
                        "checkbox": [Function],
                        "code-editor": [Function],
                        "date-picker": [Function],
                        "dual-list-select": [Function],
                        "edit-password-field": [Function],
                        "field-array": [Function],
                        "file-upload": [Function],
                        "font-icon-picker": [Function],
                        "font-icon-picker-ddf": [Function],
                        "key-value-list": [Function],
                        "multi-select": [Function],
                        "password-field": [Function],
                        "plain-text": [Function],
                        "radio": [Function],
                        "select": [Function],
                        "slider": [Function],
                        "spy-field": [Function],
                        "sub-form": [Function],
                        "subscriptions-table": [Function],
                        "switch": [Function],
                        "tabs": [Function],
                        "text-field": [Function],
                        "textarea": [Function],
                        "time-picker": [Function],
                        "tree-selector": [Function],
                        "tree-view": [Function],
                        "validate-credentials": [Function],
                        "wizard": [Function],
                      }
                    }
                    dispatch={[Function]}
                    initialValues={Object {}}
                    onCancel={[Function]}
                    onReset={[Function]}
                    onSubmit={[Function]}
                    schema={
                      Object {
                        "fields": Array [
                          Object {
                            "component": "text-field",
                            "id": "dbname",
                            "isRequired": true,
                            "label": "Database",
                            "name": "dbname",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "host",
                            "isRequired": true,
                            "label": "Host",
                            "name": "host",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "user",
                            "isRequired": true,
                            "label": "Username",
                            "name": "user",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "password",
                            "isRequired": true,
                            "label": "Password",
                            "name": "password",
                            "type": "password",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "text-field",
                            "id": "port",
                            "isRequired": true,
                            "label": "Port",
                            "name": "port",
                            "validate": Array [
                              Object {
                                "type": "required",
                              },
                            ],
                          },
                          Object {
                            "component": "spy-field",
                            "initialize": undefined,
                            "name": "spy-field",
                          },
                        ],
                      }
                    }
                  >
                    <ReactFinalForm
                      decorators={
                        Array [
                          [Function],
                        ]
                      }
                      dispatch={[Function]}
                      initialValues={Object {}}
                      mutators={
                        Object {
                          "concat": [Function],
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "removeBatch": [Function],
                          "shift": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                          "update": [Function],
                        }
                      }
                      onSubmit={[Function]}
                      render={[Function]}
                      subscription={
                        Object {
                          "pristine": true,
                          "submitting": true,
                          "valid": true,
                        }
                      }
                    >
                      <Component
                        formFields={
                          Array [
                            <SingleField
                              component="text-field"
                              id="dbname"
                              isRequired={true}
                              label="Database"
                              name="dbname"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="host"
                              isRequired={true}
                              label="Host"
                              name="host"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="user"
                              isRequired={true}
                              label="Username"
                              name="user"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="password"
                              isRequired={true}
                              label="Password"
                              name="password"
                              type="password"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="text-field"
                              id="port"
                              isRequired={true}
                              label="Port"
                              name="port"
                              validate={
                                Array [
                                  Object {
                                    "type": "required",
                                  },
                                ]
                              }
                            />,
                            <SingleField
                              component="spy-field"
                              name="spy-field"
                            />,
                          ]
                        }
                        schema={
                          Object {
                            "fields": Array [
                              Object {
                                "component": "text-field",
                                "id": "dbname",
                                "isRequired": true,
                                "label": "Database",
                                "name": "dbname",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "host",
                                "isRequired": true,
                                "label": "Host",
                                "name": "host",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "user",
                                "isRequired": true,
                                "label": "Username",
                                "name": "user",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "password",
                                "isRequired": true,
                                "label": "Password",
                                "name": "password",
                                "type": "password",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "text-field",
                                "id": "port",
                                "isRequired": true,
                                "label": "Port",
                                "name": "port",
                                "validate": Array [
                                  Object {
                                    "type": "required",
                                  },
                                ],
                              },
                              Object {
                                "component": "spy-field",
                                "initialize": undefined,
                                "name": "spy-field",
                              },
                            ],
                          }
                        }
                      >
                        <WrappedFormTemplate
                          canReset={true}
                          cancelLabel="Cancel"
                          disableSubmit={
                            Array [
                              "pristine",
                              "invalid",
                            ]
                          }
                          formFields={
                            Array [
                              <SingleField
                                component="text-field"
                                id="dbname"
                                isRequired={true}
                                label="Database"
                                name="dbname"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="host"
                                isRequired={true}
                                label="Host"
                                name="host"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="user"
                                isRequired={true}
                                label="Username"
                                name="user"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="password"
                                isRequired={true}
                                label="Password"
                                name="password"
                                type="password"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="text-field"
                                id="port"
                                isRequired={true}
                                label="Port"
                                name="port"
                                validate={
                                  Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ]
                                }
                              />,
                              <SingleField
                                component="spy-field"
                                name="spy-field"
                              />,
                            ]
                          }
                          formWrapperProps={
                            Object {
                              "className": "form-react",
                            }
                          }
                          resetLabel="Reset"
                          schema={
                            Object {
                              "fields": Array [
                                Object {
                                  "component": "text-field",
                                  "id": "dbname",
                                  "isRequired": true,
                                  "label": "Database",
                                  "name": "dbname",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "host",
                                  "isRequired": true,
                                  "label": "Host",
                                  "name": "host",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "user",
                                  "isRequired": true,
                                  "label": "Username",
                                  "name": "user",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "password",
                                  "isRequired": true,
                                  "label": "Password",
                                  "name": "password",
                                  "type": "password",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "text-field",
                                  "id": "port",
                                  "isRequired": true,
                                  "label": "Port",
                                  "name": "port",
                                  "validate": Array [
                                    Object {
                                      "type": "required",
                                    },
                                  ],
                                },
                                Object {
                                  "component": "spy-field",
                                  "initialize": undefined,
                                  "name": "spy-field",
                                },
                              ],
                            }
                          }
                          showFormControls={true}
                          submitLabel="Accept"
                        >
                          <FormTemplate
                            Button={[Function]}
                            ButtonGroup={[Function]}
                            Description={[Function]}
                            FormWrapper={[Function]}
                            Header={[Function]}
                            Title={[Function]}
                            buttonOrder={
                              Array [
                                "submit",
                                "reset",
                                "cancel",
                              ]
                            }
                            canReset={true}
                            cancelLabel="Cancel"
                            disableSubmit={
                              Array [
                                "pristine",
                                "invalid",
                              ]
                            }
                            formFields={
                              Array [
                                <SingleField
                                  component="text-field"
                                  id="dbname"
                                  isRequired={true}
                                  label="Database"
                                  name="dbname"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="host"
                                  isRequired={true}
                                  label="Host"
                                  name="host"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="user"
                                  isRequired={true}
                                  label="Username"
                                  name="user"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="password"
                                  isRequired={true}
                                  label="Password"
                                  name="password"
                                  type="password"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="text-field"
                                  id="port"
                                  isRequired={true}
                                  label="Port"
                                  name="port"
                                  validate={
                                    Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ]
                                  }
                                />,
                                <SingleField
                                  component="spy-field"
                                  name="spy-field"
                                />,
                              ]
                            }
                            formWrapperProps={
                              Object {
                                "className": "form-react",
                              }
                            }
                            resetLabel="Reset"
                            schema={
                              Object {
                                "fields": Array [
                                  Object {
                                    "component": "text-field",
                                    "id": "dbname",
                                    "isRequired": true,
                                    "label": "Database",
                                    "name": "dbname",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "host",
                                    "isRequired": true,
                                    "label": "Host",
                                    "name": "host",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "user",
                                    "isRequired": true,
                                    "label": "Username",
                                    "name": "user",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "password",
                                    "isRequired": true,
                                    "label": "Password",
                                    "name": "password",
                                    "type": "password",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "text-field",
                                    "id": "port",
                                    "isRequired": true,
                                    "label": "Port",
                                    "name": "port",
                                    "validate": Array [
                                      Object {
                                        "type": "required",
                                      },
                                    ],
                                  },
                                  Object {
                                    "component": "spy-field",
                                    "initialize": undefined,
                                    "name": "spy-field",
                                  },
                                ],
                              }
                            }
                            showFormControls={true}
                            submitLabel="Accept"
                          >
                            <Form
                              className="form-react"
                              onSubmit={[Function]}
                            >
                              <Form
                                className="form-0-2-3 form-react"
                                noValidate={true}
                                onSubmit={[Function]}
                              >
                                <form
                                  className="bx--form form-0-2-3 form-react"
                                  noValidate={true}
                                  onSubmit={[Function]}
                                >
                                   
                                  <SingleField
                                    component="text-field"
                                    id="dbname"
                                    isRequired={true}
                                    key="dbname"
                                    label="Database"
                                    name="dbname"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "dbname",
                                          "isRequired": true,
                                          "label": "Database",
                                          "name": "dbname",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="dbname"
                                          isRequired={true}
                                          label="Database"
                                          name="dbname"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="dbname"
                                            invalid={false}
                                            invalidText=""
                                            key="dbname"
                                            labelText={
                                              <IsRequired>
                                                Database
                                              </IsRequired>
                                            }
                                            name="dbname"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="dbname"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Database
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="dbname"
                                                    name="dbname"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="host"
                                    isRequired={true}
                                    key="host"
                                    label="Host"
                                    name="host"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "host",
                                          "isRequired": true,
                                          "label": "Host",
                                          "name": "host",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="host"
                                          isRequired={true}
                                          label="Host"
                                          name="host"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="host"
                                            invalid={false}
                                            invalidText=""
                                            key="host"
                                            labelText={
                                              <IsRequired>
                                                Host
                                              </IsRequired>
                                            }
                                            name="host"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="host"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Host
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="host"
                                                    name="host"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="user"
                                    isRequired={true}
                                    key="user"
                                    label="Username"
                                    name="user"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "user",
                                          "isRequired": true,
                                          "label": "Username",
                                          "name": "user",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="user"
                                          isRequired={true}
                                          label="Username"
                                          name="user"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="user"
                                            invalid={false}
                                            invalidText=""
                                            key="user"
                                            labelText={
                                              <IsRequired>
                                                Username
                                              </IsRequired>
                                            }
                                            name="user"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="user"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Username
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="user"
                                                    name="user"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="password"
                                    isRequired={true}
                                    key="password"
                                    label="Password"
                                    name="password"
                                    type="password"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "password",
                                          "isRequired": true,
                                          "label": "Password",
                                          "name": "password",
                                          "type": "password",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="password"
                                          isRequired={true}
                                          label="Password"
                                          name="password"
                                          type="password"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="password"
                                            invalid={false}
                                            invalidText=""
                                            key="password"
                                            labelText={
                                              <IsRequired>
                                                Password
                                              </IsRequired>
                                            }
                                            name="password"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            type="password"
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="password"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Password
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="password"
                                                    name="password"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="password"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="text-field"
                                    id="port"
                                    isRequired={true}
                                    key="port"
                                    label="Port"
                                    name="port"
                                    validate={
                                      Array [
                                        Object {
                                          "type": "required",
                                        },
                                      ]
                                    }
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "text-field",
                                          "id": "port",
                                          "isRequired": true,
                                          "label": "Port",
                                          "name": "port",
                                          "validate": Array [
                                            Object {
                                              "type": "required",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <TextField
                                          component="text-field"
                                          id="port"
                                          isRequired={true}
                                          label="Port"
                                          name="port"
                                          validate={
                                            Array [
                                              Object {
                                                "type": "required",
                                              },
                                            ]
                                          }
                                        >
                                          <TextInput
                                            id="port"
                                            invalid={false}
                                            invalidText=""
                                            key="port"
                                            labelText={
                                              <IsRequired>
                                                Port
                                              </IsRequired>
                                            }
                                            name="port"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            value=""
                                            warn={false}
                                            warnText=""
                                          >
                                            <div
                                              className="bx--form-item bx--text-input-wrapper"
                                            >
                                              <label
                                                className="bx--label"
                                                htmlFor="port"
                                              >
                                                <IsRequired>
                                                  <span
                                                    aria-hidden="true"
                                                    className="ddorg__carbon-component-mapper_is-required isRequired-0-2-4"
                                                  >
                                                    *
                                                  </span>
                                                  Port
                                                </IsRequired>
                                              </label>
                                              <div
                                                className="bx--text-input__field-outer-wrapper"
                                              >
                                                <div
                                                  className="bx--text-input__field-wrapper"
                                                  data-invalid={null}
                                                >
                                                  <input
                                                    className="bx--text-input bx--text-input--md"
                                                    disabled={false}
                                                    id="port"
                                                    name="port"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          </TextInput>
                                        </TextField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <SingleField
                                    component="spy-field"
                                    key="spy-field"
                                    name="spy-field"
                                  >
                                    <FormConditionWrapper
                                      field={
                                        Object {
                                          "component": "spy-field",
                                          "initialize": undefined,
                                          "name": "spy-field",
                                        }
                                      }
                                    >
                                      <FormFieldHideWrapper
                                        hideField={false}
                                      >
                                        <SpyField
                                          component="spy-field"
                                          name="spy-field"
                                        >
                                          <FormSpy
                                            onChange={[Function]}
                                            subscription={
                                              Object {
                                                "pristine": true,
                                                "valid": true,
                                              }
                                            }
                                          />
                                        </SpyField>
                                      </FormFieldHideWrapper>
                                    </FormConditionWrapper>
                                  </SingleField>
                                  <FormSpy>
                                    <FormControls
                                      Button={[Function]}
                                      ButtonGroup={[Function]}
                                      FormSpy={[Function]}
                                      buttonOrder={
                                        Array [
                                          "submit",
                                          "reset",
                                          "cancel",
                                        ]
                                      }
                                      canReset={true}
                                      cancelLabel="Cancel"
                                      disableSubmit={true}
                                      formFields={
                                        Array [
                                          <SingleField
                                            component="text-field"
                                            id="dbname"
                                            isRequired={true}
                                            label="Database"
                                            name="dbname"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="host"
                                            isRequired={true}
                                            label="Host"
                                            name="host"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="user"
                                            isRequired={true}
                                            label="Username"
                                            name="user"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="password"
                                            isRequired={true}
                                            label="Password"
                                            name="password"
                                            type="password"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="text-field"
                                            id="port"
                                            isRequired={true}
                                            label="Port"
                                            name="port"
                                            validate={
                                              Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ]
                                            }
                                          />,
                                          <SingleField
                                            component="spy-field"
                                            name="spy-field"
                                          />,
                                        ]
                                      }
                                      formSpyProps={
                                        Object {
                                          "active": undefined,
                                          "dirty": false,
                                          "dirtyFields": Object {},
                                          "dirtyFieldsSinceLastSubmit": Object {},
                                          "dirtySinceLastSubmit": false,
                                          "error": undefined,
                                          "errors": Object {
                                            "dbname": "Required",
                                            "host": "Required",
                                            "password": "Required",
                                            "port": "Required",
                                            "user": "Required",
                                          },
                                          "form": Object {
                                            "batch": [Function],
                                            "blur": [Function],
                                            "change": [Function],
                                            "destroyOnUnregister": false,
                                            "focus": [Function],
                                            "getFieldState": [Function],
                                            "getRegisteredFields": [Function],
                                            "getState": [Function],
                                            "initialize": [Function],
                                            "isValidationPaused": [Function],
                                            "mutators": Object {
                                              "concat": [Function],
                                              "insert": [Function],
                                              "move": [Function],
                                              "pop": [Function],
                                              "push": [Function],
                                              "remove": [Function],
                                              "removeBatch": [Function],
                                              "shift": [Function],
                                              "swap": [Function],
                                              "unshift": [Function],
                                              "update": [Function],
                                            },
                                            "pauseValidation": [Function],
                                            "registerField": [Function],
                                            "reset": [Function],
                                            "resetFieldState": [Function],
                                            "restart": [Function],
                                            "resumeValidation": [Function],
                                            "setConfig": [Function],
                                            "submit": [Function],
                                            "subscribe": [Function],
                                          },
                                          "hasSubmitErrors": false,
                                          "hasValidationErrors": true,
                                          "initialValues": Object {},
                                          "invalid": true,
                                          "modified": Object {
                                            "dbname": false,
                                            "host": false,
                                            "password": false,
                                            "port": false,
                                            "user": false,
                                          },
                                          "modifiedSinceLastSubmit": false,
                                          "pristine": true,
                                          "submitError": undefined,
                                          "submitErrors": undefined,
                                          "submitFailed": false,
                                          "submitSucceeded": false,
                                          "submitting": false,
                                          "touched": Object {
                                            "dbname": false,
                                            "host": false,
                                            "password": false,
                                            "port": false,
                                            "user": false,
                                          },
                                          "valid": false,
                                          "validating": false,
                                          "values": Object {},
                                          "visited": Object {
                                            "dbname": false,
                                            "host": false,
                                            "password": false,
                                            "port": false,
                                            "user": false,
                                          },
                                        }
                                      }
                                      onCancel={[Function]}
                                      onReset={[Function]}
                                      resetLabel="Reset"
                                      schema={
                                        Object {
                                          "fields": Array [
                                            Object {
                                              "component": "text-field",
                                              "id": "dbname",
                                              "isRequired": true,
                                              "label": "Database",
                                              "name": "dbname",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "host",
                                              "isRequired": true,
                                              "label": "Host",
                                              "name": "host",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "user",
                                              "isRequired": true,
                                              "label": "Username",
                                              "name": "user",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "password",
                                              "isRequired": true,
                                              "label": "Password",
                                              "name": "password",
                                              "type": "password",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "text-field",
                                              "id": "port",
                                              "isRequired": true,
                                              "label": "Port",
                                              "name": "port",
                                              "validate": Array [
                                                Object {
                                                  "type": "required",
                                                },
                                              ],
                                            },
                                            Object {
                                              "component": "spy-field",
                                              "initialize": undefined,
                                              "name": "spy-field",
                                            },
                                          ],
                                        }
                                      }
                                      submitLabel="Accept"
                                    >
                                      <ButtonGroup>
                                        <ButtonSet
                                          className=""
                                        >
                                          <div
                                            className="bx--btn-set"
                                          >
                                            <Button
                                              buttonType="submit"
                                              disabled={true}
                                              key="form-submit"
                                              label="Accept"
                                              type="submit"
                                              variant="primary"
                                            >
                                              <Button
                                                disabled={true}
                                                kind="primary"
                                                type="submit"
                                                variant="primary"
                                              >
                                                <button
                                                  aria-describedby={null}
                                                  aria-pressed={null}
                                                  className="bx--btn bx--btn--primary bx--btn--disabled"
                                                  disabled={true}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onMouseEnter={[Function]}
                                                  onMouseLeave={[Function]}
                                                  tabIndex={0}
                                                  type="submit"
                                                  variant="primary"
                                                >
                                                  Accept
                                                </button>
                                              </Button>
                                            </Button>
                                            <Button
                                              buttonType="reset"
                                              disabled={true}
                                              key="form-reset"
                                              label="Reset"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <Button
                                                disabled={true}
                                                kind="secondary"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <button
                                                  aria-describedby={null}
                                                  aria-pressed={null}
                                                  className="bx--btn bx--btn--secondary bx--btn--disabled"
                                                  disabled={true}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onMouseEnter={[Function]}
                                                  onMouseLeave={[Function]}
                                                  tabIndex={0}
                                                  type="button"
                                                >
                                                  Reset
                                                </button>
                                              </Button>
                                            </Button>
                                            <Button
                                              buttonType="cancel"
                                              key="form-cancel"
                                              label="Cancel"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <Button
                                                kind="secondary"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <button
                                                  aria-describedby={null}
                                                  aria-pressed={null}
                                                  className="bx--btn bx--btn--secondary"
                                                  disabled={false}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onMouseEnter={[Function]}
                                                  onMouseLeave={[Function]}
                                                  tabIndex={0}
                                                  type="button"
                                                >
                                                  Cancel
                                                </button>
                                              </Button>
                                            </Button>
                                          </div>
                                        </ButtonSet>
                                      </ButtonGroup>
                                    </FormControls>
                                  </FormSpy>
                                   
                                </form>
                              </Form>
                            </Form>
                          </FormTemplate>
                        </WrappedFormTemplate>
                      </Component>
                    </ReactFinalForm>
                  </FormRenderer>
                </MiqFormRenderer>
              </Connect(MiqFormRenderer)>
            </div>
          </div>
          <span
            className="bx--visually-hidden"
            role="link"
            tabIndex="0"
          >
            Focus sentinel
          </span>
        </div>
      </Modal>
    </div>
  </SettingsReplicationForm>
</Provider>
`;
