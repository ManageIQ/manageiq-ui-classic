#method_inputs_div
  - if @in_a_form || @angular_form
    #method_form_div
      - if @ae_method.location == "playbook"
        = render :partial => "angular_method_form", :locals  => {:prefix => ""}
      - else
        = render :partial => "method_form", :locals  => {:prefix => ""}
  - else
    %h3
      = _('Main Info')
    .form-horizontal.static
      .form-group
        = format_form_group(_('Type'), @ae_method.location)
      .form-group
        = format_form_group(_('Fully Qualified Name'), @sb[:namespace_path])
      .form-group
        = format_form_group(_('Name'), @ae_method.name)
      .form-group
        = format_form_group(_('Display Name'), @ae_method.display_name)
      .form-group
        = format_form_group(_('Created On'), format_timezone(@ae_method.created_on, Time.zone, "gtl"))
    - if @ae_method.location == 'inline'
      = render :partial => "embedded_methods"
    = render :partial => "domain_overrides", :locals => {:node_prefix => "aem", :model => "Method"}
    %h3= (@ae_method.location == 'builtin') ? _('Builtin name') : _('Data')
    - if @ae_method.location == "inline"
      = text_area("method1",
        "data",
        :value    => @ae_method.data,
        :size     => "90x20",
        :disabled => true,
        :style    => "display:none;")
      -# Create a MyCodeMirror editor for the text area
      = render :partial => "/layouts/my_code_mirror",
        :locals  => {:text_area_id => "method1_data",
          :mode                    => "ruby",
          :line_numbers            => true,
          :read_only               => true}
    - elsif @ae_method.location == 'expression'
      = @expression
    - elsif @ae_method.location == 'playbook'
      .form-horizontal.static
        .form-group
          = format_form_group(_('Repository'), @playbook_details[:repository])
        .form-group
          = format_form_group(_('Playbook'), @playbook_details[:playbook])
        .form-group
          = format_form_group(_('Machine Credential'), @playbook_details[:machine_credential])
        .form-group
          = format_form_group(_('Vault Credential'), @playbook_details[:vault_credential])
        .form-group
          = format_form_group(_('Cloud Credential'), @playbook_details[:cloud_credential])
        .form-group
          = format_form_group(_('Escalate Privilege'), @playbook_details[:become_enabled])
        .form-group
          = format_form_group(_('Max TTL'), @playbook_details[:execution_ttl])
        .form-group
          = format_form_group(_('Hosts'), @playbook_details[:hosts])
        .form-group
          = format_form_group(_('Logging Output'), _(ViewHelper::LOG_OUTPUT_LEVELS[@playbook_details[:log_output]]))
        .form-group
          = format_form_group(_('Verbosity'), _(ViewHelper::VERBOSITY_LEVELS[@playbook_details[:verbosity]]))
    - else
      = @ae_method.data
    -# show inputs parameters grid if there are any inputs
    #params_div{:style => @record.inputs.empty? ? "display: none;" : ""}
      %hr
      %h3= _('Input Parameters')
      %table#params_grid.table.table-striped.table-bordered
        %thead
          %tr
            %th= _('Input Name')
            %th= _('Data Type')
            %th= _('Default Value')
        %tbody
          - @record.inputs.each do |record|
            %tr
              %td= record_name(record)
              %td= record.datatype.blank? ? 'string' : record.datatype
              %td
                - if record.datatype == 'password'
                  ********
                - else
                  = record.default_value
