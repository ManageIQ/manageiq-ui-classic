- url = url_for_only_path(:action => 'automate_button_field_changed')
#ab_form
  #policy_bar
    - if @resolve[:uri] && Hash[*@resolve[:target_classes].flatten].invert[@resolve[:new][:target_class]] == @edit[:new][:target_class]

      %li
        - t = _("Paste object details for use in a Button.")
        = link_to(image_tag(image_path('toolbars/paste.png'), :border => "0", :class  => "", :alt => t),
          {:action => "resolve", :button => "paste"},
          "data-miq_sparkle_on"  => true,
          "data-miq_sparkle_off" => true,
          :remote                => true,
          "data-method"          => :post,
          :title                 => t)
    - else
      = image_tag(image_path('toolbars/paste.png'),
        :class => "dimmed",
        :title => _("Paste is not available, no object information has been copied from the Simulation screen"))
  = render :partial => "layouts/flash_msg"
  %h3
    = _('Action')
  .form-horizontal
    .form-group
      %label.control-label.col-md-2
        = _('Text')
      .col-md-8
        .input-group
          = text_field_tag("name", @edit[:new][:name],
                          :maxlength         => 30,
                          :class             => "form-control",
                          "data-miq_observe" => {:url => url}.to_json)
          .input-group-addon
            %label.checkbox-inline
              = check_box_tag("display", "1", @edit[:new][:display],
                               "data-miq_observe_checkbox" => {:url => url}.to_json)
              = _('Display on Button')
      - unless is_browser_ie?
        = javascript_tag(javascript_focus('name'))
    .form-group
      %label.control-label.col-md-2
        = _('Hover Text')
      .col-md-8
        = text_field_tag("description", @edit[:new][:description],
                          :maxlength         => 50,
                          :class             => "form-control",
                          "data-miq_observe" => {:url => url}.to_json)
    .form-group
      %label.control-label.col-md-2
        = _('Icon')
      .col-md-8#button-icon-picker{'ng-controller' => 'fonticonPickerController as vm'}
        %miq-fonticon-picker{'input-name' => 'button_icon', :selected => @edit[:new][:button_icon], 'icon-changed' => 'vm.select(selected);'}
          %miq-fonticon-family{:selector => 'ff', :title => 'Font Fabulous'}
          %miq-fonticon-family{:selector => 'pficon', :title => 'PatternFly'}
          %miq-fonticon-family{:selector => 'fa', :title => 'Font Awesome'}
    .form-group
      %label.control-label.col-md-2
        = _('Icon Color')
      .col-md-8
        -# Remove the default #4d5258 value when using a color picker with nil support
        = color_field_tag("button_color", @edit[:new][:button_color] || '#4d5258',
                          :maxlength         => 30,
                          :class             => "form-control",
                          "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
    .form-group
      %label.control-label.col-md-2
        = _('Dialog')
      .col-md-8
        = select_tag('dialog_id',
                      options_for_select([[_("<None>"), nil]] + Array(@edit[:new][:available_dialogs].invert).sort_by { |a| a.first.downcase }, @edit[:new][:dialog_id]),
                      "data-miq_sparkle_on" => true,
                      :class => "selectpicker")
    .form-group
      %label.control-label.col-md-2
        = _('Open URL')
      .col-md-8
        = check_box_tag("open_url", "1", @edit[:new][:open_url], "data-miq_observe_checkbox" => {:url => url}.to_json)

    .form-group
      %label.control-label.col-md-2
        = _('Display for')
      .col-md-8
        = select_tag("display_for",
                     options_for_select([[_('Single entity'), 'single'], [_('List'), 'list'], [_('Single and list'), 'both']], @edit[:new][:display_for]),
                     "data-miq_sparkle_on" => true)
    .form-group
      %label.control-label.col-md-2
        = _('Submit')
      .col-md-8
        = select_tag("submit_how",
                     options_for_select([[_('Submit all'), 'all'], [_('One by one'), 'one']], @edit[:new][:submit_how]),
                     "data-miq_sparkle_on" => true,
                    )
  = render(:partial => "layouts/role_enablement_expression",
           :locals  => {:rec_id => @custom_button ? @custom_button.id : 'new', :action => "automate_button_field_changed"})
%h3
  = _('Disabled Button Text')
  .form-horizontal.static
    = text_field_tag("disabled_text", @edit[:new][:disabled_text],
                          :maxlength         => 50,
                          :class             => "form-control",
                          "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
  = render(:partial => "layouts/role_visibility_expression",
           :locals  => {:rec_id => @custom_button ? @custom_button.id : 'new', :action => "automate_button_field_changed"})
  = render(:partial => "layouts/ae_resolve_options",
    :locals         => {:resolve => @edit,
      :form_action               => "ae_resolve",
      :ae_custom_button          => true,
      :field_changed_url         => "automate_button_field_changed"})
  = render(:partial => "layouts/role_visibility",
           :locals  => {:rec_id => @custom_button ? @custom_button.id : 'new', :action => "automate_button_field_changed"})
:javascript
  miqInitSelectPicker();
  miqSelectPickerEvent('dialog_id', '#{url}');
  miqSelectPickerEvent('display_for', '#{url}');
  miqSelectPickerEvent('submit_how', '#{url}');
  miq_bootstrap('#button-icon-picker', 'ManageIQ.fonticonPicker');

  // This is an ugly hack to be able to use this component in a non-angular context with miq-observe
  // FIXME: Remove this when the form is converted to angular
  $(function() {
    $('#button-icon-picker input[type="hidden"]').on('change', _.debounce(function() {
      miqObserveRequest('#{url}', {
        no_encoding: true,
        data: 'button_icon' + '=' + $(this).val(),
      });
    }, 700, {leading: true, trailing: true}));
  });
