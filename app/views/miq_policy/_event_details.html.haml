#event_details_div
  - if @event
    #event_info_div
      = render :partial => "layouts/flash_msg"
      %h3= _("Basic Information")
      .form-horizontal.static
        .form-group
          %label.control-label.col-md-2= _("Event Group")
          .col-md-10
            %p.form-control-static= h(@event.memberof.first.description)
        - unless x_active_tree == :event_tree
          .form-group
            %label.control-label.col-md-2= _("Attached to Policy")
            .col-md-10
              %p.form-control-static= h(@policy.description)
      %hr

      - if x_active_tree == :event_tree
        %h3= _("Assigned to Policies")
        - if @event_policies.empty?
          = render :partial => 'layouts/info_msg', :locals => {:message => _("This Event is not assigned to any Policies.")}
        - else
          %table.table.table-striped.table-bordered.table-hover
            %tbody
              - @event_policies.each do |p|
                - id = "xx-#{p.mode.downcase}_xx-#{p.mode.downcase}-#{p.towhat.camelize(:lower)}_p-#{p.id}"
                %tr{:title => _("Click to view Policy"),
                  :onclick => remote_function(:url => "/miq_policy/x_show/#{id}?accord=policy")}
                  %td.table-view-pf-select
                    %i{:class => p.decorate.fonticon}
                  %td
                    = p.description
      - else
        %h3= _("Order of Actions if ALL Conditions are True")
        - if @edit
          .col-md-5
            = _('Available Actions:')
            %span#choices_chosen_true_div
              = select_tag('choices_chosen_true[]',
                options_for_select(@edit[:choices_true].sort),
                :multiple => true,
                :class    => "form-control",
                :style    => "overflow-x: scroll;",
                :size     => 8,
                :id       => "choices_chosen_true")

          .col-md-1{:style => "padding: 10px"}
            .spacer
            .spacer
            - [[_("Move selected Actions into this Event"),   'choices_chosen_true_div', 'true_right',   'fa-angle-right'],
               [_("Remove all Actions from this Event"),      nil,                       'true_allleft', 'fa-angle-double-left'],
               [_("Remove selected Actions from this Event"), 'members_chosen_true_div', 'true_left',    'fa-angle-left']].each do |title, chosen_div, action, arrow_style|
              %button.btn.btn-default.btn-block{:title => title,
                                      :remote => true,
                                      "data-submit" => chosen_div,
                                      "data-method" => :post,
                                      "data-miq_sparkle_on"  => true,
                                      "data-miq_sparkle_off" => true,
                                      "data-click_url" => {:url => url_for_only_path(:action => 'event_edit',
                                                                           :button => action,
                                                                           :id => @event)}.to_json}
                %i.fa.fa-lg.hidden-xs.hidden-sm{:class => arrow_style}
                %i.fa.fa-lg.fa-rotate-90.hidden-md.hidden-lg{:class => arrow_style}

            .spacer
          .col-md-5.col-sm-11.col-xs-11
            = _(' Selected Actions:')
            %span#members_chosen_true_div
              = select_tag('members_chosen_true[]',
                options_for_select(@edit[:new][:actions_true], @true_selected),
                :multiple => true,
                :class    => "form-control",
                :style    => "overflow-x: scroll;",
                :size     => 8,
                :id       => "members_chosen_true")

          .col-md-1.col-sm-1.col-xs-1{:style => "padding: 10px"}
            .spacer
            .spacer
            - [[_("Move selected Action up"),              'members_chosen_true_div', 'true_up',    'fa-angle-up'],
               [_("Move selected Action down"),            'members_chosen_true_div', 'true_down',  'fa-angle-down'],
               [_("Set selected Actions to Synchronous"),  'members_chosen_true_div', 'true_sync',  'S'],
               [_("Set selected Actions to Asynchronous"), 'members_chosen_true_div', 'true_async', 'A']].each do |title, chosen_div, action, arrow_style|
              %button.btn.btn-default.btn-block{:title => title,
                                      :remote => true,
                                      "data-submit" => chosen_div,
                                      "data-method" => :post,
                                      "data-miq_sparkle_on"  => true,
                                      "data-miq_sparkle_off" => true,
                                      "data-click_url" => {:url => url_for_only_path(:action => 'event_edit',
                                                                           :button => action,
                                                                           :id => @event)}.to_json}
                - if %w(A S).include?(arrow_style)
                  =_(arrow_style)
                - else
                  %i.fa.fa-lg{:class => arrow_style}

            .spacer
          %hr
        - else
          - if @event_true_actions.empty?
            = render :partial => 'layouts/info_msg', :locals => {:message => _("This Event has no true Actions.")}
          - else
            %table.table.table-striped.table-bordered.table-hover
              %thead
                %tr
                  %th.table-view-pf-select
                  %th= _("Description")
                  %th= _("Synchronous")
                  %th= _("Type")
              %tbody
                - @event_true_actions.each do |a|
                  - id = "a-#{a.id}"
                  - t = remote_function(:url => "/miq_policy/x_show/#{id}?accord=action")
                  - f = "miqTreeActivateNode('#{x_active_tree}', '#{x_node}_#{id}');"
                  %tr{:title => _("View this Event Action"),
                    :onclick => (x_active_tree == :action_tree) ? t : f}
                    %td.table-view-pf-select
                      %i.pficon.pficon-ok
                    %td
                      = a.description
                    %td
                      = a.v_synchronicity
                    %td
                      = a.action_type

        %br{:style => "clear: both"}
        %h3= _("Order of Actions if ANY Conditions are False")
        - if @edit

          .col-md-5
            = _("Available Actions:")
            %span#choices_chosen_false_div
              = select_tag('choices_chosen_false[]',
                options_for_select(@edit[:choices_false].sort),
                :multiple => true,
                :class    => "form-control",
                :style    => "overflow-x: scroll;",
                :size     => 8,
                :id       => "choices_chosen_false")

          .col-md-1{:style => "padding: 10px"}
            .spacer
            .spacer
            - [[_("Move selected Actions into this Event"),   'choices_chosen_false_div', 'false_right',   'fa-angle-right'],
               [_("Remove all Actions from this Event"),      nil,                       'false_allleft', 'fa-angle-double-left'],
               [_("Remove selected Actions from this Event"), 'members_chosen_false_div', 'false_left',    'fa-angle-left']].each do |title, chosen_div, action, arrow_style|
              %button.btn.btn-default.btn-block{:title => title,
                                      :remote => true,
                                      "data-submit" => chosen_div,
                                      "data-method" => :post,
                                      "data-miq_sparkle_on"  => true,
                                      "data-miq_sparkle_off" => true,
                                      "data-click_url" => {:url => url_for_only_path(:action => 'event_edit',
                                                                           :button => action,
                                                                           :id => @event)}.to_json}
                %i.fa.fa-lg.hidden-xs.hidden-sm{:class => arrow_style}
                %i.fa.fa-lg.fa-rotate-90.hidden-md.hidden-lg{:class => arrow_style}

            .spacer

          .col-md-5.col-sm-11.col-xs-11
            = _(" Selected Actions:")
            %span#members_chosen_false_div
              = select_tag('members_chosen_false[]',
                options_for_select(@edit[:new][:actions_false], @false_selected),
                :multiple => true,
                :class    => "form-control",
                :style    => "overflow-x: scroll;",
                :size     => 8,
                :id       => "members_chosen_false")

          .col-md-1.col-sm-1.col-xs-1{:style => "padding: 10px"}
            .spacer
            .spacer
            - [[_("Move selected Action up"),              'members_chosen_false_div', 'false_up',    'fa-angle-up'],
               [_("Move selected Action down"),            'members_chosen_false_div', 'false_down',  'fa-angle-down'],
               [_("Set selected Actions to Synchronous"),  'members_chosen_false_div', 'false_sync',  'S'],
               [_("Set selected Actions to Asynchronous"), 'members_chosen_false_div', 'false_async', 'A']].each do |title, chosen_div, action, arrow_style|
              %button.btn.btn-default.btn-block{:title => title,
                                      :remote => true,
                                      "data-submit" => chosen_div,
                                      "data-method" => :post,
                                      "data-miq_sparkle_on"  => true,
                                      "data-miq_sparkle_off" => true,
                                      "data-click_url" => {:url => url_for_only_path(:action => 'event_edit',
                                                                           :button => action,
                                                                           :id => @event)}.to_json}
                - if %w(A S).include?(arrow_style)
                  =_(arrow_style)
                - else
                  %i.fa.fa-lg{:class => arrow_style}
            .spacer

        - else
          - if @event_false_actions.empty?
            = render :partial => 'layouts/info_msg', :locals => {:message => _("This Event has no false Actions.")}
          - else
            %table.table.table-striped.table-bordered.table-hover
              %thead
                %tr
                  %th.table-view-pf-select
                  %th= _('Description')
                  %th= _('Synchronous')
                  %th= _('Type')
              %tbody
                - @event_false_actions.each do |a|
                  - id = "a-#{a.id}"
                  - t = remote_function(:url => "/miq_policy/x_show/#{id}?accord=action")
                  - f = "miqTreeActivateNode('#{x_active_tree}', '#{x_node}_#{id}');"
                  %tr{:title => _("View this Event Action"),
                     :onclick => (x_active_tree == :action_tree) ? t : f}
                    %td.table-view-pf-select
                      %i.pficon.pficon-error-circle-o
                    %td
                      = a.description
                    %td
                      = a.v_synchronicity
                    %td
                      = a.action_type
