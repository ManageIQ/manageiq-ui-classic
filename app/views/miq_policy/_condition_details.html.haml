- if @edit
  - url = url_for_only_path(:action => 'condition_field_changed', :id => (@condition.id || 'new'))
  - observe_with_interval = {:interval => '.5', :url => url}.to_json
#condition_details_div
  - if @condition
    #condition_info_div
      = render :partial => "layouts/flash_msg"
      .form-horizontal
        - if @edit
          -# Don't show basic info box with description only unless in edit mode
          %h3= _("Basic Information")
          .form-horizontal
            .form-group
              %label.control-label.col-md-2
                = _("Description")
              .col-md-8
                - if @edit
                  = text_field_tag("description", @edit[:new][:description],
                    :maxlength         => ViewHelper::MAX_DESC_LEN,
                    "data-miq_observe" => observe_with_interval,
                    :class             => "form-control")
                  = javascript_tag(javascript_focus('description'))
                - else
                  %p.form-control-static
                    = h(@condition.description)
          %hr

        - if @edit
          %h3= _("Scope")
          .form-horizontal
            .form-group
              %label.control-label.col-md-2
              .col-md-8
                = render :partial => "form_scope"
        - else
          %h3= _("Scope")
          .form-horizontal
            .form-group
              %label.control-label.col-md-2
                = _("Description")
              .col-md-8
                - if !@applies_to_exp_table.nil?
                  - @applies_to_exp_table.each do |token|
                    - if ! ["AND", "OR", "(", ")"].include?([token].flatten.first)
                      = h([token].flatten.first)
                    - else
                      %font{:color => "black"}
                        %b
                          = h([token].flatten.first)
                - else
                  = render :partial => 'layouts/info_msg', :locals => {:message => _("No scope defined, the scope of this condition includes all elements.")}
        %hr

        %h3= _("Expression")
        .form-horizontal
          .form-group
            %label.control-label.col-md-2
            .col-md-8
              - if @edit
                = render :partial => "form_expression"
              - else
                - if !@expression_table.nil?
                  - @expression_table.each do |token|
                    - if ! ["AND", "OR", "(", ")"].include?([token].flatten.first)
                      = h([token].flatten.first)
                    - else
                      %font{:color => "black"}
                        %b
                          = h([token].flatten.first)
                - else
                  = render :partial => 'layouts/info_msg', :locals => {:message => _("A condition must contain a valid expression.")}
        %hr


        -# Notes field
        %h3= _("Notes")
        .form-horizontal
          - if @edit
            .form-group
              %label.control-label.col-md-2
              .col-md-8
                (
                %span#notes_count= @edit[:new][:notes] ? @edit[:new][:notes].length : 0
                \/ 512)
                = text_area_tag("notes", @edit[:new][:notes],
                  :rows                       => 4,
                  :maxlength                  => "512",
                  :counter                    => "notes_count",
                  "data-miq_check_max_length" => true,
                  "data-miq_observe"          => observe_with_interval)
          - else
            - if @condition.notes.blank?
              = render :partial => 'layouts/info_msg', :locals => {:message => _("No notes have been entered.")}
            - else
              = text_area_tag("notes", @condition.notes, :readonly => true, :rows => 5)
            %hr

          - if x_active_tree == :condition_tree && !@edit
            %h3= _("Assigned to Policies")
            - if @condition_policies.empty?
              = render :partial => 'layouts/info_msg', :locals => {:message => _("This Condition is not assigned to any Policies.")}
            - else
              %table.table.table-striped.table-bordered.table-hover
                %tbody
                  - @condition_policies.each do |p|
                    - id = "xx-#{p.mode.downcase}_xx-#{p.mode.downcase}-#{p.towhat.camelize(:lower)}_p-#{p.id}"
                    %tr{:title => _("Click to view Policy"),
                      :onclick => remote_function(:url => "/miq_policy/x_show/#{id}?accord=policy")}
                      %td.table-view-pf-select
                        %i{:class => p.decorate.fonticon}
                      %td
                        = p.description
