#form_filter_div
  .div
    .div
      -# %h4 {{buildLegend()}}
      %div{"ng-switch" => "", "on" => "vm.scheduleModel.action_typ"}
        .form-group
          %label.col-md-2.control-label{"for" => "filter_typ", "ng-hide" => "vm.dbBackup() || vm.automateRequest()"}
            = _("Filter")
          %label.col-md-2.control-label{"for" => "filter_typ", "ng-show" => "vm.dbBackup() && !vm.automateRequest()"}
            = _("Type")
          .col-md-10
            = select_tag('filter_typ', options_for_select(@vm_options_for_select),
              "ng-switch-when" => "vm",
              "ng-model"       => "vm.scheduleModel.filter_typ",
              "ng-change"      => "vm.filterTypeChanged()",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@vm_options_for_select),
              "ng-switch-when" => "vm_check_compliance",
              "ng-model"       => "vm.scheduleModel.filter_typ",
              "ng-change"      => "vm.filterTypeChanged()",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@template_options_for_select),
              "ng-switch-when" => "miq_template",
              "ng-model"       => "vm.scheduleModel.filter_typ",
              "ng-change"      => "vm.filterTypeChanged()",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@host_options_for_select),
              "ng-switch-when" => "host",
              "ng-model"       => "vm.scheduleModel.filter_typ",
              "ng-change"      => "vm.filterTypeChanged()",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@host_options_for_select),
              "ng-switch-when" => "host_check_compliance",
              "ng-model"       => "vm.scheduleModel.filter_typ",
              "ng-change"      => "vm.filterTypeChanged()",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@container_image_options_for_select),
              "ng-switch-when" => "container_image",
              "ng-model"       => "vm.scheduleModel.filter_typ",
              "ng-change"      => "vm.filterTypeChanged()",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@container_image_options_for_select),
              "ng-switch-when" => "container_image_check_compliance",
              "ng-model"       => "vm.scheduleModel.filter_typ",
              "ng-change"      => "vm.filterTypeChanged()",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@cluster_options_for_select),
              "ng-switch-when" => "emscluster",
              "ng-model"       => "vm.scheduleModel.filter_typ",
              "ng-change"      => "vm.filterTypeChanged()",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@storage_options_for_select),
              "ng-switch-when" => "storage",
              "ng-model"       => "vm.scheduleModel.filter_typ",
              "ng-change"      => "vm.filterTypeChanged()",
              "selectpicker-for-select-tag"   => "")
            = select_tag('log_protocol', options_for_select(@database_backup_options_for_select),
              "ng-switch-when" => "db_backup",
              "ng-model"       => "vm.scheduleModel.log_protocol",
              "ng-change"      => "vm.logProtocolChanged()",
              "selectpicker-for-select-tag"   => "")

            %select#filter_value{"update-dropdown-for-filter" => "",
                                 "dropdown-model"             => "vm.scheduleModel",
                                 "dropdown-list"              => "vm.filterList",
                                 "name"                       => "filter_value",
                                 "ng-change"                  => "vm.filterValueChanged()",
                                 "ng-model"                   => "vm.scheduleModel.filter_value",
                                 "ng-show"                    => "!vm.automateRequest()",
                                 "ng-options"                 => "filteredItem.value as filteredItem.text for filteredItem in vm.filterList track by filteredItem.value",
                                 "filter-hide"                => "vm.filterValuesEmpty",
                                 "ng-required"                => "!vm.automateRequest() && vm.filterValueRequired(vm.scheduleModel.filter_value)"}
              %option{"disabled" => "", "value" => ""} &lt;Choose&gt;
            %input{"type" => "hidden", "name" => "filter_value", "value" => "{{vm.scheduleModel.filter_value}}"}

        = render :partial => "layouts/angular-bootstrap/ae_resolve_options",
                 :locals  => {:ng_show => "vm.automateRequest()"}
        = render :partial => "layouts/angular-bootstrap/edit_log_depot_settings_angular_bootstrap",
                 :locals  => {:ng_show             => "vm.dbBackup()",
                              :ng_reqd_depot_name  => "vm.dbRequired(vm.scheduleModel.depot_name)",
                              :ng_model_depot_name => "vm.scheduleModel.depot_name",
                              :ng_reqd_uri         => "vm.dbRequired(vm.scheduleModel.uri)",
                              :ng_model_uri        => "vm.scheduleModel.uri",
                              :ng_model_uri_prefix => "vm.scheduleModel.uri_prefix",
                              :uri_prefix_display  =>  "{{vm.scheduleModel.uri_prefix}}://"}

        = render :partial => "layouts/angular-bootstrap/auth_credentials_angular_bootstrap",
                 :locals  => {:ng_show           => "vm.sambaBackup()",
                              :ng_model          => "vm.scheduleModel",
                              :ng_reqd_userid    => "vm.sambaRequired(vm.scheduleModel.log_userid)",
                              :ng_reqd_password  => "vm.sambaRequired(vm.scheduleModel.log_password)",
                              :userid_disabled   => "vm.scheduleModel.uri_prefix == 'nfs'",
                              :password_disabled => "vm.scheduleModel.uri_prefix == 'nfs'",
                              :validate_url      => "log_depot_validate",
                              :id                => @schedule.id || "new",
                              :valtype           => "log",
                              :basic_info_needed => true}
