#form_filter_div
  .div
    .div
      -# %h4 {{buildLegend()}}
      %div{"ng-switch" => "", "on" => "scheduleModel.action_typ"}
        .form-group
          %label.col-md-2.control-label{"for" => "filter_typ", "ng-hide" => "dbBackup() || automateRequest()"}
            = _("Filter")
          %label.col-md-2.control-label{"for" => "filter_typ", "ng-show" => "dbBackup() && !automateRequest()"}
            = _("Type")
          .col-md-10
            = select_tag('filter_typ', options_for_select(@vm_options_for_select),
              "ng-switch-when" => "vm",
              "ng-model"       => "$parent.scheduleModel.filter_typ",
              "ng-change"      => "filterTypeChanged()",
              "checkchange"    => "",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@vm_options_for_select),
              "ng-switch-when" => "vm_check_compliance",
              "ng-model"       => "$parent.scheduleModel.filter_typ",
              "ng-change"      => "filterTypeChanged()",
              "checkchange"    => "",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@template_options_for_select),
              "ng-switch-when" => "miq_template",
              "ng-model"       => "$parent.scheduleModel.filter_typ",
              "ng-change"      => "filterTypeChanged()",
              "checkchange"    => "",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@host_options_for_select),
              "ng-switch-when" => "host",
              "ng-model"       => "$parent.scheduleModel.filter_typ",
              "ng-change"      => "filterTypeChanged()",
              "checkchange"    => "",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@host_options_for_select),
              "ng-switch-when" => "host_check_compliance",
              "ng-model"       => "$parent.scheduleModel.filter_typ",
              "ng-change"      => "filterTypeChanged()",
              "checkchange"    => "",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@container_image_options_for_select),
              "ng-switch-when" => "container_image",
              "ng-model"       => "$parent.scheduleModel.filter_typ",
              "ng-change"      => "filterTypeChanged()",
              "checkchange"    => "",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@container_image_options_for_select),
              "ng-switch-when" => "container_image_check_compliance",
              "ng-model"       => "$parent.scheduleModel.filter_typ",
              "ng-change"      => "filterTypeChanged()",
              "checkchange"    => "",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@cluster_options_for_select),
              "ng-switch-when" => "emscluster",
              "ng-model"       => "$parent.scheduleModel.filter_typ",
              "ng-change"      => "filterTypeChanged()",
              "checkchange"    => "",
              "selectpicker-for-select-tag"   => "")
            = select_tag('filter_typ', options_for_select(@storage_options_for_select),
              "ng-switch-when" => "storage",
              "ng-model"       => "$parent.scheduleModel.filter_typ",
              "ng-change"      => "filterTypeChanged()",
              "checkchange"    => "",
              "selectpicker-for-select-tag"   => "")
            = select_tag('log_protocol', options_for_select(@database_backup_options_for_select),
              "ng-switch-when" => "db_backup",
              "ng-model"       => "$parent.scheduleModel.log_protocol",
              "ng-change"      => "logProtocolChanged()",
              "checkchange"    => "",
              "selectpicker-for-select-tag"   => "")

            %select#filter_value{"update-dropdown-for-filter" => "",
                                 "dropdown-model"             => "scheduleModel",
                                 "dropdown-list"              => "filterList",
                                 "name"                       => "filter_value",
                                 "ng-change"                  => "filterValueChanged()",
                                 "ng-model"                   => "scheduleModel.filter_value",
                                 "ng-show"                    => "!automateRequest()",
                                 "ng-options"                 => "filteredItem.value as filteredItem.text for filteredItem in filterList track by filteredItem.value",
                                 "filter-hide"                => "filterValuesEmpty",
                                 "ng-required"                => "!automateRequest() && filterValueRequired(scheduleModel.filter_value)",
                                 "checkchange"                => ""}
              %option{"disabled" => "", "value" => ""} &lt;Choose&gt;

        %ae-resolve-options{"ng-if"                 => "automateRequest()",
                            "instance-name"         => "scheduleModel.instance_name",
                            "instance-options"      => "scheduleModel.instance_names",
                            "instance-name-change"  => "setInstanceName(instanceName)",
                            "object-message"        => "scheduleModel.object_message",
                            "object-message-change" => "setObjectMessage(objectMessage)",
                            "object-request"        => "scheduleModel.object_request",
                            "object-request-change" => "setObjectRequest(objectRequest)",
                            "target-class"          => "scheduleModel.target_class",
                            "target-class-options"  => "scheduleModel.target_classes",
                            "target-class-change"   => "targetClassChanged(targetClass)",
                            "target-id"             => "scheduleModel.target_id",
                            "target-id-options"     => "scheduleModel.targets",
                            "target-id-change"      => "setTargetId(targetId)",
                            "ui-attrs"              => "scheduleModel.ui_attrs"}

        %edit-log-depot-settings{ "ng-if"                    => "dbBackup()",
                                  "depot-name-required"      => "dbRequired(scheduleModel.depot_name)",
                                  "depot-name"               => "scheduleModel.depot_name",
                                  "readonly"                 => false,
                                  "depot-name-changed"       => "setDepotName(depotName)",
                                  "depot-uri-required"       => "dbRequired(scheduleModel.uri)",
                                  "depot-uri"                => "scheduleModel.uri",
                                  "depot-uri-prefix"         => "scheduleModel.uri_prefix",
                                  "depot-uri-changed"        => "setDepotUri(depotUri)"}

        %region{'ng-if' => 'regionSelect()'}
          .form-group{"ng-class" => "{'has-error': angularForm.log_aws_region.$invalid}"}
            %label.col-md-2.control-label
              = _("AWS Region")
            .col-md-8
              - default_option = [_("<Choose>"), '']
              = select_tag('log_aws_region', options_for_select([default_option] + @regions_options_for_select),
                           "ng-model"                    => "scheduleModel.log_aws_region",
                           "ng-required"                 => "regionRequired()",
                           "selectpicker-for-select-tag" => "")
              %span.help-block{"ng-show" => "angularForm.log_aws_region.$invalid"}
                = _("Required")

        = render :partial => "layouts/angular-bootstrap/auth_credentials_angular_bootstrap",
                 :locals  => {:ng_show           => "credsProtocol()",
                              :ng_model          => "scheduleModel",
                              :ng_reqd_userid    => "credsRequired(scheduleModel.log_userid)",
                              :ng_reqd_password  => "credsRequired(scheduleModel.log_password)",
                              :userid_disabled   => "scheduleModel.uri_prefix == 'nfs'",
                              :password_disabled => "scheduleModel.uri_prefix == 'nfs'",
                              :validate_url      => "log_depot_validate",
                              :id                => @schedule.id || "new",
                              :valtype           => "log",
                              :basic_info_needed => true}
