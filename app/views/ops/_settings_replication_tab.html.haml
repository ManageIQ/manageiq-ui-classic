- if @sb[:active_tab] == "settings_replication"
  - @angular_form = true

  %form.form-horizontal#form_div{"name"          => "angularForm",
                                 "ng-controller" => "pglogicalReplicationFormController as vm",
                                 'miq-form'      => 'true',
                                 'model-copy'    => 'vm.modelCopy',
                                 'model'         => 'vm.tenantModel',
                                 'form-changed'  => true,
                                 "ng-show"       => "vm.afterGet"}
    = render :partial => "layouts/flash_msg"
    .form-group{"ng-class" => "{'has-error': angularForm.subscriptions.$invalid}"}
      %label.col-md-2.control-label
        = _('Type')
      .col-md-2
        = select_tag('replication_type',
                          options_for_select([["<#{_('None')}>", 'none'], ["Global", 'global'], ["Remote", 'remote']]),
                          "ng-model"                    => "vm.pglogicalReplicationModel.replication_type",
                          "ng-change"                   => "vm.replicationTypeChanged()",
                          "miqrequired"                 => "",
                          "selectpicker-for-select-tag" => "")

    .subscriptions_div{"ng-if" => "vm.pglogicalReplicationModel.replication_type == 'global'"}
      %h3
        = _('Subscriptions')
      %br
        %span{"style"=>"color:red", "ng-show" => "vm.subscriptionInValidMessage()"}
          = _("At least 1 subscription must be added to save server replication type")
      %table{:width => "100%", :align => "bottom"}
        %tr
          %td#buttons_on{:align => "right"}
            %button.btn.btn-primary{:type => "button", "ng-disabled" => "vm.addInProgress()",  "ng-click" => "vm.enableSubscriptionAdd()",  :align => "left"}= _('Add Subscription')
            %br
            %br
      %table.table.table-striped.table-hover.table-condensed.table-bordered
        %thead
          %th= _('Database')
          %th= _('Host')
          %th= _('Username')
          %th= _('Password')
          %th= _('Port')
          %th= _('Backlog')
          %th{:colspan => 2}=_('Actions')
        %tbody
          %tr{"ng-if" => "vm.pglogicalReplicationModel.addEnabled"}
            %td
              %input.form-control{"type"        => "text",
                                  "id"          => "host",
                                  "name"        => "host",
                                  "ng-model"    => "vm.pglogicalReplicationModel.dbname",
                                  "miqrequired" => ""}
            %td
              %input.form-control{"type"        => "text",
                                  "id"          => "host",
                                  "name"        => "host",
                                  "ng-model"    => "vm.pglogicalReplicationModel.host",
                                  "miqrequired" => ""}
            %td
              %input.form-control{"type"        => "text",
                                  "id"          => "userid",
                                  "name"        => "userid",
                                  "ng-model"    => "vm.pglogicalReplicationModel.user",
                                  "miqrequired" => ""}
            %td
              %input.form-control{"type"        => "password",
                                  "id"          => "password",
                                  "name"        => "password",
                                  "ng-model"    => "vm.pglogicalReplicationModel.password",
                                  "placeholder" => placeholder_if_present("vm.pglogicalReplicationModel.password"),
                                  "miqrequired" => ""}
            %td
              %input.form-control{"type"        => "text",
                                  "id"          => "port",
                                  "name"        => "port",
                                  "ng-model"    => "vm.pglogicalReplicationModel.port"}
            %td
            %td{:class => "action-cell"}
              %button.btn.btn-default.btn-block.btn-sm{:type => "button", "ng-disabled" => "!vm.subscriptionValid()",  "ng-click" => "vm.addSubscription()"}= _('Accept')

            %td
              .dropdown.pull-right.dropdown-kebab-pf
                %button.btn.btn-link.dropdown-toggle{"data-toggle" => "dropdown", "aria-haspopup" => "true"}
                  %span.fa.fa-ellipsis-v
                %ul.dropdown-menu.dropdown-menu-right.3
                  %li
                    %a{:class => "disabled", "ng-show" => "!vm.subscriptionValid()"}
                      = _('Validate')
                  %li
                    %a{"ng-show" => "vm.subscriptionValid()", "ng-click" => "vm.validateSubscription()"}
                      = _('Validate')
                  %li
                    %a{"ng-click" => "vm.discardSubscription()"}
                      = _('Discard')

          %tr{"ng-repeat" => "subscription in vm.pglogicalReplicationModel.subscriptions track by $index", "ng-form" => "rowForm", "ng-class" => "{'danger': showCancelDelete($index)}"}
            %td{"ng-if" => "!vm.pglogicalReplicationModel.updateEnabled || (vm.pglogicalReplicationModel.updateEnabled && $index !== vm.pglogicalReplicationModel.s_index)",
                "ng-class"=>"{'active': showChanged($index, 'dbname')}"}
              {{subscription.dbname}}
            %td{"ng-if" => "vm.pglogicalReplicationModel.updateEnabled && $index === vm.pglogicalReplicationModel.s_index",
                "ng-class"=>"{'active': showChanged($index, 'dbname')}"}
              %input.form-control{"type"        => "text",
                                  "name"        => "dbname",
                                  "ng-model"    => "vm.pglogicalReplicationModel.dbname",
                                  "ng-change"   => "vm.showChanged($index, 'dbname')",
                                  "miqrequired" => ""}

            %td{"ng-if" => "!vm.pglogicalReplicationModel.updateEnabled || (vm.pglogicalReplicationModel.updateEnabled && $index !== vm.pglogicalReplicationModel.s_index)",
                "ng-class"=>"{'active': vm.showChanged($index, 'host')}"}
              {{subscription.host}}
            %td{"ng-if" => "vm.pglogicalReplicationModel.updateEnabled && $index === vm.pglogicalReplicationModel.s_index",
                "ng-class"=>"{'active': vm.showChanged($index, 'host')}"}
              %input.form-control{"type"        => "text",
                                  "name"        => "host",
                                  "ng-model"    => "vm.pglogicalReplicationModel.host",
                                  "miqrequired" => ""}
            %td{"ng-if" => "!vm.pglogicalReplicationModel.updateEnabled || (vm.pglogicalReplicationModel.updateEnabled && $index !== vm.pglogicalReplicationModel.s_index)",
                "ng-class"=>"{'active': vm.showChanged($index, 'user')}"}
              {{subscription.user}}
            %td{"ng-if" => "vm.pglogicalReplicationModel.updateEnabled && $index === vm.pglogicalReplicationModel.s_index",
                "ng-class"=>"{'active': vm.showChanged($index, 'user')}"}
              %input.form-control{"type"        => "text",
                                  "name"        => "user",
                                  "ng-model"    => "vm.pglogicalReplicationModel.user",
                                  "miqrequired" => ""}

            %td{"ng-if" => "!vm.pglogicalReplicationModel.updateEnabled || (vm.pglogicalReplicationModel.updateEnabled && $index !== vm.pglogicalReplicationModel.s_index)",
                "ng-class"=>"{'active': vm.showChanged($index, 'password')}"}
              ●●●●●●●●
            %td{"ng-if" => "vm.pglogicalReplicationModel.updateEnabled && $index === vm.pglogicalReplicationModel.s_index",
                "ng-class"=>"{'active': vm.showChanged($index, 'password')}"}
              %input.form-control{"type"        => "password",
                                  "name"        => "password",
                                  "ng-model"    => "vm.pglogicalReplicationModel.password",
                                  "ng-disabled" => "!subscription.newRecord"}

            %td{"ng-if" => "!vm.pglogicalReplicationModel.updateEnabled || (vm.pglogicalReplicationModel.updateEnabled && $index !== vm.pglogicalReplicationModel.s_index)",
                "ng-class"=>"{'active': vm.showChanged($index, 'port')}"}
              {{subscription.port}}
            %td{"ng-if" => "vm.pglogicalReplicationModel.updateEnabled && $index === vm.pglogicalReplicationModel.s_index",
                "ng-class"=>"{'active': vm.showChanged($index, 'port')}"}
              %input.form-control{"type"        => "text",
                                  "name"        => "port",
                                  "ng-model"    => "vm.pglogicalReplicationModel.port"}

            %td
              {{subscription.backlog}}
            %td{:class => "action-cell", "ng-show" => "vm.showCancelDelete($index)"}
              %button.btn.btn-default.btn-sm{:type => "button", "ng-click" => "vm.cancelDelete($index)"}= _('Cancel Delete')

            %td{:class => "action-cell","ng-show" => "!vm.showCancelDelete($index) && !vm.pglogicalReplicationModel.updateEnabled || (vm.pglogicalReplicationModel.updateEnabled && $index !== vm.pglogicalReplicationModel.s_index)"}
              %button.btn.btn-default.btn-block.btn-sm{:type => "button", "ng-disabled" => "vm.addInProgress()",  "ng-click" => "vm.enableSubscriptionUpdate($index)"}= _('Update')

            %td{"ng-show" => "!vm.showCancelDelete($index) && !vm.pglogicalReplicationModel.updateEnabled || (vm.pglogicalReplicationModel.updateEnabled && $index !== vm.pglogicalReplicationModel.s_index)"}
              .dropdown.pull-right.dropdown-kebab-pf
                %button.btn.btn-link.dropdown-toggle{"data-toggle" => "dropdown", "aria-haspopup" => "true"}
                  %span.fa.fa-ellipsis-v
                %ul.dropdown-menu.dropdown-menu-right.3
                  %li
                    %a{"ng-click" => "vm.removeSubscription($index)"}
                      = _('Delete')
                  %li
                    %a{"ng-click" => "vm.validateSubscription($index)"}
                      = _('Validate')

            %td{:class => "action-cell", "ng-show" => "!vm.showCancelDelete($index) && vm.pglogicalReplicationModel.updateEnabled && $index === vm.pglogicalReplicationModel.s_index"}
              %button.btn.btn-default.btn-block.btn-sm{:type => "button", "ng-disabled" => "!vm.subscriptionValid()", "ng-click" => "vm.addSubscription($index)"}= _('Accept')

            %td{"ng-show" => "!vm.showCancelDelete($index) && vm.pglogicalReplicationModel.updateEnabled && $index === vm.pglogicalReplicationModel.s_index"}
              .dropdown.pull-right.dropdown-kebab-pf
                %button.btn.btn-link.dropdown-toggle{"data-toggle" => "dropdown", "aria-haspopup" => "true"}
                  %span.fa.fa-ellipsis-v
                %ul.dropdown-menu.dropdown-menu-right.3
                  %li
                    %a{:class => "disabled", "ng-show" => "!vm.subscriptionValid()"}
                      = _('Validate')
                  %li
                    %a{"ng-show" => "vm.subscriptionValid()", "ng-click" => "vm.validateSubscription($index)"}
                      = _('Validate')
                  %li
                    %a{"ng-click" => "vm.discardSubscription($index)"}
                      = _('Discard')
    .exclusion_list_div{"ng-if" => "vm.pglogicalReplicationModel.replication_type == 'remote'"}
      %h3
        = _('Excluded Tables')
      %br
        %textarea{"ui-codemirror" => "",
                  :name           => "exclusion_list",
                  'ng-model'      => 'vm.pglogicalReplicationModel.exclusion_list'}

    .button-group{:align => "right"}
      %miq-button{:name      => t = _("Save"),
                  :title     => t,
                  :alt       => t,
                  :enabled   => "vm.saveEnabled(angularForm)",
                  'on-click' => "vm.saveClicked()"}
      %miq-button{:name      => t = _("Reset"),
                  :title     => t,
                  :alt       => t,
                  :enabled   => "vm.saveEnabled(angularForm)",
                  'on-click' => "vm.resetClicked()"}
  :javascript
    ManageIQ.angular.app.value('pglogicalReplicationFormId', 'new');
    miq_bootstrap('#form_div');
