- if @edit
  - change_stored_password ||= _("Change")
  - cancel_password_change ||= _("Cancel")
  - stored_password_placeholder = "●●●●●●●●"
  - pfx ||= ""
  - url = url_for_only_path(:action => 'rbac_user_field_changed', :id => (@edit[:user_id] || "new"))
  - observe_url_json = {:interval => '.5', :url => url}.to_json
  - disabled = @edit && @edit[:new][:userid] == "admin"
  = render :partial => "layouts/flash_msg"
  #user_info
    %h3
      = _("User Information")
    .form-horizontal
      .form-group
        %label.col-md-2.control-label
          = _("Full Name")
        .col-md-8
          = text_field_tag("name",
                            @edit[:new][:name],
                          :autocomplete      => 'off',
                          :maxlength         => 50,
                          :disabled          => disabled,
                          :class             => "form-control",
                          "data-miq_observe" => observe_url_json)
          - unless @edit[:new][:userid] == "admin"
            = javascript_tag(javascript_focus('name'))
      .form-group
        %label.col-md-2.control-label
          = _("Username")
        .col-md-8
          = text_field_tag("userid",
                           @edit[:new][:userid],
                           :autocomplete      => 'off',
                           :maxlength         => 255,
                           :disabled          => disabled,
                           :class             => "form-control",
                           "data-miq_observe" => observe_url_json)
      - db_mode = ::Settings.authentication.mode
      - if db_mode == "database" || (db_mode != "database" && disabled)
        .form-group
          %label.col-md-2.control-label
            = _("Password")
          .col-md-8
            %span.input-group{:style => "width: 100%"}
              = password_field_tag("password",
                                   "",
                                   :autocomplete      => "new-password",
                                   :maxlength         => 50,
                                   :disabled          => @edit[:new][:userid].blank? ? false : true,
                                   :placeholder       => @edit[:new][:userid].blank? ? "" : stored_password_placeholder,
                                   :class             => "form-control",
                                   "data-miq_observe" => observe_url_json)
              - if @edit[:new][:userid] == "admin"
                = javascript_tag(javascript_focus('password'))
              - unless @edit[:new][:userid].blank?
                %span.input-group-btn
                  %button.btn.btn-default{:id       => "change_stored_password",
                                          "style"   => "display:block;cursor: pointer; cursor: hand;", "onclick" => "changeStoredPassword('#{pfx}', '#{url}')"}
                    = change_stored_password
                  %button.btn.btn-default{:id       => "cancel_password_change",
                                          "style"   => "display:none;cursor: pointer; cursor: hand;",
                                          "onclick" => "cancelPasswordChange('#{pfx}', '#{url}')"}
                    = cancel_password_change
        .form-group{:id    => "verify_group",
                    :style => @edit[:new][:userid].blank? ? "display:block" : "display:none"}
          %label.col-md-2.control-label
            = _("Confirm Password")
          .col-md-8
            = password_field_tag("verify",
                                 "",
                                 :autocomplete      => "new-password",
                                 :maxlength         => 50,
                                 :class             => "form-control",
                                 "data-miq_observe" => observe_url_json)
      .form-group
        %label.col-md-2.control-label
          = _("E-mail Address")
        .col-md-8
          = text_field_tag("email",
                          @edit[:new][:email],
                          :autocomplete      => 'off',
                          :maxlength         => 253,
                          :class             => "form-control",
                          "data-miq_observe" => observe_url_json)
      .form-group
        %label.col-md-2.control-label
          = _("Available Groups")
        .col-md-2
          - groups = @record.present? && @record.miq_groups.present? ? @record.miq_groups.order(:description) : []
          - if disabled
            %p.form-control-static
              - groups.each do |group|
                = h(group.description)
                %br
          - else
            - select_groups = @edit[:new][:userid].blank? ? @edit[:new][:group] : groups.map(&:id)
            = select_tag('chosen_group',
                        options_for_select(@edit[:groups], select_groups),
                        :class    => "selectpicker",
                        :multiple => true,
                        :title    => "&lt;#{_('Choose one or more Groups')}&gt;",
                        :style    => "overflow-x: scroll;")
            :javascript
              miqInitSelectPicker();
              miqSelectPickerEvent('chosen_group', "#{url}")
      .form-group
        %label.col-md-2.control-label
          = _("Selected Groups")
        .col-md-4
          = render :partial => "ops/rbac_group_selected"
    %hr
- else
  = settings_users_summary(@record)
  = render :partial => "rbac_tag_box"
