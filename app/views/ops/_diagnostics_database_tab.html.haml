- @angular_form = true

%form#form_div.form-horizontal{:name                                  => "angularForm",
                              'ng-controller'                         => "diagnosticsDatabaseFormController as vm",
                              'ng-show'                               => "vm.afterGet",
                              'data-db-backup-form-field-changed-url' => "/#{controller_name}/db_backup_form_field_changed/",
                              'data-submit-url'                       => "/#{controller_name}/db_backup/",
                              'miq-form'                              => true,
                              'model'                                 => 'vm.diagnosticsDatabaseModel',
                              'model-copy'                            => 'vm.modelCopy',
                              'form-changed'                          => true,}
  - if @sb[:active_tab] == "diagnostics_database"
    %h3
      = _("Basic Info")
  .form-group
    %label.col-md-2.control-label
      = _("Type")
    .col-md-8
      %p.form-control-static
        = h(@database_display_name)
  .form-group
    %label.col-md-2.control-label
      = _("Hostname")
    .col-md-8
      %p.form-control-static
        = h(@database_details["host"])
  .form-group
    %label.col-md-2.control-label
      = _("Database Name")
    .col-md-8
      %p.form-control-static
        = h(@database_details["database"])
  .form-group
    %label.col-md-2.control-label
      = _("Username")
    .col-md-8
      %p.form-control-static
        = h(@database_details["username"])

  %hr
  %h3
    = _("Run a Database Backup Now")
  - if @sb[:active_tab] == "diagnostics_database"
    -# created div with different name so database validation flash message can be shown in it's own box
    = render :partial => "layouts/flash_msg"
  %hr
  %h3
    = _("Backup Schedules")
  .form-group
    %label.col-md-2.control-label
      = _("Fetch settings from a schedule")
    .col-md-8
      - if @backup_schedules.length < 1
        %p.form-control-static
          = _("No Backup Schedules are defined")
      - else
        - default_option = [_("<Choose>"), nil]
        - schedules_ary = Array(@backup_schedules.invert)
        - schedules_ary.sort_by! { |name, _id| name }
        - options = options_for_select([default_option] + schedules_ary)

        = select_tag('backup_schedule_type',
                     options,
                     "ng-model"                    => "vm.diagnosticsDatabaseModel.backup_schedule_type",
                     "ng-change"                   => "vm.backupScheduleTypeChanged()",
                     "selectpicker-for-select-tag" => "")


  %hr
  %h3
    = _("Database Backup Settings")
  .form-group
    %label.col-md-2.control-label
      = _("Type")
    .col-md-8
      - default_option = [_("<No Depot>"), nil]
      = select_tag('log_protocol', options_for_select([default_option] + @database_backup_options_for_select),
                  "ng-model"                       => "vm.diagnosticsDatabaseModel.log_protocol",
                  "ng-change"                      => "vm.logProtocolChanged(vm.diagnosticsDatabaseModel)",
                  "ng-required"                    => "vm.logProtocolNotSelected(vm.diagnosticsDatabaseModel)",
                  "selectpicker-for-select-tag"    => "")
  = render :partial => "layouts/angular-bootstrap/edit_log_depot_settings_angular_bootstrap",
                 :locals  => {:ng_show             => "vm.logProtocolSelected()",
                              :ng_reqd_depot_name  => true,
                              :ng_model_depot_name => "vm.diagnosticsDatabaseModel.depot_name",
                              :ng_reqd_uri         => true,
                              :ng_model_uri        => "vm.diagnosticsDatabaseModel.uri",
                              :ng_model_uri_prefix => "vm.diagnosticsDatabaseModel.uri_prefix",
                              :uri_prefix_display  =>  "{{vm.diagnosticsDatabaseModel.uri_prefix}}://"}

  %apiversion{'ng-if' => 'vm.swiftSecurityProtocolSelect()'}
    .form-group{"ng-class" => "{'has-error': angularForm.keystone_api_version.$invalid}"}
      %label.col-md-2.control-label
        = _("API Version")
      .col-md-8
        = select_tag('keystone_api_version', options_for_select(@api_versions_options_for_select),
                     "ng-model"                    => "vm.diagnosticsDatabaseModel.keystone_api_version",
                     "ng-required"                 => "vm.swiftSecurityProtocolRequired()",
                     "checkchange"                 => "",
                     "selectpicker-for-select-tag" => "")
        %span.help-block{"ng-show" => "angularForm.keystone_api_version.$invalid"}
          = _("Required")

  %domainid{'ng-if' => 'vm.swiftSecurityProtocolSelect()'}
    .form-group{"ng-class" => "{'has-error': angularForm.v3_domain_ident.$invalid}", "ng-if" => "vm.diagnosticsDatabaseModel.keystone_api_version == 'v3'"}
      %label.col-md-2.control-label{"for" => "v3_domain_ident"}
        = _('Keystone V3 Domain ID')
      .col-md-4
        %input.form-control{"type"        => "text",
                            "id"          => "v3_domain_ident",
                            "name"        => "v3_domain_ident",
                            "ng-model"    => "vm.diagnosticsDatabaseModel.v3_domain_ident",
                            "required"    => true,
                            "checkchange" => ""}
        %span.help-block{"ng-show" => "angularForm.v3_domain_ident.$invalid"}
          = _("Required")

  %openstackregion{'ng-if' => 'vm.swiftSecurityProtocolSelect()'}
    .form-group{"ng-class" => "{'has-error': angularForm.openstack_region.$invalid}"}
      %label.col-md-2.control-label{"for" => "ems_region_input"}
        = _('Region')
      .col-md-4
        %input.form-control{"type"                    => "text",
                            "id"                      => "openstack_region",
                            "name"                    => "openstack_region",
                            "ng-model"                => "vm.diagnosticsDatabaseModel.openstack_region",
                            "required"                => true,
                            "checkchange"             => ""}
        %span.help-block{"ng-show" => "angularForm.openstack_region.$invalid"}
          = _("Required")

  %region{'ng-if' => 'vm.regionSelect()'}
    .form-group{"ng-class" => "{'has-error': angularForm.log_aws_region.$invalid}"}
      %label.col-md-2.control-label
        = _("AWS Region")
      .col-md-8
        - default_option = [_("<Choose>"), '']
        = select_tag('log_aws_region', options_for_select([default_option] + @regions_options_for_select),
                     "ng-model"                    => "vm.diagnosticsDatabaseModel.log_aws_region",
                     "ng-required"                 => "vm.regionRequired()",
                     "selectpicker-for-select-tag" => "")
        %span.help-block{"ng-show" => "angularForm.log_aws_region.$invalid"}
          = _("Required")
  %protocol{'ng-if' => 'vm.swiftSecurityProtocolSelect()'}
    .form-group{"ng-class" => "{'has-error': angularForm.security_protocol.$invalid}"}
      %label.col-md-2.control-label
        = _("Security Protocol")
      .col-md-8
        - default_option = [_("<Choose>"), '']
        = select_tag('security_protocol', options_for_select([default_option] + @security_protocols_options_for_select),
                     "ng-model"                    => "vm.diagnosticsDatabaseModel.security_protocol",
                     "ng-required"                 => "vm.swiftSecurityProtocolRequired()",
                     "selectpicker-for-select-tag" => "")
        %span.help-block{"ng-show" => "angularForm.security_protocol.$invalid"}
          = _("Required")
  %apiport{"ng-if" => 'vm.swiftSecurityProtocolSelect()'}
    .form-group{"ng-class" => "{'has-error': angularForm.swift_api_port.$invalid}"}
      %label.col-md-2.control-label{"for" => "swift_api_port"}
        = _('API Port')
      .col-md-2
        %input.form-control{"type"                        => "text",
                            "id"                          => "swift_api_port",
                            "name"                        => "swift_api_port",
                            "ng-show"                     => "vm.credsProtocol()",
                            "ng-model"                    => "vm.diagnosticsDatabaseModel.swift_api_port",
                            "maxlength"                   => 15,
                            "ng-required"                 => true,
                            "checkchange"                 => "",
                            "ng-trim"                     => false,
                            "detect-spaces"               => "",
                            "pattern"                     => "^[1-9]\\d*$"}
        %span.help-block{"ng-show" => "angularForm.swift_api_port.$error.pattern"}
          = _("Must be a number (greater than 0)")
        %span.help-block{"ng-show" => "angularForm.swift_api_port.$error.required"}
          = _("Required")
        %span.help-block{"ng-show" => "angularForm.swift_api_port.$error.detectedSpaces"}
          = _("Spaces are prohibited")

  %auth-credentials{'ng-if'                => 'vm.credsProtocol()',
                    'form-model'           => 'vm.diagnosticsDatabaseModel',
                    'model-copy'           => 'vm.modelCopy',
                    'prefix'               => '{{vm.prefix}}',
                    'user-required'        => 'vm.credsRequired(vm.diagnosticsDatabaseModel.log_userid)',
                    'password-required'    => 'vm.credsRequired(vm.diagnosticsDatabaseModel.log_password)',
                    'enable-valid-button'  => 'vm.canValidateBasicInfo()',
                    'validate'             => 'vm.validateClicked',
                    'new-record'           => true}

  %input{:type => "hidden", :value => "db_backup", :name => "action_typ"}

  %table{:width => "100%"}
    %tr
      %td{:align => "right"}
        %miq-button{:name            => _("Submit"),
                    "disabled-title" => _("Username and matching password fields are needed to run a database backup"),
                    "enabled-title"  => _("Run a Database backup now"),
                    :enabled         => "vm.saveable(angularForm)",
                    'on-click'       => "vm.submitButtonClicked('#{_("Are you sure you want to Run a Database Backup Now?")}')",
                    :primary         => 'true'}


  %hr
  %h3
    = _("Run Database Garbage Collection Now")
  .form-group
    .col-md-8
      = _("Press submit to start the Database Vacuum process")
  %table{:width => "100%"}
    %tr
      %td{:align => "right"}
        #gc_submit_on
          - caption = _("Run Database Garbage Collection Now")
          - submit = button_tag(_("Submit"), :class => "btn btn-primary", :alt => caption)

          = link_to(submit, {:action => 'db_gc_collection'},
            "data-miq_sparkle_on" => true,
            :confirm              => _("Are you sure you want to Run Database Garbage Collection Now?"),
            :remote               => true,
            'data-method'         => :post,
            :title                => caption)

:javascript
  miq_bootstrap('#form_div');
