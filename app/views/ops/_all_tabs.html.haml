#ops_tabs
  -# Settings
  - case x_active_tree
  - when :settings_tree
    - if selected?(x_node, "z")
      = render :partial => "layouts/flash_msg"
      %ul.nav.nav-tabs{'role' => 'tablist'}
        = miq_tab_header("settings_evm_servers", @sb[:active_tab]) do
          = _("Zone")
        = miq_tab_header("settings_smartproxy_affinity", @sb[:active_tab]) do
          = _("SmartProxy Affinity")
        = miq_tab_header("settings_advanced", @sb[:active_tab]) do
          = _("Advanced")
      .tab-content
        = miq_tab_content("settings_smartproxy_affinity", @sb[:active_tab]) do
          = render :partial => "settings_smartproxy_affinity_tab"
        = miq_tab_content("settings_evm_servers", @sb[:active_tab]) do
          = render :partial => "settings_evm_servers_tab"
        = miq_tab_content("settings_advanced", @sb[:active_tab]) do
          = render :partial => "settings_advanced_tab"
    - elsif selected?(x_node, "svr")
      = render :partial => "layouts/flash_msg"
      - cur_svr_id = x_node.split("-").last.to_i
      %ul.nav.nav-tabs{'role' => 'tablist'}
        = miq_tab_header("settings_server", @sb[:active_tab]) do
          = _("Server")
        = miq_tab_header("settings_authentication", @sb[:active_tab]) do
          = _("Authentication")
        = miq_tab_header("settings_workers", @sb[:active_tab]) do
          = _("Workers")
        - if cur_svr_id == my_server.id && !MiqEnvironment::Command.is_podified?
          = miq_tab_header("settings_custom_logos", @sb[:active_tab]) do
            = _("Custom Logos")
        = miq_tab_header("settings_advanced", @sb[:active_tab]) do
          = _("Advanced")
      .tab-content
        = miq_tab_content("settings_server", @sb[:active_tab]) do
          = render :partial => "settings_server_tab"
        = miq_tab_content("settings_authentication", @sb[:active_tab]) do
          = render :partial => "settings_authentication_tab"
        = miq_tab_content("settings_workers", @sb[:active_tab]) do
          = render :partial => "settings_workers_tab"
        - if cur_svr_id == my_server.id
          = miq_tab_content("settings_custom_logos", @sb[:active_tab]) do
            = render :partial => "settings_custom_logos_tab"
        = miq_tab_content("settings_advanced", @sb[:active_tab]) do
          = render :partial => "settings_advanced_tab"
    - else
      - if selected_settings_tree?(x_node)
        .tab-content
          #settings_list
            = render :partial => "settings_list_tab"
      - else
        = render(:partial => "layouts/flash_msg")
        #settings-tabs-wrapper
          = react('MiqCustomTab', {:containerId => 'settings-tabs',
                            :tabLabels => settings_tab_configuration,
                            :type      => 'SETTINGS',
                            :activeTab => @settings_tab,
            })
          #settings-tabs
            = settings_tab_content(:details) do
              = render :partial => "settings_details_tab"
            = settings_tab_content(:cu_collection) do
              = render :partial => "settings_cu_collection_tab"
            = settings_tab_content(:tags) do
              - if @sb[:active_tab] == 'settings_tags'
                #ops_tags_subtabs
                  %ul.nav.nav-tabs.nav-tabs-pf{:style => 'font-size: 12px'}
                    = react('MiqCustomTab', {:containerId => 'ops_tags_subtabs',
                            :tabLabels => settings_tags_configuration,
                            :type      => 'SETTINGS_TAGS',
                            :activeTab => @settings_tab,
                            :subtab    => @subtab,
                            :tabLength => @settings_tab_length,
                    })
                  .tab-content
                    = settings_tags_content(:my_company_categories) do
                      = render :partial => "settings_my_company_categories_tab"
                    = settings_tags_content(:my_company_tags) do
                      = render :partial => "settings_co_tags_tab"
                    = settings_tags_content(:import_tags) do
                      = render :partial => "settings_import_tags_tab"
                    = settings_tags_content(:import_variables) do
                      = render :partial => "settings_import_tab"
                    = settings_tags_content(:map_tags) do
                      = render :partial => "settings_label_tag_mapping_tab"
            = settings_tab_content(:replication) do
              = render :partial => "settings_replication_tab"
            = settings_tab_content(:help_menu) do
              = render :partial => "settings_help_menu_tab"
            = settings_tab_content(:advanced) do
              = render :partial => "settings_advanced_tab"
    -# Diagnostics
  - when :diagnostics_tree
    - if x_node.split("-")[0] == "z"
      %ul.nav.nav-tabs{'role' => 'tablist'}
        = miq_tab_header("diagnostics_roles_servers", @sb[:active_tab]) do
          = _("Roles by Servers")
        = miq_tab_header("diagnostics_servers_roles", @sb[:active_tab]) do
          = _("Servers by Roles")
        = miq_tab_header("diagnostics_server_list", @sb[:active_tab]) do
          = _("Servers")
        = miq_tab_header("diagnostics_collect_logs", @sb[:active_tab]) do
          = _("Collect Logs")
        = miq_tab_header("diagnostics_cu_repair", @sb[:active_tab]) do
          = _("C & U Gap Collection")
      .tab-content
        = miq_tab_content("diagnostics_roles_servers", @sb[:active_tab]) do
          = render :partial => "diagnostics_roles_servers_tab"
        = miq_tab_content("diagnostics_servers_roles", @sb[:active_tab]) do
          = render :partial => "diagnostics_servers_roles_tab"
        = miq_tab_content("diagnostics_server_list", @sb[:active_tab]) do
          = render :partial => "diagnostics_server_list_tab"
        = miq_tab_content("diagnostics_collect_logs", @sb[:active_tab]) do
          = render :partial => "diagnostics_collect_logs_tab"
        = miq_tab_content("diagnostics_cu_repair", @sb[:active_tab]) do
          = render :partial => "diagnostics_cu_repair_tab"
    - elsif x_node.split("-")[0] == "svr"
      %ul.nav.nav-tabs{'role' => 'tablist'}
        - if @sb[:selected_server_id] == my_server.id || @selected_server.started?
          = miq_tab_header("diagnostics_summary", @sb[:active_tab]) do
            = _("Summary")
          = miq_tab_header("diagnostics_workers", @sb[:active_tab]) do
            = _("Workers")
        - if !MiqEnvironment::Command.is_podified?
          = miq_tab_header("diagnostics_collect_logs", @sb[:active_tab]) do
            = _("Collect Logs")
          - if @sb[:selected_server_id] == my_server.id
            = miq_tab_header("diagnostics_evm_log", @sb[:active_tab]) do
              = _("%{product} Log") % {:product => Vmdb::Appliance.PRODUCT_NAME}
            = miq_tab_header("diagnostics_audit_log", @sb[:active_tab]) do
              = _("Audit Log")
            = miq_tab_header("diagnostics_production_log", @sb[:active_tab]) do
              = _(@sb[:rails_log])
              = _("Log")
      .tab-content
        - if @sb[:selected_server_id] == my_server.id || @selected_server.started?
          = miq_tab_content("diagnostics_summary", @sb[:active_tab]) do
            = render :partial => "diagnostics_summary_tab"
          = miq_tab_content("diagnostics_workers", @sb[:active_tab]) do
            = render :partial => "diagnostics_workers_tab"
        - if !MiqEnvironment::Command.is_podified?
          = miq_tab_content("diagnostics_collect_logs", @sb[:active_tab]) do
            = render :partial => "diagnostics_collect_logs_tab"
          - if @sb[:selected_server_id] == my_server.id
            = miq_tab_content("diagnostics_evm_log", @sb[:active_tab]) do
              = render :partial => "diagnostics_evm_log_tab"
            = miq_tab_content("diagnostics_audit_log", @sb[:active_tab]) do
              = render :partial => "diagnostics_audit_log_tab"
            = miq_tab_content("diagnostics_production_log", @sb[:active_tab]) do
              = render :partial => "diagnostics_production_log_tab"
    - else
      %ul.nav.nav-tabs{'role' => 'tablist'}
        = miq_tab_header("diagnostics_zones", @sb[:active_tab]) do
          = _("Zones")
        - if super_admin_user?
          = miq_tab_header("diagnostics_roles_servers", @sb[:active_tab]) do
            = _("Roles by Servers")
          = miq_tab_header("diagnostics_servers_roles", @sb[:active_tab]) do
            = _("Servers by Roles")
        = miq_tab_header("diagnostics_server_list", @sb[:active_tab]) do
          = _("Servers")
        - if super_admin_user?
          = miq_tab_header("diagnostics_database", @sb[:active_tab]) do
            = _("Database")
      .tab-content
        = miq_tab_content("diagnostics_zones", @sb[:active_tab]) do
          = render :partial => "diagnostics_zones_tab"
        - if super_admin_user?
          = miq_tab_content("diagnostics_roles_servers", @sb[:active_tab]) do
            = render :partial => "diagnostics_roles_servers_tab"
          = miq_tab_content("diagnostics_servers_roles", @sb[:active_tab]) do
            = render :partial => "diagnostics_servers_roles_tab"
        = miq_tab_content("diagnostics_server_list", @sb[:active_tab]) do
          = render :partial => "diagnostics_server_list_tab"
        - if super_admin_user?
          = miq_tab_content("diagnostics_database", @sb[:active_tab]) do
            - if @sb[:active_tab] == "diagnostics_database"
              = render :partial => "diagnostics_database_tab"
  - when :rbac_tree
    #rbac_details
      = render :partial => "rbac_details_tab"
:javascript
  miq_tabs_init("#ops_tabs", "/ops/change_tab");
