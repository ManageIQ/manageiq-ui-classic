- @angular_form = true

.form-horizontal
  %form#form_div{:name           => "angularForm",
                 'ng-controller' => "configurationManagerFormController as vm",
                 'ng-show'       => "vm.afterGet",
                 "miq-form"      => true,
                 "model"         => "vm.configurationManagerModel",
                 "model-copy"    => "vm.modelCopy",
                 "form-changed"  => "",
                 :novalidate     => true}
    = render :partial => "layouts/flash_msg"
    %br
    .form-group{"ng-class" => "{'has-error': angularForm.name.$invalid}"}
      %label.col-md-2.control-label
        = _("Name")
      .col-md-8
        %input.form-control{:type            => "text",
                            :name            => "name",
                            'ng-model'       => "vm.configurationManagerModel.name",
                            :maxlength       => ViewHelper::MAX_NAME_LEN,
                            :required        => "",
                            "auto-focus"     => ""}
        %span.help-block{"ng-show" => "angularForm.name.$error.required"}
          = _("Required")
    .form-group{"ng-class" => "{'has-error': angularForm.zone.$invalid}", "ng-if" => "!vm.configurationManagerModel.zone_hidden"}
      %label.col-md-2.control-label{"for" => "prov_zone"}
        = _("Zone")
      .col-md-8{"class" => @server_zones.empty? ? "has-error" : ""}
        - if @server_zones.length <= 1
          %input.form-control{"type"        => "text",
                              "id"          => "prov_zone",
                              "name"        => "zone",
                              "ng-model"    => "vm.configurationManagerModel.zone",
                              "maxlength"   => 15,
                              "required"    => "",
                              "readonly"    => true,
                              "style"       => "color: black;"}
          - if @server_zones.empty?
            %span.help-block
              = _("No visible Zones found in current region")
        - else
          = select_tag('zone',
                       options_for_select(@server_zones.sort_by { |name, _name| name }),
                       "ng-model"                    => "vm.configurationManagerModel.zone",
                       "required"                    => "",
                       "selectpicker-for-select-tag" => "")
    .form-group{"ng-class" => "{'has-error': angularForm.url.$invalid}"}
      %label.col-md-2.control-label{"for" => "provider_url"}
        = _("Url")
      .col-md-8
        %input.form-control{:type                     => "text",
                            :name                     => "url",
                            'ng-model'                => "vm.configurationManagerModel.url",
                            :maxlength                => ViewHelper::MAX_DESC_LEN,
                            "id"                      => "url",
                            :required                 => "",
                            "ng-trim"                 => false,
                            "detect_spaces"           => "",
                            :prefix                   => "{{vm.prefix}}",
                            "main-scope"              => "vm",
                            "reset-validation-status" => "default_auth_status"}
        %span.help-block{"ng-show" => "angularForm.url.$error.required"}
          = _("Required")
        %span.help-block{"ng-show" => "angularForm.url.$error.detectedSpaces"}
          = _("Spaces are prohibited")
    .form-group
      %label.col-md-2.control-label
        = _("Verify Peer Certificate")
      .col-md-8
        %input{:type                     => "checkbox",
               :name                     => "verify_ssl",
               'ng-model'                => "vm.configurationManagerModel.verify_ssl",
               :prefix                   => "{{vm.prefix}}",
               "main-scope"              => "vm",
               "reset-validation-status" => "default_auth_status"}
    %hr
    %h3
      = _("Credentials")
    %auth-credentials{'ng-show'                        => true,
                      'form-model'                     => 'vm.configurationManagerModel',
                      'model-copy'                     => 'vm.modelCopy',
                      'prefix'                         => '{{vm.prefix}}',
                      'user-required'                  => true,
                      'password-required'              => true,
                      'enable-valid-button'            => 'vm.canValidateBasicInfo()',
                      'validate'                       => 'vm.validateClicked',
                      'post-validation-model-registry' => 'vm.postValidationModelRegistry',
                      'post-validation-model'          => 'vm.postValidationModel',
                      'new-record'                     => 'vm.newRecord',
                      'check-authentication'           => true}
    = render :partial => "layouts/angular/generic_form_buttons"
    %span{:style => "color:black"}= _("Required. Should have privileged access, such as root or administrator.")
