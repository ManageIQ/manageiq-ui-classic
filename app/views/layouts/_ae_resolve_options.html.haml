- field_changed_url ||= "form_field_changed"
- ae_sim_form       ||= false
- ae_custom_button  ||= false
- ae_ansible_custom_button ||= false
- rec_id = @edit && @edit[:action_id].present? ? @edit[:action_id] : "new"
#main-div
  - if ae_sim_form
    - url = "/miq_ae_tools/resolve_automate_simulation/#{rec_id}"
    = react('AutomateSimulationForm',
          :resolve               => resolve,
          :maxNameLength         => ViewHelper::MAX_NAME_LEN,
          :url                   => url,
          :attrValuesPairs       => ApplicationController::AE_MAX_RESOLUTION_FIELDS.times,
          :maxLength             => ViewHelper::MAX_NAME_LEN)
  - else
    - url = url_for_only_path(:action => field_changed_url, :id => rec_id)
    .form
      - if form_action == "ae_resolve" && !ae_ansible_custom_button
        %h3
          = _("Object Details")
        .form-group
          %label.control-label
            = _("System/Process")

          = select_tag('instance_name',
                      options_for_select(resolve[:instance_names].sort_by(&:downcase),
                      resolve[:new][:instance_name]),
                      "data-miq_sparkle_on"  => true,
                      "data-miq_sparkle_off" => true,
                      :class    => "selectpicker form-control")
          :javascript
            miqInitSelectPicker();
            miqSelectPickerEvent('instance_name', "#{url}")
      - unless ae_ansible_custom_button
        .form-group
          %label.control-label
            = _("Message")

          = text_field_tag("object_message",
                          resolve[:new][:object_message],
                          :maxlength         => ViewHelper::MAX_NAME_LEN,
                          :class             => "form-control form-control",
                          "data-miq_observe" => {:interval => '.5',
                                                  :url      => url}.to_json)
          = javascript_tag("if (!$('#description').length) #{javascript_focus('object_message')}")
        .form-group
          %label.control-label
            = _("Request")

          = text_field_tag("object_request",
                          resolve[:new][:object_request],
                          :maxlength         => ViewHelper::MAX_NAME_LEN,
                          :class            => "form-control form-control",
                          "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
    - if form_action != "miq_action"
      - if ae_custom_button
        %hr
        %h3
          = _("Object Attribute")
        .form-horizontal
          .form-group.object-attribute
            %label.attribute-label
              = _("Type")
            .attribute-value
              = ui_lookup(:model => @resolve[:target_class])
      - else
        %hr
        %h3
          = _("Object Attribute")
        .form
          .form-group
            %label.control-label
              = _("Type")
            %hr
            = select_tag('target_class',
                        options_for_select([["<#{_('None')}>", nil]] + resolve[:target_classes].invert.to_a,
                        resolve[:new][:target_class]),
                        "data-miq_sparkle_on"  => true,
                        "data-miq_sparkle_off" => true,
                        :class    => "selectpicker form-control")
            :javascript
              miqInitSelectPicker();
              miqSelectPickerEvent('target_class', "#{url}")
          - if resolve[:new][:target_class] && !resolve[:new][:target_class].blank? && resolve[:targets]
            .form-group
              %label.control-label
                = _("Selection")

              = select_tag('target_id',
                          options_for_select([["<#{_('Choose')}>", nil]] + resolve[:targets],
                                              resolve[:new][:target_id]),
                          "data-miq_sparkle_on"  => true,
                          "data-miq_sparkle_off" => true,
                          :class    => "selectpicker form-control")
              :javascript
                miqInitSelectPicker();
                miqSelectPickerEvent('target_id', "#{url}")
    %hr
    %h3
      = _("Attribute/Value Pairs")
    .form-horizontal
      - ApplicationController::AE_MAX_RESOLUTION_FIELDS.times do |i|
        - f = "attribute_" + (i + 1).to_s
        - v = "value_" + (i + 1).to_s
        .form-group
          %label.col-md-2.control-label
            = (i + 1).to_s
          .col-md-4
            = text_field_tag(f,
                            resolve[:new][:attrs][i][0],
                            :maxlength         => ViewHelper::MAX_NAME_LEN,
                            :class            => "form-control",
                            "data-miq_observe" => {:interval => '.5',
                                                    :url => url}.to_json)
          .col-md-4
            = text_field_tag(v,
                            resolve[:new][:attrs][i][1],
                            :maxlength         => ViewHelper::MAX_NAME_LEN,
                            :class            => "form-control",
                            "data-miq_observe" => {:interval => '.5',
                                                    :url => url}.to_json)
