-# Set the JS type vars if a saved expression atom already exists when first showing the editor
- if @edit && @edit.fetch_path(@expkey, :val1, :type)
  = javascript_tag("ManageIQ.expEditor.first.type = '#{@edit[@expkey][:val1][:type]}';")
  = javascript_tag("ManageIQ.expEditor.first.title = '#{@edit[@expkey][:val1][:title]}';")
- if @edit && @edit.fetch_path(@expkey, :val2, :type)
  = javascript_tag("ManageIQ.expEditor.second.type = '#{@edit[@expkey][:val2][:type]}';")
  = javascript_tag("ManageIQ.expEditor.second.title = '#{@edit[@expkey][:val2][:title]}';")

#exp_editor_div
  = render :partial => 'layouts/flash_msg', :locals => {:flash_div_id => 'exp_editor_flash'} if !params[:button] == "reset"
  %fieldset
    .toolbar-pf-actions{:style => "margin-left: 20px"}
      .form-group
        - if @edit[@expkey].history.idx > 0
          - t = _('Undo the last change')
          %button.btn.btn-default{"data-miq_sparkle_on" => true,
          "data-method" => :post,
          :onclick      => "miqAjaxButton('#{url_for_only_path(:action => 'exp_button', :pressed => 'undo')}');",
          :remote       => true,
          :title        => t}
            %i.fa.fa-reply
        - else
          %button.btn.btn-default.disabled
            %i.fa.fa-reply

        - if @edit[@expkey].history.idx < @edit[@expkey].history.array.length - 1
          - t = _('Re-apply the previous change')
          %button.btn.btn-default{"data-miq_sparkle_on" => true,
          :onclick      => "miqAjaxButton('#{url_for_only_path(:action => 'exp_button', :pressed => 'redo')}');",
          :remote       => true,
          "data-method" => :post,
          :title        => t}
            %i.fa.fa-share
        - else
          %button.btn.btn-default.disabled
            %i.fa.fa-share

        %span#exp_buttons_off
          - %w(and or not).each do |image|
            .btn.btn-default.disabled
              = image_tag(image_path("toolbars/#{image}.png"))
          %button.btn.btn-default.disabled
            %i.fa-lg.pficon.pficon-close

        %span#exp_buttons_not{:style => "display: none"}
          - [[_("AND with a new expression element"), 'and', 'and'],
             [_("OR with a new expression element"),  'or',  'or'],
             ["",                                     'not', '']].each do |title, image, pressed|
            - if title.empty?
              .btn.btn-default.disabled
                = link_to(image_tag(image_path("toolbars/#{image}.png")))
            - else
              .btn.btn-default
                = link_to(image_tag(image_path("toolbars/#{image}.png"),
                                    :alt => title),
                          {:action  => "exp_button",
                           :pressed => pressed},
                          "data-miq_sparkle_on"  => true,
                          :remote                => true,
                          "data-method"          => :post,
                          :title                 => title)

          %button.btn.btn-default{"data-method" => :post,
          "data-miq_sparkle_on" => true,
          :onclick              => "miqAjaxButton('#{url_for_only_path(:action => 'exp_button', :pressed => 'remove')}');",
          :remote               => true,
          :title                => _("Remove this expression element")}
            %i.fa-lg.pficon.pficon-close

        %span#exp_buttons_on{:style => "display: none"}
          - [[_("AND with a new expression element"),       'and',     'and'],
             [_("OR with a new expression element"),        'or',      'or'],
             [_("Wrap this expression element with a NOT"), 'not',     'not']].each do |title, image, pressed|
            .btn.btn-default
              = link_to(image_tag(image_path("toolbars/#{image}.png"), :alt => title), {:action => 'exp_button', :pressed => pressed},
                        "data-miq_sparkle_on"  => true,
                        :remote                => true,
                        "data-method"          => :post,
                        :title                 => title)
          %button.btn.btn-default{"data-method" => :post,
          "data-miq_sparkle_on" => true,
          :onclick              => "miqAjaxButton('#{url_for_only_path(:action => 'exp_button', :pressed => 'remove')}');",
          :remote               => true,
          :title                => _("Remove this expression element")}
            %i.fa-lg.pficon.pficon-close

    - @edit[@expkey][:exp_table].each do |token|
      - if ! %w(AND OR ( ) ???).include?([token].flatten.first)
        = link_to(token.first,
                  {:action => 'exp_token_pressed',
                   :token  => token.last},
                  :style                 => "color: black",
                  "data-miq_sparkle_on"  => true,
                  :remote                => true,
                  "data-method"          => :post,
                  :id                    => "exp_#{token.last}")
      - elsif [token].flatten.first == "???"
        = link_to(token.first,
                  {:action => 'exp_token_pressed',
                   :token  => token.last},
                  :style                 => "color: black; background-color: yellow",
                  "data-miq_sparkle_on"  => true,
                  :remote                => true,
                  "data-method"          => :post,
                  :id                    => "exp_#{token.last}")
      - else
        %font{:color => "red"}
          %b
            = token

  - if @edit[@expkey][:exp_token]
    = render(:partial => 'layouts/exp_atom/editor')
