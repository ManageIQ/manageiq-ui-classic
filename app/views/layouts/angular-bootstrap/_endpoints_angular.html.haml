- return unless %w(ems_cloud ems_infra ems_container ems_middleware ems_network ems_physical_infra).include?(controller_name)
- prefix ||= "default"
- ng_reqd_hostname ||= true
- ng_reqd_api_port ||= true
- ng_reqd_db_name ||= false
- detection ||= false
- ng_readonly_hostname ||= false
- ng_readonly_api_port ||= false
- ng_readonly_ems_container_security_protocol ||= false
- ng_readonly_tls_verify ||= false
- ng_readonly_tls_ca_certs ||= false

%div{"ng-if" => defined?(security_protocol_hide) ? false : true}
  .form-group{"ng-class" => "{'has-error': angularForm.#{prefix}_security_protocol.$invalid}",
              "ng-if"    => "emsCommonModel.emstype == 'openstack' || " +                              |
                            "emsCommonModel.emstype == 'openstack_infra' || " +                        |
                            "emsCommonModel.emstype == 'telefonica' || " +                             |
                            "emsCommonModel.emstype == 'nuage_network' || " +                          |
                            "emsCommonModel.emstype == 'redfish_ph_infra' || " +                       |
                            "(emsCommonModel.emstype == 'vmware_cloud' && '#{prefix}' === 'amqp') || " |
                            "emsCommonModel.emstype == 'scvmm' || " +                                  |
                            "emsCommonModel.ems_controller == 'ems_container' || " +                   |
                            "emsCommonModel.emstype === 'kubevirt' || " +                              |
                            "emsCommonModel.emstype == 'hawkular'"}                                    |
    %label.col-md-2.control-label{"for" => "#{prefix}_security_protocol"}
      = _('Security Protocol')
    .col-md-8{"ng-if" => "emsCommonModel.emstype == 'openstack' || emsCommonModel.emstype == 'openstack_infra' || emsCommonModel.emstype == 'vmware_cloud'"}
      - prefix == "amqp" ? security_protocols = @amqp_security_protocols : security_protocols = @openstack_security_protocols
      = select_tag("#{prefix}_security_protocol",
                       options_for_select([["<#{_('Choose')}>", nil]] + security_protocols, :disabled => ["<#{_('Choose')}>", nil]),
                       "ng-model"                    => "#{ng_model}.#{prefix}_security_protocol",
                       "checkchange"                 => "",
                       "ng-required"                 => true,
                       "ng-change"                   => "openstackSecurityProtocolChanged()",
                       "selectpicker-for-select-tag" => "",
                       "prefix"                      => prefix.to_s,
                       "reset-validation-status"     => "#{prefix}_auth_status")
    .col-md-8{"ng-if" => "emsCommonModel.emstype == 'telefonica'"}
      - prefix == "amqp" ? security_protocols = @amqp_security_protocols : security_protocols = @telefonica_security_protocols
      = select_tag("#{prefix}_security_protocol",
                       options_for_select([["<#{_('Choose')}>", nil]] + security_protocols, :disabled => ["<#{_('Choose')}>", nil]),
                       "ng-model"                    => "#{ng_model}.#{prefix}_security_protocol",
                       "checkchange"                 => "",
                       "ng-required"                 => true,
                       "ng-change"                   => "telefonicaSecurityProtocolChanged()",
                       "selectpicker-for-select-tag" => "",
                       "prefix"                      => prefix.to_s,
                       "reset-validation-status"     => "#{prefix}_auth_status")
    .col-md-8{"ng-if" => "emsCommonModel.emstype == 'nuage_network'"}
      - prefix == "amqp" ? security_protocols = @amqp_security_protocols : security_protocols = @nuage_security_protocols
      = select_tag("#{prefix}_security_protocol",
                       options_for_select([["<#{_('Choose')}>", nil]] + security_protocols, :disabled => ["<#{_('Choose')}>", nil]),
                       "ng-model"                    => "#{ng_model}.#{prefix}_security_protocol",
                       "checkchange"                 => "",
                       "required"                    => defined?(security_protocol_not_required) ? false : true,
                       "selectpicker-for-select-tag" => "")
    .col-md-8{"ng-if" => "emsCommonModel.emstype == 'scvmm'"}
      = select_tag("#{prefix}_security_protocol",
                       options_for_select([["<#{_('Choose')}>", nil]] + @scvmm_security_protocols, :disabled => ["<#{_('Choose')}>", nil]),
                       "ng-model"                    => "#{ng_model}.#{prefix}_security_protocol",
                       "checkchange"                 => "",
                       "required"                    => "",
                       "selectpicker-for-select-tag" => "",
                       "prefix"                      => prefix.to_s,
                       "reset-validation-status"     => "#{prefix}_auth_status")
    .col-md-8{"ng-if" => "emsCommonModel.ems_controller == 'ems_container' || emsCommonModel.emstype === 'kubevirt'"}
      = select_tag("#{prefix}_security_protocol",
                       options_for_select([["<#{_('Choose')}>", nil]] + @container_security_protocols, :disabled => ["<#{_('Choose')}>", nil]),
                       "disabled"                    => ng_readonly_ems_container_security_protocol,
                       "ng-model"                    => "#{ng_model}.#{prefix}_security_protocol",
                       "checkchange"                 => "",
                       "required"                    => "",
                       "selectpicker-for-select-tag" => "",
                       "prefix"                      => prefix.to_s,
                       "reset-validation-status"     => "#{prefix}_auth_status")
    .col-md-8{"ng-if" => "emsCommonModel.emstype == 'hawkular'"}
      = select_tag("#{prefix}_security_protocol",
                       options_for_select([["<#{_('Choose')}>", nil]] + @hawkular_security_protocols, "disabled" => ["<#{_('Choose')}>", nil]),
                       "ng-model"                    => "#{ng_model}.#{prefix}_security_protocol",
                       "checkchange"                 => "",
                       "required"                    => "",
                       "ng-change"                   => "hawkularSecurityProtocolChanged()",
                       "selectpicker-for-select-tag" => "",
                       "prefix"                      => prefix.to_s,
                       "reset-validation-status"     => "#{prefix}_auth_status")
    .col-md-8{"ng-if" => "emsCommonModel.emstype == 'redfish_ph_infra'"}
      - security_protocols = @redfish_security_protocols
      = select_tag("#{prefix}_security_protocol",
                       options_for_select([["<#{_('Choose')}>", nil]] + security_protocols, :disabled => ["<#{_('Choose')}>", nil]),
                       "ng-model"                    => "#{ng_model}.#{prefix}_security_protocol",
                       "checkchange"                 => "",
                       "required"                    => defined?(security_protocol_not_required) ? false : true,
                       "selectpicker-for-select-tag" => "")

%div{"ng-if" => defined?(hostname_hide) ? false : true}
  .form-group{"ng-class" => "{'has-error': angularForm.#{prefix}_hostname.$invalid}"}
    %label.col-md-2.control-label{"for" => "#{prefix}_hostname"}
      = _('Hostname (or IPv4 or IPv6 address)')
    .col-md-4
      %input.form-control{"type"                    => "text",
                          "id"                      => "#{prefix}_hostname",
                          "name"                    => "#{prefix}_hostname",
                          "ng-model"                => "#{ng_model}.#{prefix}_hostname",
                          "ng-readonly"             => ng_readonly_hostname,
                          "maxlength"               => ViewHelper::MAX_NAME_LEN.to_s,
                          "ng-required"             => ng_reqd_hostname.to_s,
                          "ng-trim"                 => false,
                          "detect-spaces"           => "",
                          "hostname-validation"     => "",
                          "checkchange"             => "",
                          "prefix"                  => prefix.to_s,
                          "reset-validation-status" => "#{prefix}_auth_status"}
      %span.help-block{"ng-show" => "angularForm.#{prefix}_hostname.$error.required"}
        = _("Required")
      %span.help-block{"ng-show" => "angularForm.#{prefix}_hostname.$error.detectedSpaces"}
        = _("Spaces are prohibited")
      %span.help-block{"ng-show" => "angularForm.#{prefix}_hostname.$error.hostnameValidation"}
        = _("Wrong hostname format")

    - detect = "detectClicked({target: '.detect_button'})"
    %span
      %miq-button.detect_button{"ng-if" => detection ? 'true' : 'false',
                  :name            => _("Detect"),
                  "on-click"       => detect,
                  :enabled         => "isDetectionEnabled()",
                  "disabled-title" => _("Required information missing"),
                  "enabled-title"  => _("Detect Endpoint"),
                  :xs              => 'true',
                  :primary         => 'true'}

%div{"ng-if" => (defined?(hostname_hide) ? false : true) && (defined?(fallback_hostnames) ? fallback_hostnames : false)}
  .form-group{"ng-class" => "{'has-error': angularForm.#{prefix}_fallback_hostname1.$invalid}"}
    %label.col-md-2.control-label{"for" => "#{prefix}_fallback_hostname1"}
      = _('Fallback Hostname 1')
    .col-md-4
      %input.form-control{"type"                    => "text",
                          "id"                      => "#{prefix}_fallback_hostname1",
                          "name"                    => "#{prefix}_fallback_hostname1",
                          "ng-model"                => "#{ng_model}.#{prefix}_fallback_hostname1",
                          "maxlength"               => ViewHelper::MAX_NAME_LEN.to_s,
                          "ng-required"             => "#{ng_model}.#{prefix}_fallback_hostname2",
                          "ng-trim"                 => false,
                          "detect-spaces"           => "",
                          "checkchange"             => "",
                          "prefix"                  => prefix.to_s,
                          "reset-validation-status" => "#{prefix}_auth_status",
                          "placeholder"             => _("Hostname or IPv4 or IPv6 address")}
      %span.help-block{"ng-show" => "angularForm.#{prefix}_fallback_hostname1.$error.required"}
        = _("Required")
      %span.help-block{"ng-show" => "angularForm.#{prefix}_fallback_hostname1.$error.detectedSpaces"}
        = _("Spaces are prohibited")

%div{"ng-if" => (defined?(hostname_hide) ? false : true) && (defined?(fallback_hostnames) ? fallback_hostnames : false)}
  .form-group{"ng-class" => "{'has-error': angularForm.#{prefix}_fallback_hostname2.$invalid}"}
    %label.col-md-2.control-label{"for" => "#{prefix}_fallback_hostname2"}
      = _('Fallback Hostname 2')
    .col-md-4
      %input.form-control{"type"                    => "text",
                          "id"                      => "#{prefix}_fallback_hostname2",
                          "name"                    => "#{prefix}_fallback_hostname2",
                          "ng-model"                => "#{ng_model}.#{prefix}_fallback_hostname2",
                          "maxlength"               => ViewHelper::MAX_NAME_LEN.to_s,
                          "ng-required"             => "#{ng_model}.#{prefix}_fallback_hostname1",
                          "ng-trim"                 => false,
                          "detect-spaces"           => "",
                          "checkchange"             => "",
                          "prefix"                  => prefix.to_s,
                          "reset-validation-status" => "#{prefix}_auth_status",
                          "placeholder"             => _("Hostname or IPv4 or IPv6 address")}
      %span.help-block{"ng-show" => "angularForm.#{prefix}_fallback_hostname2.$error.required"}
        = _("Required")
      %span.help-block{"ng-show" => "angularForm.#{prefix}_fallback_hostname2.$error.detectedSpaces"}
        = _("Spaces are prohibited")

%div{"ng-if" => defined?(apiport_hide) ? false : true}
  .form-group{"ng-class" => "{'has-error': angularForm.#{prefix}_api_port.$invalid}",
              "ng-if" => "emsCommonModel.emstype == 'openstack'              || " + |
                         "emsCommonModel.emstype == 'openstack_infra'        || " + |
                         "emsCommonModel.emstype == 'nuage_network'          || " + |
                         "emsCommonModel.emstype == 'rhevm'                  || " + |
                         "emsCommonModel.emstype === 'kubevirt'              || " + |
                         "emsCommonModel.emstype == 'vmware_cloud'           || " + |
                         "emsCommonModel.emstype == 'hawkular'               || " + |
                         "emsCommonModel.emstype == 'lenovo_ph_infra'        || " + |
                         "emsCommonModel.emstype == 'redfish_ph_infra'       || " + |
                         "emsCommonModel.ems_controller == 'ems_container'"}        |
    %label.col-md-2.control-label{"for" => "#{prefix}_api_port"}
      = _('API Port')
    .col-md-2
      %input.form-control{"type"                        => "text",
                          "id"                          => "#{prefix}_api_port",
                          "name"                        => "#{prefix}_api_port",
                          "ng-model"                    => "#{ng_model}.#{prefix}_api_port",
                          "maxlength"                   => 15,
                          "ng-required"                 => ng_reqd_api_port.to_s,
                          "ng-readonly"                 => ng_readonly_api_port,
                          "checkchange"                 => "",
                          "ng-trim"                     => false,
                          "detect-spaces"               => "",
                          "prefix"                      => prefix.to_s,
                          "reset-validation-depends-on" => %w(hawkular metrics).include?(prefix) ? "#{prefix}_hostname" : "",
                          "reset-validation-status"     => "#{prefix}_auth_status",
                          "pattern"                     => "^[1-9]\\d*$"}
      %span.help-block{"ng-show" => "angularForm.#{prefix}_api_port.$error.pattern"}
        = _("Must be a number (greater than 0)")
      %span.help-block{"ng-show" => "angularForm.#{prefix}_api_port.$error.required"}
        = _("Required")
      %span.help-block{"ng-show" => "angularForm.#{prefix}_api_port.$error.detectedSpaces"}
        = _("Spaces are prohibited")

%div{"ng-if" => defined?(database_name_show) ? true : false}
  .form-group{"ng-class" => "{'has-error': angularForm.#{prefix}_database_name.$invalid}",
    "ng-if" => "emsCommonModel.emstype == 'rhevm'"} |
    %label.col-md-2.control-label{"for" => "#{prefix}_database_name"}
      = _('Database Name')
    .col-md-4
      %input.form-control{"type"          => "text",
                          "id"            => "#{prefix}_database_name",
                          "name"          => "#{prefix}_database_name",
                          "ng-model"      => "#{ng_model}.#{prefix}_database_name",
                          "maxlength"     => 40,
                          "ng-required"   => ng_reqd_db_name.to_s,
                          "checkchange"   => "",
                          "ng-trim"       => false,
                          "detect-spaces" => ""}
      %span.help-block{"ng-show" => "angularForm.#{prefix}_database_name.$error.required"}
        = _("Required")
      %span.help-block{"ng-show" => "angularForm.#{prefix}_database_name.$error.detectedSpaces"}
        = _("Spaces are prohibited")


%div{"ng-if" => defined?(tls_verify_hide) ? false : true}
  .form-group{"ng-if"=> "emsCommonModel.emstype == 'rhevm'"}
    %label.col-md-2.control-label{"for" => "#{prefix}_tls_verify"}
      = _('Verify TLS Certificates')
    .col-md-8
      %input{"type"            => "checkbox",
             "id"              => "#{prefix}_tls_verify",
             "name"            => "#{prefix}_tls_verify",
             "ng-readonly"     => ng_readonly_tls_verify,
             "bs-switch"       => "",
             "switch-on-text"  => _("Yes"),
             "switch-off-text" => _("No"),
             "ng-true-value"   => "true",
             "ng-false-value"  => "false",
             "ng-model"        => "#{ng_model}.#{prefix}_tls_verify",
             "prefix"          => prefix.to_s}

%div{"ng-if" => defined?(tls_ca_certs_hide) ? false : true}
  .form-group{"ng-if"=> "emsCommonModel.emstype == 'rhevm' || " +                                             |
                        "((emsCommonModel.ems_controller == 'ems_container' || " +                            |
                        " emsCommonModel.emstype === 'kubevirt') && " +                                       |
                        " emsCommonModel.#{prefix}_security_protocol == 'ssl-with-validation-custom-ca') || " |
                        "(emsCommonModel.emstype == 'hawkular' && " +                                         |
                        " emsCommonModel.#{prefix}_security_protocol == 'ssl-with-validation-custom-ca')"}    |
    %label.col-md-2.control-label{"for" => "#{prefix}_tls_ca_certs"}
      = _('Trusted CA Certificates')
    .col-md-4
      %textarea.form-control{"id"          => "#{prefix}_tls_ca_certs",
                             "name"        => "#{prefix}_tls_ca_certs",
                             "ng-model"    => "#{ng_model}.#{prefix}_tls_ca_certs",
                             "ng-disabled" => "emsCommonModel.emstype == 'rhevm' && !#{ng_model}.#{prefix}_tls_verify",
                             "ng-readonly" => ng_readonly_tls_ca_certs,
                             "ng-required" => false,
                             "ng-trim"     => false,
                             "prefix"      => prefix.to_s,
                             "reset-validation-status" => "#{prefix}_auth_status"}
      %span.help-block
        = _("Paste here the trusted CA certificates, in PEM format.")

.form-group{"ng-class" => "{'has-error': angularForm.realm.$invalid}",
            "ng-if" => "emsCommonModel.emstype == 'scvmm' && emsCommonModel.default_security_protocol == 'kerberos'"}
  %label.col-md-2.control-label{"for" => "realm"}
    = _('Realm')
  .col-md-4
    %input.form-control{"type"          => "text",
                        "id"            => "realm",
                        "name"          => "realm",
                        "ng-model"      => "emsCommonModel.realm",
                        "maxlength"     => ViewHelper::MAX_NAME_LEN.to_s,
                        "required"      => "",
                        "checkchange"   => "",
                        "auto-focus"    => "",
                        "ng-trim"       => false,
                        "detect-spaces" => ""}
    %span.help-block{"ng-show" => "angularForm.realm.$error.required"}
      = _("Required")
    %span.help-block{"ng-show" => "angularForm.realm.$error.detectedSpaces"}
      = _("Spaces are prohibited")
