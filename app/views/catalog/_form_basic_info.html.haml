- url = url_for(:id => "#{@edit[:rec_id] || "new"}",
  :action => @edit[:new][:service_type] == "composite" ? "st_form_field_changed" : "atomic_form_field_changed")

#basic_info_div
  .form-horizontal
    .form-group
      %label.col-md-2.control-label
        = _('Name / Description')
      .col-md-8{:style => "padding: 0px;"}
        .col-md-4
          = text_field_tag("name",
                           @edit[:new][:name].to_s,
                           :maxlength         => 40,
                           :class             => "form-control",
                           "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
        .col-md-4
          = text_field_tag("description",
                           @edit[:new][:description],
                           :maxlength         => 60,
                           :class             => "form-control",
                           "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
        .col-md-3
          = check_box_tag("display", "1", @edit[:new][:display],
                          "data-miq_observe_checkbox" => {:url => url}.to_json)
          = _('Display in Catalog')
    = javascript_tag(javascript_focus('name'))
    .form-group
      %label.col-md-2.control-label
        = _('Catalog')
      .col-md-4
        - available_catalogs = @edit[:new][:available_catalogs]
        - catalog_id = @edit[:new][:catalog_id]
        = select_tag('catalog_id',
                     options_for_select(([["<#{_('Unassigned')}>", nil]]) + available_catalogs, catalog_id),
                     "data-miq_sparkle_on" => true,
                     :class                => "selectpicker")
        :javascript
          miqInitSelectPicker();
          miqSelectPickerEvent('catalog_id', '#{url}')
    .form-group
      %label.col-md-2.control-label
        = _('Dialog')
      .col-md-4
        %p.form-control-static
          - available_dialogs =  @edit[:new][:available_dialogs].invert.to_a.sort_by { |a| a.first.downcase }
          - options = [["<#{_('No Dialog')}>", nil]] + available_dialogs
          = select_tag('dialog_id',
                        options_for_select(options, @edit[:new][:dialog_id]),
                        "data-miq_sparkle_on" => true,
                        :class                => "selectpicker")
          :javascript
            miqSelectPickerEvent('dialog_id', '#{url}')
    - if @edit[:new][:st_prov_type] == "generic"
      .form-group
        %label.col-md-2.control-label
          = _('Subtype')
        .col-md-4
          %p.form-control-static
            - if @record.try(:id)
              = h(ServiceTemplate::GENERIC_ITEM_SUBTYPES[@edit[:new][:generic_subtype]])
            - else
              - available_subtypes = ServiceTemplate::GENERIC_ITEM_SUBTYPES.invert.to_a.sort_by { |a| a.first.downcase }
              = select_tag('generic_subtype',
                            options_for_select(available_subtypes, @edit[:new][:generic_subtype]),
                            "data-miq_sparkle_on" => true,
                            :class                => "selectpicker")
              :javascript
                miqSelectPickerEvent('generic_subtype', '#{url}')
    - if @edit[:new][:st_prov_type] == "generic_orchestration"
      - opts = [["<#{_('Choose')}>", nil]] + @edit[:new][:available_templates]
      .form-group
        %label.col-md-2.control-label
          = _('Orchestration Template')
        .col-md-8
          = select_tag('template_id',
                        options_for_select(opts, @edit[:new][:template_id]),
                        "data-miq_sparkle_on" => true,
                        :class                => "selectpicker")
          :javascript
            miqSelectPickerEvent('template_id', '#{url}')
      - if @edit[:new][:template_id]
      - opts = [["<#{_('Choose')}>", nil]] + @edit[:new][:available_managers]
        .form-group
          %label.col-md-2.control-label
            = _('Provider')
          .col-md-8
            = select_tag('manager_id',
                         options_for_select(opts, @edit[:new][:manager_id]),
                         "data-miq_sparkle_on" => true,
                         :class               => "selectpicker")
            :javascript
              miqSelectPickerEvent('manager_id', '#{url}')
    - elsif %w(generic_ansible_tower generic_container_template).include?(@edit[:new][:st_prov_type])
      - opts = [["<#{_('Choose')}>", nil]] + @edit[:new][:available_managers]
      .form-group
        %label.col-md-2.control-label
          = _('Provider')
        .col-md-8
          = select_tag('manager_id',
                       options_for_select(opts, @edit[:new][:manager_id]),
                       "data-miq_sparkle_on" => true,
                       :class                => "selectpicker")
          :javascript
            miqSelectPickerEvent('manager_id', '#{url}')
      - if @edit[:new][:manager_id]
        - opts = [["<#{_('Choose')}>", nil]] + @edit[:new][:available_templates]
        .form-group
          %label.col-md-2.control-label
            = @edit[:new][:st_prov_type] == "generic_ansible_tower" ? _('Ansible Tower Job Template') : _('Container Template')
          .col-md-8
            = select_tag('template_id',
                          options_for_select(opts, @edit[:new][:template_id]),
                          "data-miq_sparkle_on" => true,
                          :class                => "selectpicker")
            :javascript
              miqSelectPickerEvent('template_id', '#{url}')
    #entrypoint-selection{'ng-controller' => 'entrypointSelectionController as vm'}
      .form-group
        %label.col-md-2.control-label{:title => _("Provisioning Entry Point (NameSpace/Class/Instance)")}
          = _('Provisioning Entry Point')
        .col-md-8{:title => @edit[:new][:fqname]}
          .input-group
            = text_field_tag("fqname", nil,
              :class     => 'form-control',
              'ng-value' => 'vm.fqname',
              'ng-init'  => "vm.fqname = '#{@edit[:new][:fqname]}'")
            %span.input-group-btn
              %button.btn.btn-default{'ng-click' => "vm.openModal('fqname', true, false);"}
                %i.ff.ff-load-balancer
              %button.btn.btn-default{'ng-click' => "vm.resetField('fqname');"}
                %i.fa.fa-close

      - unless @edit[:new][:st_prov_type] == 'generic_container_template'
        .form-group
          %label.col-md-2.control-label{:title => _("Reconfigure Entry Point (NameSpace/Class/Instance)")}
            = _('Reconfigure Entry Point')
          .col-md-8{:title => @edit[:new][:reconfigure_fqname]}
            .input-group
              = text_field_tag("reconfigure_fqname", nil,
                :class     => 'form-control',
                'ng-value' => 'vm.reconfigure_fqname',
                'ng-init'  => "vm.reconfigure_fqname = '#{@edit[:new][:reconfigure_fqname]}'")
              %span.input-group-btn
                %button.btn.btn-default{'ng-click' => "vm.openModal('reconfigure_fqname', true, false);"}
                  %i.ff.ff-load-balancer
                %button.btn.btn-default{'ng-click' => "vm.resetField('reconfigure_fqname');"}
                  %i.fa.fa-close

        .form-group
          %label.col-md-2.control-label{:title => _("Retirement Entry Point (NameSpace/Class/Instance)")}
            = _('Retirement Entry Point')
          .col-md-8{:title => @edit[:new][:retire_fqname]}
            .input-group
              = text_field_tag("retire_fqname", nil,
                :class     => 'form-control',
                'ng-value' => 'vm.retire_fqname',
                'ng-init'  => "vm.retire_fqname = '#{@edit[:new][:retire_fqname]}'")
              %span.input-group-btn
                %button.btn.btn-default{'ng-click' => "vm.openModal('retire_fqname', true, false);"}
                  %i.ff.ff-load-balancer
                %button.btn.btn-default{'ng-click' => "vm.resetField('retire_fqname');"}
                  %i.fa.fa-close

    :javascript
      miq_bootstrap('#entrypoint-selection', 'ManageIQ.entrypointSelector');
      // FIXME: drop this while angularizing as it is a bad practice
      $(function() {
        $('#entrypoint-selection input[type="text"]').on('change', _.debounce(function() {
          miqObserveRequest('#{url}', {
            no_encoding: true,
            data: this.id + '=' + this.value,
          });
        }, 700, {leading: true, trailing: true}));
      });
