= render :partial => "layouts/flash_msg"
#st_tabs
  %ul.nav.nav-tabs
    = miq_tab_header('basic') do
      = _('Basic Info')
    - if @record.display && !@record.prov_type.try(:start_with?, "generic_")
      = miq_tab_header('details') do
        = _('Details')
    - if @record.composite?
      = miq_tab_header('resources') do
        = _('Selected Resources')
    - else
      - if need_prov_dialogs?(@record.prov_type)
        = miq_tab_header('request') do
          = _('Request Info')
  .tab-content
    = miq_tab_content('basic') do
      %h3
        = _('Basic Information')
      .form-horizontal.static
        .form-group
          %label.col-md-3.control-label
            = _('Name / Description')
          .col-md-9
            #{@record.name} / #{@record.description}
        .form-group
          %label.col-md-3.control-label
            = _('Display in Catalog')
          .col-md-9
            &nbsp;
            = check_box_tag("display", true, @record.display, :disabled => true)
        - if @record.display
          .form-group
            %label.col-md-3.control-label
              = _('Catalog')
            .col-md-9
              = h(@record.service_template_catalog ? @record.service_template_catalog.name : "<#{_('Unassigned')}>")
        - unless @record.prov_type == "generic_ansible_playbook"
          .form-group
            %label.col-md-3.control-label
              = _('Dialog')
            .col-md-9
              = h(@sb[:dialog_label])
        - if @record.prov_type
          .form-group
            %label.col-md-3.control-label
              = _('Item Type')
            .col-md-9
              = h(_(ServiceTemplate::CATALOG_ITEM_TYPES[@record.prov_type]))
        - if @record.prov_type == "generic"
          .form-group
            %label.col-md-3.control-label
              = _('Subtype')
            .col-md-9
              = h(_(ServiceTemplate::GENERIC_ITEM_SUBTYPES[@record[:generic_subtype]]) || _("Custom"))
        - if @record.prov_type == "generic_orchestration"
          .form-group
            %label.col-md-3.control-label
              = _('Orchestration Template')
            .col-md-9
              = h(@record.try(:orchestration_template).try(:name))
          - if @record.orchestration_manager
            .form-group
              %label.col-md-3.control-label
                = _('Provider')
              .col-md-9
                = h(@record.orchestration_manager.name)
        - elsif @record.prov_type == "generic_ansible_tower"
          .form-group
            %label.col-md-3.control-label
              = _('Ansible Tower Template')
            .col-md-9
              = h(@record.try(:job_template).try(:name))
        - elsif @record.prov_type == "generic_container_template"
          .form-group
            %label.col-md-3.control-label
              = _('Provider')
            .col-md-9
              = h(provisioning[:provider_name])
          .form-group
            %label.col-md-3.control-label
              = _('Container Template')
            .col-md-9
              = h(provisioning[:template_name])
        - unless @record.prov_type == "generic_ansible_playbook"
          - entry_points = [[_("Provisioning"), :fqname]]
          - unless @record.prov_type.try(:start_with?, "generic_")
            - entry_points.push([_("Reconfigure"),  :reconfigure_fqname],
               [_("Retirement"),   :retire_fqname])
          - entry_points.each do |entry_points_op|
            .form-group
              %label.col-md-3.control-label{:title => _("%{entry_point} Entry Point (NameSpace/Class/Instance)") % {:entry_point => entry_points_op[0]}}
                #{entry_points_op[0]} #{_('Entry Point')}
              .col-md-9
                = h(@sb[entry_points_op[1]])
        .form-group
          .col-md-9
            #tag_group
            :javascript
               ManageIQ.component.componentFactory('TagGroup', '#tag_group', #{textual_tags_render_data(@record).to_json});
      %hr
      %h3
        = _('Custom Image')
      .form-horizontal
        - if @record.picture
          .form-group
            .col-md-9
              = image_tag("#{@record.picture.url_path}?#{rand(99_999_999)}",
                          :style => "width:100px; height:100px;")
            .col-md-9{:valign => "bottom"}
              = link_to({:action => "st_upload_image", :id => @record.id, :pressed => "remove"},
                        "data-miq_sparkle_on"  => true,
                        "data-miq_sparkle_off" => true,
                        :remote                => true,
                        :class                 => 'btn btn-default',
                        "data-method"          => :post,
                        :confirm               => _("Are you sure you want to remove this Custom Image?"),
                        :title                 => _("Remove this Custom Image")) do
                %i.pficon.pficon-delete
        - else
          = _('No custom image has been uploaded')
          %br
          %br
        .form-group
          = form_tag({:action    => "st_upload_image",
                      :id        => @record.id},
                     {:multipart => true,
                      :method    => :post}) do
            .col-md-4
              = render :partial => "shared/file_chooser", :locals => {:object_name => "upload", :method => "image"}
            .col-md-6
              = submit_tag(_("Upload"), :id => "upload", :class => "upload btn btn-default")
              = _('* Requires image file in .png or .jpg format')
    - if @record.display && !@record.prov_type.try(:start_with?, "generic_")
      = miq_tab_content('details') do
        %h3
          = _('Basic Information')
        .form-horizontal.static
          .form-group
            %label.col-md-3.control-label
              = _('Long Description')
            .col-md-9#long_description
              %miq-sanitize{:value => @record.long_description}

    - if @record.composite?
      = miq_tab_content('resources') do
        %h3
          = _('Resources')
        - resources = @record.service_resources
        - if resources.empty?
          = _('No Resources found.')
        - else
          %table.table.table-bordered.table-hover.table-striped
            %thead
              %tr
                %th.table-view-pf-select
                - titles = [_("Name"), _("Description"), _("Action Order"), _("Provision Order"), _("Action"), _("Delay (mins)")]
                - colspan = [_("Action"), _("Delay (mins)")]
                - titles.each do |title|
                  %th{:colspan => colspan.include?(title) ? 2 : 1}= title
              - sub_titles = [_("Start"), _("Stop"), _("Start"), _("Stop")]
              %tr
                %th{:colspan => "5"}
                - sub_titles.each do |st|
                  %th
                    = st
            %tbody
              - prev_group = 0
              - resources.sort_by { |rsc| [rsc.group_idx, rsc.resource_name.downcase] }.each_with_index do |r, i|
                - col_span = 10
                - if prev_group != r.group_idx && i < resources.length
                  - prev_group = r.group_idx
                  %tr.separator
                    %td{:colspan => col_span}
                %tr{:title       => _("Click to this Catalog Item"),
                    :onclick     => remote_function(:loading  => "miqSparkle(true);",
                                                    :complete => "miqSparkle(false);",
                                                    :url      => "/catalog/x_show/#{r.resource_id}")}
                  %td.table-view-pf-select
                    %i.pficon.pficon-template
                  - keys = %w(resource_name resource_description group_idx provision_index start_action stop_action start_delay stop_delay)
                  - keys.each do |key|
                    %td
                      - if %w(start_delay stop_delay).include?(key)
                        = r.send(key) / 60
                      - else
                        = %w(group_idx provision_index).include?(key) ? r.send(key).to_i + 1 : r.send(key)
    - else
      - if !@record.prov_type || (@record.prov_type && need_prov_dialogs?(@record.prov_type))
        = miq_tab_content('request') do
          - if @options && @options[:wf]
            %h3
              = _('Request Info')
              = render :partial => "miq_request/prov_wf",
                       :locals  => {:wf   => @options[:wf],
                                    :show => true}
          - else
            %span{:style => "color:red"}= @no_wf_msg

- if @record.prov_type == "generic_ansible_playbook"
  #playbook_tabs
    %ul.nav.nav-tabs
      = miq_tab_header('provisioning') do
        = _('Provisioning')
      - if @record.config_info.fetch_path(:retirement)
        = miq_tab_header('retirement') do
          = _('Retirement')
    .tab-content
      = miq_tab_content('provisioning') do
        %h3
          = _('Provisioning Info')
        .col-md-12.col-lg-6
          .form-horizontal.static
            .form-group
              %label.col-md-3.control-label
                = _('Repository')
              .col-md-9
                = h(provisioning[:repository])
            .form-group
              %label.col-md-3.control-label
                = _('Playbook')
              .col-md-9
                = h(provisioning[:playbook])
            .form-group
              %label.col-md-3.control-label
                = _('Machine Credential')
              .col-md-9
                = h(provisioning[:machine_credential])
            .form-group
              %label.col-md-3.control-label
                = _('Vault Credential')
              .col-md-9
                = h(provisioning[:vault_credential])
            -#.form-group
            -#  %label.col-md-3.control-label
            -#    = _('Network Credential')
            -#  .col-md-9
            -#    = h(provisioning[:network_credential])
            .form-group
              %label.col-md-3.control-label
                = _('Cloud Credential')
              .col-md-9
                = h(provisioning[:cloud_credential])
            .form-group
              %label.col-md-3.control-label
                = _('Max TTL (mins)')
              .col-md-9
                = h(@record.config_info[:provision][:execution_ttl])
            .form-group
              %label.col-md-3.control-label
                = _('Hosts')
              .col-md-9
                = h(@record.config_info[:provision][:hosts])
            .form-group
              %label.col-md-3.control-label
                = _('Logging Output')
              .col-md-9
                = h(ViewHelper::LOG_OUTPUT_LEVELS[provisioning[:log_output]])
            .form-group
              %label.col-md-3.control-label
                = _('Escalate Privilege')
              .col-md-9
                = h(provisioning[:become_enabled])
            .form-group
              %label.col-md-3.control-label
                = _('Verbosity')
              .col-md-9
                = _(ViewHelper::VERBOSITY_LEVELS[provisioning[:verbosity]])
        .col-md-12.col-lg-6
          .form-horizontal.static
            .form-group
              %label.col-md-3.control-label
                = _("Variables & Default Values")
              .col-md-9
                %table.table.table-bordered.table-striped
                  %thead
                    %th
                      = _("Variable")
                    %th
                      = _("Default value")
                  %tbody
                    - @record.config_info[:provision][:extra_vars].each do |key, value|
                      %tr
                        %td
                          = h(key)
                        %td
                          = h(value[:default])
            .form-group
              %label.col-md-3.control-label
                = _('Dialog')
              .col-md-9
                - if provisioning[:dialog_id]
                  - if role_allows?(:feature => "dialog_accord", :any => true)
                    - params = {:controller => 'miq_ae_customization', :action => 'show', :id => "dg-#{provisioning[:dialog_id]}"}
                    = link_to(provisioning[:dialog],
                            params,
                            "data-miq_sparkle_on"  => true,
                            "data-miq_sparkle_off" => true,
                            :title                 => provisioning[:dialog])
                  - else
                    = h(provisioning[:dialog])
      - if @record.config_info.fetch_path(:retirement)
        = miq_tab_content('retirement') do
          %h3
            = _('Retirement Info')
          .col-md-12.col-lg-6
            .form-horizontal.static
              .form-group
                %label.col-md-3.control-label
                  = _('Repository')
                .col-md-9
                  = h(retirement[:repository])
              .form-group
                %label.col-md-3.control-label
                  = _('Playbook')
                .col-md-9
                  = h(retirement[:playbook])
              .form-group
                %label.col-md-3.control-label
                  = _('Machine Credential')
                .col-md-9
                  = h(retirement[:machine_credential])
              .form-group
                %label.col-md-3.control-label
                  = _('Vault Credential')
                .col-md-9
                  = h(retirement[:vault_credential])
              -#.form-group
              -#  %label.col-md-3.control-label
              -#    = _('Network Credential')
              -#  .col-md-9
              -#    = h(retirement[:network_credential])
              .form-group
                %label.col-md-3.control-label
                  = _('Cloud Credential')
                .col-md-9
                  = h(retirement[:cloud_credential])
              .form-group
                %label.col-md-3.control-label
                  = _('Max TTL (mins)')
                .col-md-9
                  = h(@record.config_info[:retirement][:execution_ttl])
              .form-group
                %label.col-md-3.control-label
                  = _('Hosts')
                .col-md-9
                  = h(@record.config_info[:retirement][:hosts])
              .form-group
                %label.col-md-3.control-label
                  = _('Logging Output')
                .col-md-9
                  = h(ViewHelper::LOG_OUTPUT_LEVELS[retirement[:log_output]])
              .form-group
                %label.col-md-3.control-label
                  = _('Escalate Privilege')
                .col-md-9
                  = h(retirement[:become_enabled])
              .form-group
                %label.col-md-3.control-label
                  = _('Remove Resources')
                .col-md-9
                  = h(remove_resources_display(retirement[:remove_resources]))
              .form-group
                %label.col-md-3.control-label
                  = _('Verbosity')
                .col-md-9
                  = _(ViewHelper::VERBOSITY_LEVELS[retirement[:verbosity]])
          .col-md-12.col-lg-6
            .form-horizontal.static
              .form-group
                %label.col-md-3.control-label
                  = _("Variables & Default Values")
                .col-md-9
                  %table.table.table-bordered.table-striped
                    %thead
                      %th
                        = _("Variable")
                      %th
                        = _("Default value")
                    %tbody
                      - if @record.config_info[:retirement][:extra_vars]
                        - @record.config_info[:retirement][:extra_vars].each do |key, value|
                          %tr
                            %td
                              = h(key)
                            %td
                              = h(value[:default])

:javascript
  miq_tabs_init("#st_tabs");
  miq_tabs_init("#playbook_tabs");
  miq_bootstrap('#long_description', 'miq.helpers');
